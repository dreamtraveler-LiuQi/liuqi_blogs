<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML入门笔记</title>
    <url>/liuqi_blogs/2022/01/24/HTML%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="HTML-结构"><a href="#HTML-结构" class="headerlink" title="HTML 结构"></a>HTML 结构</h4><hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sub-Title<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<br/>

<h5 id="body"><a href="#body" class="headerlink" title="body"></a>body</h5><hr>
<p>这个元素中的所有内容都会显示在浏览器的主窗口中。</p>
<br/>

<h5 id="head"><a href="#head" class="headerlink" title="head"></a>head</h5><hr>
<p>body 元素前面，包含这个页面的信息。</p>
<br/>

<h5 id="title"><a href="#title" class="headerlink" title="title"></a>title</h5><hr>
<p>head 元素中的 title 元素，显示在浏览器的顶端。</p>
<p>特性:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p lang=<span class="string">&quot;en-us&quot;</span>&gt;<span class="title class_">Paragraph</span> <span class="keyword">in</span> <span class="title class_">English</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><hr>
<p>标题：<br/><br>六个级别：h1、h2、h3、h4、h5、h6</p>
<br/>

<h5 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h5><hr>
<p>&lt; p &gt;</p>
<br/>

<h5 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h5><hr>
<p>&lt; b &gt;</p>
<br/>

<h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><hr>
<p>&lt; i &gt;</p>
<br/>

<h5 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h5><hr>
<p>&lt; sup &gt;</p>
<br/>

<h5 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h5><hr>
<p>&lt; sub &gt;</p>
<br/>

<h5 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h5><hr>
<p>当浏览器遇到两个或以上的连续空格时，只将其显示为一个空格，这一特性成为白色空间折叠。</p>
<br/>

<h5 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h5><hr>
<p>&lt; br/ &gt;</p>
<br/>

<h5 id="水平符"><a href="#水平符" class="headerlink" title="水平符"></a>水平符</h5><hr>
<p>&lt; hr/ &gt;</p>
<br/>

<h5 id="语义化标记"><a href="#语义化标记" class="headerlink" title="语义化标记"></a>语义化标记</h5><hr>
<p>不影响网页结构，却为所在页面添加了额外信息。</p>
<ul>
<li>&lt; strong &gt; 元素：加粗</li>
<li>&lt; em &gt; 元素：表明重点</li>
<li>&lt; blockquote &gt; 元素：表明引用</li>
</ul>
<br/>

<h5 id="缩写词和首字母缩写词"><a href="#缩写词和首字母缩写词" class="headerlink" title="缩写词和首字母缩写词"></a>缩写词和首字母缩写词</h5><hr>
<ul>
<li>HTML4：缩写词：&lt; abbr &gt;；首字母缩写词：&lt; acronym &gt;</li>
<li>HTML5：均采用 &lt; abbr &gt;</li>
</ul>
<br/>

<h5 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h5><hr>
<p>&lt; cite/ &gt;</p>
<br/>

<h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><hr>
<p>&lt; dfn/ &gt;</p>
<br/>

<h5 id="设计者详细信息"><a href="#设计者详细信息" class="headerlink" title="设计者详细信息"></a>设计者详细信息</h5><hr>
<p>&lt; address/ &gt;</p>
<br/>

<h5 id="内容的修改"><a href="#内容的修改" class="headerlink" title="内容的修改"></a>内容的修改</h5><hr>
<ul>
<li>&lt; ins &gt;：通常带有下划线</li>
<li>&lt; del &gt;：通常带有删除线</li>
</ul>
<br/>

<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><hr>
<h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><hr>
<pre><code>&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</code></pre>
<br/>

<h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><hr>
<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<br/>

<h5 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h5><hr>
<ul>
<li>&lt; dt &gt; 用来包含被定义的术语</li>
<li>&lt; dd &gt; 用来包含定义<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">   &lt;dt&gt;&lt;/dt&gt;</span><br><span class="line">   &lt;dd&gt;&lt;/dd&gt;</span><br><span class="line">   &lt;dt&gt;&lt;/dt&gt;</span><br><span class="line">   &lt;dd&gt;&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;   </span><br></pre></td></tr></table></figure></li>
</ul>
<br/>

<h5 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;Text1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;Text2</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;Text2.1&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;Text2.2&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><hr>
<p>链接是由 &lt; a &gt; 元素建立的，用户可以点击位于起始标签和结束标签之间的任何内容。使用 href 特性来指定要链接到的页面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.imdb.com&quot;&gt;IMDB&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="指向其他网站的链接"><a href="#指向其他网站的链接" class="headerlink" title="指向其他网站的链接"></a>指向其他网站的链接</h5><hr>
<p>采用绝对 URL。</p>
<br/>

<h5 id="指向同一网站中其它页面的链接"><a href="#指向同一网站中其它页面的链接" class="headerlink" title="指向同一网站中其它页面的链接"></a>指向同一网站中其它页面的链接</h5><hr>
<p>采用相对 URL。</p>
<ul>
<li>相同的文件夹：href=”reviews.html”</li>
<li>子文件夹：href=”music/listings.html”</li>
<li>父文件夹：href=”../index.html”</li>
</ul>
<br/>

<h5 id="EMAIL-链接"><a href="#EMAIL-链接" class="headerlink" title="EMAIL 链接"></a>EMAIL 链接</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;mailto:jon@example.org&quot;&gt;Email Jon&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="在新窗口打开链接"><a href="#在新窗口打开链接" class="headerlink" title="在新窗口打开链接"></a>在新窗口打开链接</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.imdb.com&quot; target=&quot;_blank&quot;&gt;Internet Movie Database&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="链接到当前页面的某个特定位置"><a href="#链接到当前页面的某个特定位置" class="headerlink" title="链接到当前页面的某个特定位置"></a>链接到当前页面的某个特定位置</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 id=&quot;top&quot;&gt;&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;a href=&quot;#top&quot;&gt;Top&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="链接到其他页面的某个特定位置"><a href="#链接到其他页面的某个特定位置" class="headerlink" title="链接到其他页面的某个特定位置"></a>链接到其他页面的某个特定位置</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.htmlandcssbook.com/#bottom&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h4 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h4><hr>
<h5 id="添加图像"><a href="#添加图像" class="headerlink" title="添加图像"></a>添加图像</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;images/qukka.jpg&quot; alt=&quot;说明&quot; title=&quot;附加信息&quot; /&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>height：像素为单位指定图像的高度（现在交给 CSS）</li>
<li>width：像素为单位指定图像的宽度（现在交给 CSS）</li>
</ul>
<br/>

<h5 id="图像格式"><a href="#图像格式" class="headerlink" title="图像格式"></a>图像格式</h5><hr>
<ul>
<li>JPEG：当图片包含多种不同的颜色</li>
<li>PNG、GIF：当图像中包含少量的颜色或者大面积的同色区域</li>
</ul>
<br/>

<h5 id="图像大小"><a href="#图像大小" class="headerlink" title="图像大小"></a>图像大小</h5><hr>
<p>在保存网站中所使用的图像时，它的宽度和高度应该与你希望它在页面中显示的大小保持一致。</p>
<br/>

<h5 id="图像的衡量和分辨率"><a href="#图像的衡量和分辨率" class="headerlink" title="图像的衡量和分辨率"></a>图像的衡量和分辨率</h5><hr>
<p>采用像素来衡量，因为显示在计算机屏幕的图像由称为像素的小方块构成。屏幕的分辨率就是每英寸的屏幕上所容纳的像素数，在大多数计算机上，这个数值是可以提高或降低的。</p>
<p>如果一个屏幕的分辨率设置为 640像素<em>480像素，然后将分辨率提高为 1024像素</em>768像素，屏幕上显示的图像和文本将变小，这是因为在同样大小的空间内显示了更多的像素。</p>
<br/>

<h5 id="矢量图像"><a href="#矢量图像" class="headerlink" title="矢量图像"></a>矢量图像</h5><hr>
<ul>
<li>创建：通过在网格上设置关键点并绘制这些点之间的线条来完成，然后就可以在已经创建的线条上填充颜色。</li>
<li>SVG：可伸缩矢量图形</li>
</ul>
<br/>

<h5 id="HTML5：图形和图形说明"><a href="#HTML5：图形和图形说明" class="headerlink" title="HTML5：图形和图形说明"></a>HTML5：图形和图形说明</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;figure&gt;</span><br><span class="line">    &lt;img&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;figcaption&gt;&lt;/figcaption&gt;</span><br><span class="line">&lt;/figure&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>figure：包含图像以及对图像的说明</li>
<li>figcaption：让网页设计人员给图像添加说明</li>
</ul>
<br/>

<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><hr>
<h5 id="表格结构"><a href="#表格结构" class="headerlink" title="表格结构"></a>表格结构</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>tr：每行的起始</li>
<li>td：每个单元格</li>
</ul>
<br/>

<h5 id="表格的标题"><a href="#表格的标题" class="headerlink" title="表格的标题"></a>表格的标题</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th scope=&quot;col&quot;&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th scope=&quot;col&quot;&gt;&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th scope=&quot;row&quot;&gt;&lt;/th&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th scope=&quot;raw&quot;&gt;&lt;/th&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>th：表示列或行的标题（table heading）</li>
<li>scope 特性：表明此元素是列标题还是行标题</li>
</ul>
<br/>

<h5 id="跨列-行"><a href="#跨列-行" class="headerlink" title="跨列 / 行"></a>跨列 / 行</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th scope=&quot;col&quot;&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th scope=&quot;col&quot;&gt;&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th scope=&quot;row&quot;&gt;&lt;/th&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th scope=&quot;raw&quot;&gt;&lt;/th&gt;</span><br><span class="line">        &lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>colspan：跨列</li>
<li>rawspan：跨行</li>
</ul>
<br/>

<h5 id="长表格"><a href="#长表格" class="headerlink" title="长表格"></a>长表格</h5><hr>
<ul>
<li>thead：标题所在元素</li>
<li>tbody：主体部分</li>
<li>tfoot：脚注所在元素</li>
</ul>
<br/>

<h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><hr>
<h5 id="表单结构"><a href="#表单结构" class="headerlink" title="表单结构"></a>表单结构</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.example.com/subscribe.php&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>action：服务器一个页面的 URL，这个页面用来在用户提交表单时接收表单中的信息。</li>
<li>method<ul>
<li>get：表单上的值附加在 action 特性所指定的 URL 末尾，适用于短表单、检索数据</li>
<li>post：表单上的值被放在 HTTP 头部信息进行发送，适用于上传文件、非常长、包含敏感信息、向数据库添加 / 删除信息</li>
</ul>
</li>
</ul>
<br/>

<h5 id="单行文本框"><a href="#单行文本框" class="headerlink" title="单行文本框"></a>单行文本框</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.example.com/subscribe.php&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;p&gt;Username:&lt;input type=&quot;text&quot; name=&quot;username&quot; size=&quot;15&quot; maxlength=&quot;30&quot; /&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>&lt; input &gt; 元素用来创建多种不同的表单控件，其 type 特性的值决定它将要创建哪种控件。</li>
<li>type=”text”：创建一个单行文本框</li>
<li>name：这个特性值对表单控件进行标识</li>
<li>size：指定文本框的宽度</li>
<li>maxlength：限制用户在文本区域输入字符的数量</li>
</ul>
<br/>

<h5 id="密码框"><a href="#密码框" class="headerlink" title="密码框"></a>密码框</h5><hr>
<ul>
<li>type=”password”：类似单行文本框，但是字符被掩盖</li>
</ul>
<h5 id="文本域（多行文本框）"><a href="#文本域（多行文本框）" class="headerlink" title="文本域（多行文本框）"></a>文本域（多行文本框）</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.example.com/subscribe.php&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">    &lt;textarea name=&quot;comments&quot; cols=&quot;20&quot; rows=&quot;4&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>&lt; textarea &gt;：与其他 input 元素不同，&lt; textarea &gt; 元素并非空元素，因此它包含起始标签和结束标签。</li>
<li>cols、rows 现在应该使用 CSS 来控制</li>
</ul>
<br/>

<h5 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;radio&quot; name=&quot;genre&quot; value=&quot;pop&quot; /&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>name：这个问题的所有单选按钮的 name 特性值都应该相同</li>
<li>value：被选中时要发送到服务器的值</li>
</ul>
<br/>

<h5 id="密码框-1"><a href="#密码框-1" class="headerlink" title="密码框"></a>密码框</h5><hr>
<ul>
<li>type=”password”：类似单行文本框，但是字符被掩盖</li>
</ul>
<br/>

<h5 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;service&quot; value=&quot;itunes&quot; checked=&quot;checked&quot;&gt;</span><br></pre></td></tr></table></figure>
<br/>

<h5 id="下拉列表框"><a href="#下拉列表框" class="headerlink" title="下拉列表框"></a>下拉列表框</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">    &lt;option value=&quot;ipod&quot;&gt;iPod&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;radio&quot;&gt;Radio&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="文件上传域"><a href="#文件上传域" class="headerlink" title="文件上传域"></a>文件上传域</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.example.com/subscribe.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;p&gt;Upload your song in MP3 format:&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;user-song&quot; /&gt;&lt;br /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Upload&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>&lt; form &gt; 元素上的 method 特性值必须设置为 post。</li>
<li>type=”file” 这个类型的 input 会创建一个后面附有 Browse 按钮的类似文本框的控件。</li>
<li>type=”submit” 提交按钮用来将表单发送到服务器。value 特性用于控制按钮上显示的文本。</li>
</ul>
<br/>

<h5 id="图像按钮"><a href="#图像按钮" class="headerlink" title="图像按钮"></a>图像按钮</h5><hr>
<p>使用图像作为提交按钮。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.example.com/subscribe.php&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;p&gt;Subscribe to our email list:&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;email&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;image&quot; src=&quot;images/subscribe.jpg&quot;  /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="按钮和隐藏控件"><a href="#按钮和隐藏控件" class="headerlink" title="按钮和隐藏控件"></a>按钮和隐藏控件</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.example.com/subscribe.php&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;button&gt;&lt;img src=&quot;images/add.gif&quot; alt=&quot;add&quot; /&gt; Add&lt;/button&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;bookmark&quot; value=&quot;lyrics&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>引入 &lt; button &gt; 元素是为了让用户更好地控制按钮的显示方式，并且允许其他元素出现在 &lt; button &gt; 元素内。</li>
<li>type=”hidden” 表示隐藏表单控件，这类控件不会显示在页面上。</li>
</ul>
<br/>

<h5 id="标签表单控件"><a href="#标签表单控件" class="headerlink" title="标签表单控件"></a>标签表单控件</h5><hr>
<p>每个表单控件最好使用相应的 <label> 元素来代替简单的文本。</p>
<ul>
<li>用法一：将文本说明和表单输入框全部包围起来<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;label&gt;Age: &lt;input type=&quot;text&quot; name=&quot;age&quot; /&gt;&lt;/label&gt;</span><br></pre></td></tr></table></figure></li>
<li>用法二：与表单控件分开，使用 for 特性来指明 <label> 元素所关联的表单控件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;label for=&quot;female&quot;&gt;Female &lt;/label&gt;</span><br><span class="line">&lt;input id=&quot;female&quot; type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;f&quot; /&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<br/>

<h5 id="组合表单元素"><a href="#组合表单元素" class="headerlink" title="组合表单元素"></a>组合表单元素</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;fieldset&gt;</span><br><span class="line">    &lt;legend&gt;Contact details&lt;/legend&gt;</span><br><span class="line">    &lt;label&gt;Email:&lt;br /&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;email&quot; /&gt;&lt;/label&gt;&lt;br /&gt;</span><br><span class="line">    &lt;label&gt;Mobile:&lt;br /&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;mobile&quot; /&gt;&lt;/label&gt;&lt;br /&gt;</span><br><span class="line">    &lt;label&gt;Telephone:&lt;br /&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;telephone&quot; /&gt;&lt;/label&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>&lt; fieldset &gt;：将置于其中的相关的表单控件分成一组</li>
<li>&lt; legend &gt;：直接跟在起始标签 &lt; fieldset &gt; 后面并且包含一个标题</li>
</ul>
<br/>

<h5 id="HTML5-控件"><a href="#HTML5-控件" class="headerlink" title="HTML5 控件"></a>HTML5 控件</h5><hr>
<ul>
<li>表单验证：增加了一个 required 特性</li>
<li>日期控件：&lt; input type=”date” name=”depart” / &gt;</li>
<li>电子邮件：&lt; input type=”email” name=”email” / &gt;</li>
<li>URL 输入：&lt; input type=”url” name=”website” / &gt;</li>
<li>搜索输入控件：&lt; input type=”search” name=”search” / &gt;</li>
</ul>
<br/>

<h4 id="其他标记"><a href="#其他标记" class="headerlink" title="其他标记"></a>其他标记</h4><hr>
<h5 id="DOCTYPE（文档类型）"><a href="#DOCTYPE（文档类型）" class="headerlink" title="DOCTYPE（文档类型）"></a>DOCTYPE（文档类型）</h5><hr>
<p>因为 HTML 存在多个版本，因此每个网页的开头都应该用一个 DOCTYPE 声明来告诉浏览器此页使用了 HTML 的哪个版本.<br/><br>HTML5：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="HTML-中的注释"><a href="#HTML-中的注释" class="headerlink" title="HTML 中的注释"></a>HTML 中的注释</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- --&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="id-特性"><a href="#id-特性" class="headerlink" title="id 特性"></a>id 特性</h5><hr>
<p>每个 HTML 元素都可以附带 id 特性，id 特性用来从页面中的其他元素中对一个元素进行唯一标识。</p>
<p><b>注意：在一个页面中，没有哪两个元素的 id 特性值是相同的！</b></p>
<br/>

<h5 id="class-特性"><a href="#class-特性" class="headerlink" title="class 特性"></a>class 特性</h5><hr>
<p>每个 HTML 元素都可以附带一个 class 特性，有时候你希望有一种方法可以指定多个元素并将这些元素和页面上的其他元素区分出来。</p>
<br/>

<h5 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h5><hr>
<p>有些元素在浏览器窗口中显示时总是另起一行，这些元素被称为块级元素。<br/><br>块级元素的实例：</p>
<ul>
<li>&lt; h1 &gt;</li>
<li>&lt; p &gt;</li>
<li>&lt; ul &gt;</li>
<li>&lt; li &gt;</li>
</ul>
<br/>

<h5 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h5><hr>
<p>有些元素在显示时总是与它的邻近元素出现在同一行内，这些元素被称为内联元素。</p>
<p>内联元素的实例：</p>
<ul>
<li>&lt; a &gt;</li>
<li>&lt; b &gt;</li>
<li>&lt; em &gt;</li>
<li>&lt; img &gt;</li>
</ul>
<br/>

<h5 id="将文本和元素集中在一个块级元素中"><a href="#将文本和元素集中在一个块级元素中" class="headerlink" title="将文本和元素集中在一个块级元素中"></a>将文本和元素集中在一个块级元素中</h5><hr>
<p>&lt; div &gt; 元素允许你将一组元素集中到一个块级元素内。</p>
<p>在浏览器中，&lt; div &gt; 元素的内容会另起一行显示，但除了这一点，它不会使页面的呈现有什么不同。</p>
<br/>

<h5 id="将文本和元素集中在一个内联元素中"><a href="#将文本和元素集中在一个内联元素中" class="headerlink" title="将文本和元素集中在一个内联元素中"></a>将文本和元素集中在一个内联元素中</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Anish Kapoor won the Turner Prize in 1991 and exhibited at the &lt;span class=&quot;gallery&quot;&gt;Tate Modern&lt;/span&gt; gallery in London in 2003.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>&lt; span &gt; 元素就像是 &lt; div &gt; 元素的内联版本。人们使用 &lt; span &gt; 元素最常见的原因就是可以利用 CSS 来控制 &lt; span &gt; 元素中的内容的外观。</p>
<br/>

<h5 id="内嵌框架"><a href="#内嵌框架" class="headerlink" title="内嵌框架"></a>内嵌框架</h5><hr>
<p>&lt; iframe &gt; 这一术语是 inline frame（内嵌框架）的缩写。在网页中嵌入 Google 地图是内嵌框架的一种常用方式。内嵌框架中的内容可以是任何 html 页面。</p>
<p>&lt; iframe &gt; 的几个特性：</p>
<ul>
<li>src：指定要在框架中显示的页面的 URL</li>
<li>height：指定内嵌框架高度的像素值</li>
<li>width：指定内嵌框架宽度的像素值</li>
<li>scrolling（HTML5 不再支持）：表明是否在内嵌框架上显示滚动条</li>
<li>frameborder（HTML5 不再支持）：表明是否显示框架的边框</li>
<li>seamless（HTML5 的新特性）：应用在不希望出现滚动条的地方</li>
</ul>
<br/>

<h5 id="页面信息"><a href="#页面信息" class="headerlink" title="页面信息"></a>页面信息</h5><hr>
<p>&lt; meta &gt; 元素位于 &lt; head &gt; 元素中并包含着所在页面的相关信息。&lt; meta &gt; 元素是空元素，所以它没有结束标签。它通过特性来携带信息。</p>
<p>最常见的特性：</p>
<ul>
<li>name：你要设定的属性</li>
<li>content：你想给这个属性指定的值</li>
</ul>
<p>下面是 name 特性常见的值：</p>
<ul>
<li>description：页面的描述信息</li>
<li>keywords：一组以逗号分隔的关键词列表</li>
<li>robots：用于指定搜索引擎是否可以将这个页面加入到它们的搜索结果中</li>
</ul>
<p>下面是 http-equiv 特性常见的值：</p>
<ul>
<li>author：定义网页的设计者</li>
<li>pragma：用于防止浏览器对页面的缓存</li>
<li>expires：指定页面的过期时间</li>
</ul>
<p>下面是一个实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;</span><br><span class="line">    &lt;title&gt;算法图解-图书-图灵社区&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h5><hr>
<p>有一些字符用于编写 HTML 代码并作为 HTML 的保留字符。因此，如果想要在页面中显示这些字符，你就需要使用 “转义” 字符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;:&amp;lt;</span><br><span class="line">&gt;:&amp;gt;</span><br><span class="line">&amp;:&amp;amp;</span><br><span class="line">&quot;:&amp;quot;</span><br><span class="line">&#x27;:&amp;lsquo;</span><br><span class="line">&#x27;:&amp;rsquo;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 将本地文件上传Linux服务器, 即ssh 命令上传本地文件</title>
    <url>/liuqi_blogs/2019/02/23/Linux-%E5%B0%86%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%8D%B3ssh-%E5%91%BD%E4%BB%A4%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>scp -P 端口 c://xxxx.txt user@ip:/home/root<br>注意：</p>
<p>-P 大写</p>
<p>-i 公钥</p>
<p>1、从服务器上下载文件<br>scp username@servername:/path/filename /var/www/local_dir（本地目录）</p>
<span id="more"></span>

<p> 例如scp <a href="mailto:&#114;&#x6f;&#x6f;&#116;&#x40;&#49;&#x39;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#x30;&#46;&#49;&#48;&#49;">&#114;&#x6f;&#x6f;&#116;&#x40;&#49;&#x39;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#x30;&#46;&#49;&#48;&#49;</a>:/var/www/test.txt  把192.168.0.101上的/var/www/test.txt 的文件下载到/var/www/local_dir（本地目录）</p>
<p>2、上传本地文件到服务器<br>scp /path/filename username@servername:/path   </p>
<p>例如scp /var/www/test.php  <a href="mailto:&#114;&#111;&#111;&#116;&#64;&#x31;&#x39;&#50;&#46;&#x31;&#54;&#56;&#46;&#x30;&#x2e;&#x31;&#48;&#x31;">&#114;&#111;&#111;&#116;&#64;&#x31;&#x39;&#50;&#46;&#x31;&#54;&#56;&#46;&#x30;&#x2e;&#x31;&#48;&#x31;</a>:/var/www/  把本机/var/www/目录下的test.php文件上传到192.168.0.101这台服务器上的/var/www/目录中</p>
<p>3、从服务器下载整个目录<br>scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）</p>
<p>例如:scp -r <a href="mailto:&#x72;&#x6f;&#x6f;&#x74;&#64;&#49;&#57;&#50;&#46;&#x31;&#54;&#56;&#46;&#x30;&#x2e;&#x31;&#x30;&#49;">&#x72;&#x6f;&#x6f;&#x74;&#64;&#49;&#57;&#50;&#46;&#x31;&#54;&#56;&#46;&#x30;&#x2e;&#x31;&#x30;&#49;</a>:/var/www/test  /var/www/  </p>
<p>4、上传目录到服务器<br>scp  -r local_dir username@servername:remote_dir<br>例如：scp -r test  <a href="mailto:&#x72;&#111;&#111;&#x74;&#x40;&#x31;&#57;&#50;&#x2e;&#x31;&#x36;&#56;&#x2e;&#x30;&#x2e;&#x31;&#x30;&#49;">&#x72;&#111;&#111;&#x74;&#x40;&#x31;&#57;&#50;&#x2e;&#x31;&#x36;&#56;&#x2e;&#x30;&#x2e;&#x31;&#x30;&#49;</a>:/var/www/   把当前目录下的test目录上传到服务器的/var/www/ 目录</p>
<hr>
<p>本文介绍几种常见的方法，把文件上传到Linux服务器中！</p>
<p>常见有使用：scp命令、xshell软件里的xftp程序、U盘挂载、服务器自带的lrzsz程序。</p>
<p>一、scp使用说明：</p>
<p>&emsp;1、把本机的文件传给目的服务器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scp get66.<span class="property">pcap</span> root@<span class="number">192.168</span><span class="number">.1</span><span class="number">.147</span>:/<span class="variable language_">super</span></span><br></pre></td></tr></table></figure>
<p>&emsp;备注：把本机get66.pcap拷贝到147这台服务器的super目录下，需要提供147的密码<br><br/><br/><br>&emsp;2、在本机上执行scp，把远端的服务器文件拷贝到本机上：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scp root@<span class="number">192.168</span><span class="number">.1</span><span class="number">.147</span>:<span class="regexp">/super/</span>dns.<span class="property">pcap</span> /</span><br></pre></td></tr></table></figure>
<p>&emsp;备注：在本机上执行scp，把远端服务器的dns.pcap文件拷贝到本机的根目录下<br><br/><br><br/><br>&emsp;3、拷贝目录下的所有文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scp -r /<span class="variable language_">super</span>/ root@<span class="number">192.168</span><span class="number">.1</span><span class="number">.145</span>:/</span><br></pre></td></tr></table></figure>
<p>&emsp;备注：把/super/目录下的所有文件，拷贝到145服务器根目录下</p>
<p><br/><br/><br>二、xshell软件里的xftp程序：</p>
<p>xshell这个软件很好，强烈推荐哦！！！</p>
<p>里面有个xftp小插件，可以支持文件在笔记本和服务器互传，这个小插件需要单独在网上下载，直接百度搜xftp，很方便。</p>
<p><br/><br/><br>三、U盘挂载</p>
<p>文件在U盘，那好办，直接插到服务器上，然后挂载上，就能把U盘上的文件拷贝到服务器上了</p>
<p>1、执行fdisk -l查看：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.51cto.com/wyfs02/M02/9A/5F/wKiom1lU0n2TnhuFAABDrviioDE238.png-wh_500x0-wm_3-wmp_4-s_3569858331.png" alt="alt 属性"></p>
<p>备注：插上U盘后，fdisk -l查看服务器识别到了，/dev/sdc是我的U盘，16G的</p>
<p>2、挂载到自定义目录下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mkdir /upan</span><br></pre></td></tr></table></figure>
<p>新建一个目录</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mount /dev/sdc1 /upan/</span><br></pre></td></tr></table></figure>

<p>把U盘挂载到刚新建的目录下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd /upan/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<p>就能看到U盘里所有的文件了</p>
<p>3、把文件拷到服务器home下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cp autorun.<span class="property">inf</span> /home/</span><br></pre></td></tr></table></figure>
<p>把U盘里的autorun.inf拷贝到服务器的home目录下</p>
<br/>
4、卸载U盘<br/>
文件拷到服务器后，建议先手动执行命令，然后再拔U盘，防止U盘损坏！！！

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd /</span><br><span class="line">umount /dev/sdc1</span><br></pre></td></tr></table></figure>
<p>好了，拔出U盘吧（按照上面的来，先退回到根目录下，再执行umount命令，不然会报错提示U盘在使用，无法卸载）</p>
<p><img src="https://s6.51cto.com/wyfs02/M01/9A/60/wKioL1lU1TODfo5-AABc6cc7EEI556.png-wh_500x0-wm_3-wmp_4-s_3197153899.png"></p>
<p>四、服务器自带的lrzsz程序</p>
<p>现在大多数Linux服务器都带有lrzsz程序，方便上传下载文件，如果没有，可以直接下载rpm包安装下就好。</p>
<p> <a href="http://down.51cto.com/data/2322755">lrzsz安装包链接!</a></p>
<p>1、rz（笔记本上传给服务器）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure>
<p>选择笔记本上文件传给服务器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sz test.<span class="property">tar</span></span><br></pre></td></tr></table></figure>

<p>把服务器的test.tar拷贝给笔记本。</p>
<p>总结：以上的几种方法在常见的场景应该是足够用了，若其他同志有好的方法，也可以推荐推荐，谢谢！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Material-UI</title>
    <url>/liuqi_blogs/2021/01/02/Material%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Material-UI"><a href="#Material-UI" class="headerlink" title="Material-UI"></a>Material-UI</h1><p>下载对应的库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @material-ui/core axios redux react-router-dom @material-ui/icons -S</span><br></pre></td></tr></table></figure>

<p>导入字体</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--字体库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;display=swap&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--图标库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://material-ui.com/zh">https://material-ui.com/zh</a></p>
<h3 id="hooks的语法理解"><a href="#hooks的语法理解" class="headerlink" title="hooks的语法理解"></a>hooks的语法理解</h3><blockquote>
<p>函数式组件 如果想使用state name遇到用到hooks的api 具体如下  </p>
</blockquote>
<p>遇到</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state中 value 的默认值是female  setValue是一个函数 用来改变value的值</span></span><br><span class="line"><span class="keyword">const</span> [value, setValue] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="title function_">setValue</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br></pre></td></tr></table></figure>

<p>转换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">  <span class="attr">value</span>:<span class="string">&#x27;female&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">value</span>:event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>react.js</category>
      </categories>
      <tags>
        <tag>react.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 基础开发环境包管理工具chocolatey</title>
    <url>/liuqi_blogs/2021/02/22/chocolatey/</url>
    <content><![CDATA[<p>Windows 基础开发环境包管理工具chocolatey。</p>
<p>安装chocolatey<br>以管理员权限运行cmd.exe或powershell.exe</p>
<span id="more"></span>

<p>cmd运行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="string">&quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&quot;</span> -<span class="title class_">NoProfile</span> -<span class="title class_">InputFormat</span> <span class="title class_">None</span> -<span class="title class_">ExecutionPolicy</span> <span class="title class_">Bypass</span> -<span class="title class_">Command</span> <span class="string">&quot;iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))&quot;</span> &amp;&amp; <span class="variable constant_">SET</span> <span class="string">&quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;</span></span><br></pre></td></tr></table></figure>
<p>powershell运行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>@<span class="string">&quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&quot;</span> -<span class="title class_">NoProfile</span> -<span class="title class_">InputFormat</span> <span class="title class_">None</span> -<span class="title class_">ExecutionPolicy</span> <span class="title class_">Bypass</span> -<span class="title class_">Command</span> <span class="string">&quot;iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))&quot;</span> &amp;&amp; <span class="variable constant_">SET</span> <span class="string">&quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;</span></span><br></pre></td></tr></table></figure>
<p>安装完成，运行choco 或 choco -?检查一下是否安装正确</p>
<p>chocolatey安装位置：C:\ProgramData\Chocolatey。无法配置包安装位置。<br>参考文章Windows 神器 Cmder Scoop Chocolatey Listary Seer，可安装的应用程序默认安装在 C:\Program Files\，实际待考究。</p>
<p>用法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">search - 搜索包 choco search somethinglist - 列出包 choco list -lo 或者 choco list --local-onlyinstall - 安装 choco install baretailpin - 固定包的版本，防止包被升级 choco pin windirstatupgrade - 安装包的升级 choco upgrade baretailuninstall - 安装包的卸载 choco uninstall baretail安装<span class="title class_">Ruby</span> <span class="title class_">Gem</span> - choco install compass -source ruby安装<span class="title class_">Python</span> <span class="title class_">Egg</span> - choco install sphynx -source python安装<span class="variable constant_">IIS</span>服务器特性 - choco install <span class="variable constant_">IIS</span> -source windowsfeatures安装<span class="title class_">Webpi</span>特性 - choco install <span class="title class_">IIS7</span>.5Express -source webpi列出<span class="title class_">Windows</span>系统已安装的软件 - choco list -li 或者 choco list -lai升级所有已安装的包 - choco upgrade all -y</span><br></pre></td></tr></table></figure>

<p>window 下开发常用的开发环境应用</p>
<pre><code>choco install autohotkey.portable #安装 AutoHotkey (Portable)choco install nodejs.install #安装 nodechoco install git.install #安装 gitchoco install ruby #安装 rubychoco install python #安装 pythonchoco install jdk8 #安装 JDK8choco install googlechrome #安装 Chromechoco install google-chrome-x64 #Google Chrome (64-bit only)choco install firefox #安装 firefoxchoco install notepadplusplus.install #安装 notepad++choco install Atom #安装 Atomchoco install SublimeText3 #安装 SublimeText3
</code></pre>
]]></content>
      <categories>
        <category>windows工具</category>
      </categories>
      <tags>
        <tag>windows包管理工具</tag>
      </tags>
  </entry>
  <entry>
    <title>项目实现计划</title>
    <url>/liuqi_blogs/2021/01/02/day20200717/</url>
    <content><![CDATA[<h1 id="完善后台管理-小程序-M站"><a href="#完善后台管理-小程序-M站" class="headerlink" title="完善后台管理 小程序 M站"></a>完善后台管理 小程序 M站</h1><p>M站 : mobile 网站  运行在 qq浏览器 / 微信浏览器 / 手机浏览器</p>
<p>webapp : 嵌套在app中的 </p>
<span id="more"></span>

<h2 id="添加学生账号"><a href="#添加学生账号" class="headerlink" title="添加学生账号"></a>添加学生账号</h2><ul>
<li>姓名</li>
<li>头像</li>
<li>用户名</li>
<li>密码</li>
<li>电话号</li>
</ul>
<h2 id="按需加载-element-ui"><a href="#按需加载-element-ui" class="headerlink" title="按需加载 element-ui"></a>按需加载 element-ui</h2><h2 id="完善后台"><a href="#完善后台" class="headerlink" title="完善后台"></a>完善后台</h2>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT 实现相册</title>
    <url>/liuqi_blogs/2018/02/19/home/</url>
    <content><![CDATA[<h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><hr>
<ul>
<li>本节内容是基于实现本地保存图片功能前提记录的笔记，如果是用图床外链，可以跳过所有涉及到 img 文件夹以及 img/s 文件夹的步骤。</li>
<li>本相册的所有功能均仅测试了在 hexo-theme-next 下实现的效果，使用其它主题时部分布局尺寸数据可能会出现偏差，需要自行根据主题设置修改。</li>
</ul>
<span id="more"></span>

<br/>

<h5 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h5><hr>
<ul>
<li>在 git bash 中输入命令 hexo new page gallery；</li>
<li>在 hexo/sourse/gallery 目录下建立你需要的分类相册文件夹；</li>
<li>进入 hexo/sourse/gallery 目录，新建 img 文件夹用来存放相册封面；</li>
<li>在每个相册文件夹中创建 img 文件夹用来存放大图，以及 img/s 文件夹用来存放缩略图。<br/></li>
</ul>
<p>注意：img/s 文件夹可以省略不建，用文件名-s.jpg 的格式重命名缩略图即可。</p>
<br/>

<h5 id="原图处理"><a href="#原图处理" class="headerlink" title="原图处理"></a>原图处理</h5><hr>
<ul>
<li>将需要上传的图片放入 gallery/相册名/img 文件夹中，为了加载速度建议压缩至 1mb 以下，使用 jpg 格式保存；</li>
<li>除了文件大小以外没有其它要求，但是为了方便后续页面编辑，建议将文件以容易辨识的方式重命名，例如日期-图片名.jpg。</li>
</ul>
<h5 id="缩略图处理"><a href="#缩略图处理" class="headerlink" title="缩略图处理"></a>缩略图处理</h5><hr>
<ul>
<li>将 gallery/相册名/img 下的所有图片复制到 gallery/相册名/img/s 文件夹中，使用 PS 等其它处理工具压缩图片大小；</li>
<li>建议宽度为 300px，最终输出文件大小在 30kb 左右，高度无要求。</li>
</ul>
<br/>

<h5 id="封面图处理"><a href="#封面图处理" class="headerlink" title="封面图处理"></a>封面图处理</h5><hr>
<ul>
<li>从每个相册的缩略图中挑选需要的封面，复制到 gallery/img 文件夹中；</li>
<li>建议重命名为相册名.jpg。</li>
</ul>
<br/>

<h5 id="相册主界面"><a href="#相册主界面" class="headerlink" title="相册主界面"></a>相册主界面</h5><hr>
<ul>
<li>打开 gallery/index.md，将 title 设置成你需要的相册页面名称；</li>
<li>（可选）在日期下方加上 comments: false 关闭评论；</li>
<li>复制以下代码粘贴至正文，并按需求修改相册描述、相册名、相册文件夹名以及封面图文件名：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;center&gt;！相册描述【此行可删除】&lt;/center&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span>自定义分隔符【此行可删除】<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line">&lt;div class=&quot;gallery-page&quot;&gt;</span><br><span class="line">	&lt;div class=&quot;gallery-list&quot;&gt;</span><br><span class="line">		&lt;div class=&quot;gallery-column&quot;&gt;</span><br><span class="line">			&lt;div class=&quot;gallery-item&quot;&gt;</span><br><span class="line">				&lt;a href=&quot;【！相册文件夹名】&quot;&gt;&lt;img src=&quot;img/【！封面图文件名】.jpg&quot;&gt;</span><br><span class="line">				&lt;/a&gt;</span><br><span class="line">				&lt;p&gt;- ！相册1 -&lt;/p&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">			&lt;div class=&quot;gallery-item&quot;&gt;</span><br><span class="line">				&lt;a href=&quot;【！相册文件夹名】&quot;&gt;&lt;img src=&quot;img/【！封面图文件名】.jpg&quot;&gt;</span><br><span class="line">				&lt;/a&gt;</span><br><span class="line">				&lt;p&gt;- ！相册2 -&lt;/p&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		&lt;div class=&quot;gallery-column&quot;&gt;</span><br><span class="line">			&lt;div class=&quot;gallery-item&quot;&gt;</span><br><span class="line">				&lt;a href=&quot;sample&quot;&gt;&lt;img src=&quot;img/sample.jpg&quot;&gt;</span><br><span class="line">				&lt;/a&gt;</span><br><span class="line">				&lt;p&gt;- 相册名 -&lt;/p&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		&lt;div class=&quot;gallery-column&quot;&gt;</span><br><span class="line">			&lt;div class=&quot;gallery-item&quot;&gt;</span><br><span class="line">				&lt;a href=&quot;sample&quot;&gt;&lt;img src=&quot;img/sample.jpg&quot;&gt;</span><br><span class="line">				&lt;/a&gt;</span><br><span class="line">				&lt;p&gt;- 相册名 -&lt;/p&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;center&gt;自定义分割线【此行可删除】&lt;/center&gt;</span><br></pre></td></tr></table></figure>

<p>1.需要使用外链的场合，将 &lt; img src=”img/【封面图文件名】.jpg” &gt; 中的内容替换为图床外链地址即可；<br/><br>2.代码中 &lt; div class=”gallery-column” &gt; 元素为分列显示相册的列数，可按需要增减；<br/><br>3.新增相册时请确认代码添加在 &lt; div class=”gallery-column” &gt; 元素内部，否则会造成显示错误。</p>
<br/>

<h5 id="分类相册界面"><a href="#分类相册界面" class="headerlink" title="分类相册界面"></a>分类相册界面</h5><hr>
<ul>
<li>打开 gallery/相册名/index.md，将 title 设置成你需要的相册页面名称；</li>
<li>（可选）在日期下方加上 comments: false 关闭评论；</li>
<li>复制以下代码粘贴至正文，并按需求修改相册描述、图片名以及缩略图文件名：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;center&gt;！相册描述【此行可删除】&lt;/center&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span>自定义分隔符【此行可删除】<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line">&lt;div class=&quot;gallery-page&quot;&gt;</span><br><span class="line">	&lt;div class=&quot;img-list&quot;&gt;</span><br><span class="line">		&lt;div class=&quot;img-column&quot;&gt;</span><br><span class="line">			&lt;a href=&quot;img/【！图片名1】.jpg&quot; target=&quot;_Blank&quot;&gt;&lt;img src=&quot;img/s/【！缩略图文件名1】.jpg&quot;&gt;&lt;/a&gt;</span><br><span class="line">			&lt;a href=&quot;img/【！图片名2】.jpg&quot; target=&quot;_Blank&quot;&gt;&lt;img src=&quot;img/s/【！缩略图文件名2】.jpg&quot;&gt;&lt;/a&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		&lt;div class=&quot;img-column&quot;&gt;</span><br><span class="line">			&lt;a href=&quot;img/sample.jpg&quot; target=&quot;_Blank&quot;&gt;&lt;img src=&quot;img/s/sample.jpg&quot;&gt;&lt;/a&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		&lt;div class=&quot;img-column&quot;&gt;</span><br><span class="line">			&lt;a href=&quot;img/sample.jpg&quot; target=&quot;_Blank&quot;&gt;&lt;img src=&quot;img/s/sample.jpg&quot;&gt;&lt;/a&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;center&gt;自定义分割线【此行可删除】&lt;/center&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>需要使用外链的场合，将 &lt; img src=”img/【图片名】.jpg” &gt; 中的内容替换为图床外链地址即可，如果图床加载速度够快可以用同一个链接填充缩略图部分；</li>
<li>代码中 &lt; div class=”img-column” &gt; 元素为分列显示图片的列数，可按需要增减；</li>
<li>添加图片时请确认代码添加在 &lt; div class=”img-column” &gt; 元素内部，否则会造成显示错误。</li>
</ol>
<br/>

<h5 id="CSS-样式"><a href="#CSS-样式" class="headerlink" title="CSS 样式"></a>CSS 样式</h5><hr>
<p>在 custom.styl 中加入如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*gallery*/</span></span><br><span class="line"></span><br><span class="line">.<span class="property">gallery</span>-page &#123;</span><br><span class="line">	margin-<span class="attr">top</span>: -50px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">img</span>-list,</span><br><span class="line">.<span class="property">gallery</span>-list &#123;</span><br><span class="line">	<span class="attr">display</span>: flex;</span><br><span class="line">	flex-<span class="attr">direction</span>: row;</span><br><span class="line">	flex-<span class="attr">wrap</span>: nowrap;</span><br><span class="line">	align-<span class="attr">items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">img</span>-column &#123;</span><br><span class="line">	<span class="attr">display</span>: flex;</span><br><span class="line">	flex-<span class="attr">direction</span>: column-reverse;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">img</span>-column a,</span><br><span class="line">.<span class="property">gallery</span>-column a &#123;</span><br><span class="line">	border-<span class="attr">bottom</span>: 0px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">gallery</span>-item &#123;</span><br><span class="line">	margin-<span class="attr">bottom</span>: -50px</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">gallery</span>-item p &#123;</span><br><span class="line">	<span class="attr">margin</span>: -25px auto -10px;</span><br><span class="line">	max-<span class="attr">width</span>: <span class="number">50</span>%;</span><br><span class="line">	text-<span class="attr">align</span>: center;</span><br><span class="line">	font-<span class="attr">size</span>: 15px;</span><br><span class="line">	<span class="attr">color</span>: $black-deep;</span><br><span class="line">	<span class="attr">background</span>: <span class="title function_">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">.3</span>);</span><br><span class="line">	border-<span class="attr">radius</span>: 7px;</span><br><span class="line">	<span class="attr">border</span>: 1px solid $black-deep;</span><br><span class="line">	box-<span class="attr">shadow</span>: <span class="number">0</span> 8px 20px -8px <span class="title function_">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">.3</span>);</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">posts</span>-expand .<span class="property">post</span>-body .<span class="property">gallery</span>-column a img &#123;</span><br><span class="line">	<span class="attr">height</span>: 250px;</span><br><span class="line">	<span class="attr">width</span>: 300px;</span><br><span class="line">	object-<span class="attr">fit</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line">@media (max-<span class="attr">width</span>: 767px)&#123;</span><br><span class="line">	.<span class="property">gallery</span>-item p &#123;</span><br><span class="line">		min-<span class="attr">width</span>: 75px;</span><br><span class="line">		font-<span class="attr">size</span>: 13px;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>@media 标签内的样式是防止移动端浏览时相册名被强制换行的，建议保留；</li>
<li>其余样式除了 flex 相关行与 object-fit 样式以外，均可根据需要自行更改，在此不作赘述。</li>
</ol>
<br/>

<h5 id="模板文档"><a href="#模板文档" class="headerlink" title="模板文档"></a>模板文档</h5><hr>
<p><a href="https://drive.google.com/open?id=1Ghcvxm29TnwKAveiE9uZLQAQIEbW-SvR">为了更好地普及本相册做了一个模板文档，用的是 google Drive 链接。</a></p>
<blockquote>
<p>本文转载于： <a href="https://co5.me/2018/181112-gallerry2.html">css+markdown 实现 hexo 相册【进阶篇】</a></p>
</blockquote>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>hexo-next主题配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Jekyll + Github Pages 搭建个人免费博客</title>
    <url>/liuqi_blogs/2019/02/19/jekyll/</url>
    <content><![CDATA[<p>​<br>今天亲手通过 Jekyll 搭建了一套免费博客，搭建步骤其实超级简单。你不需要购买域名，也不需要购买服务器，就可以轻松拥有你自己的博客。<br>Jekyll 的核心是一个文本转换引擎。它的方便之处在于支持多种文本标记语言：Markdown，Textile，HTML，然后 Jekyll 就会帮你加入你选择主题的样式的布局中。最终生成你自己的静态博客网站。</p>
<span id="more"></span>

<p>博客搭建步骤</p>
<p>1.安装环境<br>1.1 安装Ruby<br>官网地址：<a href="https://rubyinstaller.org/downloads/">https://rubyinstaller.org/downloads/</a><br>根据自己的需要下载不同版本，直接点击“下一步”就可轻松安装成功。</p>
<p>1.2 安装RubyGems<br>官网地址：<a href="https://rubygems.org/pages/download">https://rubygems.org/pages/download</a><br>据自己的需要下载不同版本。解压压缩文件到本地。在 CMD 命令窗口执行如下命令：</p>
<p>cd D:\下载\rubygems-3.0.6\rubygems-3.0.6    #切换文件目录<br>ruby setup.rb        #安装<br>rubygems ruby -v     #查看rubygems版本号</p>
<p>1.3 安装Jekyll<br>以上两个步骤操作完成后，在 CMD 窗口执行如下命令安装Jekyll：</p>
<p>gem install jekyll   #安装jekyll<br>jekyll -v    #查看jekyll版本号</p>
<p>2.本地搭建博客<br>2.1 项目启动</p>
<p>jekyll new restlessManBlog   #新建博客<br>cd restlessManBlog           #切换目录<br>jekyll server                #启动项目</p>
<p>项目启动日志如下：</p>
<p>在浏览器访问：<a href="http://localhost:4000/">http://localhost:4000/</a></p>
<p>2.2 添加 MarkDown 文档<br>在项目根目录下的 _posts 目录创建 markdown 文档。这里注意 md 文档命名要添加 “yyyy-mm-dd”的前缀。<br>例如：2019-10-11-5分钟搭建博客.md</p>
<p>2.3 部署代码到 Github<br>2.3.1 创建 Github 账号<br>注：这里我使用的 Github 托管静态博客的，你也可以选择把代码托管到 码云 或者其他平台上。<br>没有 Github 账号的朋友可以注册一个账号，有账号的朋友可跳过。</p>
<p>2.3.2 创建代码仓库<br>创建一个名称为 ‘账号名称.<a href="http://github.io’。例如：我的账号名是helloRestlessMan，仓库名就是">http://github.io’。例如：我的账号名是helloRestlessMan，仓库名就是</a> helloRestlessMan.github.io</p>
<p>2.3.3 部署代码到Github<br>在我们创建的博客的目录找到 _site 目录，将 _site 目录下的所有文件都提交到Github上。</p>
<p>操作步骤：</p>
<p>git clone <a href="https://github.com/helloRestlessMan/helloRestlessMan.github.io.git">https://github.com/helloRestlessMan/helloRestlessMan.github.io.git</a><br>#克隆远程代码到本地<br>拷贝_site 文件到 helloRestlessMan.github.io cd helloRestlessMan.github.io<br>git add .   #git 命令添加所有文件<br>git commit -m “创建 Jekyll 个人博客”      #git 提交文件<br>git push    #git 推送代码到远程</p>
<p>2.4部署代码到码云（Gitee）<br>创建与账号名相同的仓库，如下图：</p>
<p>提交代码到 Gitee 上，再开启 Gitee Pages 服务即可。</p>
<p>最后就可以访问了。<a href="http://huaairen.gitee.io/">http://huaairen.gitee.io/</a></p>
<p>2.5 访问自己的博客网站<br>效果如下图：</p>
<p>2.6 切换主题<br>我这里下载的主题是 mundana-jekyll-theme,</p>
<p>主题下载地址：<a href="http://jekyllthemes.org/themes/mundana-jekyll-theme/">http://jekyllthemes.org/themes/mundana-jekyll-theme/</a><br>注：可能存在兼容性问题，使用下面的命令</p>
<p>cd mundana-jekyll-theme bundle install    #安装依赖<br>bundle exec jekyll serve   #运行项目</p>
<p>我的博客地址：<a href="https://hellorestlessman.github.io/">https://hellorestlessman.github.io/</a><br>项目运行效果：</p>
<p>丰富的主题自由选择</p>
<p>这里推荐两款 Jekyll 主题的网站：<br>1.官方主题网站：<a href="http://jekyllthemes.org/">http://jekyllthemes.org/</a><br>2.Github 上的博客模板：<a href="https://github.com/jekyll/jekyll/wiki/Sites">https://github.com/jekyll/jekyll/wiki/Sites</a></p>
<p>文章推荐</p>
<ol>
<li>Github + hexo matery 主题搭建免费博客</li>
<li>5分钟搭建私人Java博客系统</li>
<li>手把手博客搭建</li>
</ol>
<p>参考资料<br>1.使用 github + jekyll 搭建个人博客</p>
<p>2.Github + Jekyll 搭建个人博客</p>
<p>3.Jekyll主题收藏</p>
<p>4.Gitee + Jekyll 搭建博客</p>
]]></content>
      <categories>
        <category>jekyll</category>
      </categories>
      <tags>
        <tag>搭建blog教程</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown图片</title>
    <url>/liuqi_blogs/2020/07/13/markdown%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>Markdown 图片语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址 <span class="string">&quot;可选标题&quot;</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ul>
<li>开头一个感叹号 !</li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li>
</ul>
<p>使用实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">![RUNOOB 图标](http:<span class="comment">//static.runoob.com/images/runoob-logo.png)</span></span><br><span class="line"></span><br><span class="line">![RUNOOB 图标](http:<span class="comment">//static.runoob.com/images/runoob-logo.png &quot;RUNOOB&quot;)</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/03/A042DF30-C232-46F3-8436-7D6C35351BBD.jpg"></p>
<p>当然，你也可以像网址那样对图片网址使用变量:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">这个链接用 <span class="number">1</span> 作为网址变量 [RUNOOB][<span class="number">1</span>].</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>]: http:<span class="comment">//static.runoob.com/images/runoob-logo.png</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<img src="https://www.runoob.com/wp-content/uploads/2019/03/75AA6EBF-CC57-44A6-A585-5EE3DD94E42A.jpg" width="100%"/>

<br/>
Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 < img > 标签。

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;http://static.runoob.com/images/runoob-logo.png&quot;</span> width=<span class="string">&quot;50%&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<img src="//www.runoob.com/wp-content/uploads/2019/03/55F2A67D-F4BD-4960-AC55-DC690A415878.jpg" width="100%"/>]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdowm</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown常用命令总结——空格符的使用</title>
    <url>/liuqi_blogs/2020/05/21/markdown%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>如何在Markdown文档中插入空格?<br/></p>
<h5 id="简单说"><a href="#简单说" class="headerlink" title="简单说"></a>简单说<br/></h5><p>　&ensp;在 Markdown 文档中，可以直接采用 HTML 标记插入空格（blank space），而且无需任何其他前缀或分隔符。具体如下所示：</p>
<span id="more"></span>

<ul>
<li><p>插入一个空格 (non-breaking space)<br/></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&amp;nbsp;    或    &amp;#<span class="number">160</span>;     或      &amp;#xA0;</span><br></pre></td></tr></table></figure></li>
<li><p>插入两个空格 (en space)<br/></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&amp;ensp;     或    &amp;#<span class="number">8194</span>;   或      &amp;#x2002;</span><br></pre></td></tr></table></figure></li>
<li><p>插入四个空格 (em space)<br/></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&amp;emsp;    或    &amp;#<span class="number">8195</span>;   或      &amp;#x2003;</span><br></pre></td></tr></table></figure></li>
<li><p>插入细空格 (thin space)<br/></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&amp;thinsp;   或     &amp;#<span class="number">8201</span>;  或      &amp;#x2009;</span><br></pre></td></tr></table></figure>

<p> &ensp; &ensp;注意：不要漏掉分号。</p>
<hr>
<h5 id="更多解释"><a href="#更多解释" class="headerlink" title="更多解释 "></a>更多解释 <br/></h5><p>　　在SGML(Standard Generalized Markup Language, 标准的通用标记语言), HTML(Hyper Text Markup Language, 超文本标记语言）和XML（Extensible Markup Language, 扩展标记语言）中，被称为字符数据（character data）和属性值 (attribute values) 的逻辑结构 (logical construct) 是由字符序列组成的。字符序列中的每个字符可以直接由自身表示，也可以由称为字符引用（character reference）的一系列字符表示。<br/></p>
<p>　　字符引用可以分为字符值引用（numeric character reference）和字符实体引用 (character entity reference)。&#160; &#xA0; 等属于字符值引用。&nbsp; &ensp; &emsp; &thinsp; 属于字符实体引用。<br/></p>
<p>　　字符值引用是指由通用字符集编码（Universal Character Set）/Unicode表示代码点（code point），使用格式如下：<br/><br>　　　　&#nnnn;<br/><br>　　　　　　或<br/><br>　　　　&#xhhhh;</p>
<p>　　其中，nnnn 是十进制形式的代码点，hhhh 是十六进制形式的代码点。在 XML 文档中，x 必须是小写的。nnnn 或 hhhh 可能是任何数量的数字，也可能包含前导0。hhhh 可以大小写混合使用，但大写是通常的风格。</p>
<p>　　字符实体引用是指由实体名表示字符。实体必须是预定义的（编译进标记语言），或者在 Document Type Definition(DTD) 中明确声明。使用格式如下：</p>
<p>　　　　&name;<br/><br>　　其中 name 是大小写敏感的实体名。分号是必须的。</p>
<p>　　对于不同宽度的空格的字符实体引用表示中，en 和 em 两者均为排版单位 (typographic unit), en 的宽度是 em 宽度的一半。在排印（typography）中，细空格(thin space)通常是宽度为 em 的 1/5 或 1/6 的空格字符。它用于添加一个狭窄的空格，例如在嵌套的引号之间或分隔相互干扰的标志符号。普通空格，即是不换行空格（Non-breaking space）。</p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>本示例为展示不同宽度的空格的 Markdown 文档。在每行文本开头，采用不同的方式，插入文本所描述的空格，具体内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Spaces   </span><br><span class="line">## character entity reference</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:Violet;&quot;</span>&gt; thin space&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:DodgerBlue;&quot;</span>&gt; one space&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:Tomato;&quot;</span>&gt; two spaces&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:MediumSeaGreen;&quot;</span>&gt; four spaces&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">## numeric character reference in decimal form</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:Violet;&quot;</span>&gt; thin space&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:DodgerBlue;&quot;</span>&gt; one space&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:Tomato;&quot;</span>&gt; two spaces&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:MediumSeaGreen;&quot;</span>&gt; four spaces&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">## numeric character reference in hexadecimal form</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:Violet;&quot;</span>&gt;&amp;#x2009;thin space&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:DodgerBlue;&quot;</span>&gt;&amp;#xA0;one space&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:Tomato;&quot;</span>&gt;&amp;#x2002;two spaces&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:MediumSeaGreen;&quot;</span>&gt;&amp;#x2003;four spaces&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>在 Spaces_Display.ipynb (Jupyter notebook) 中的展示结果，如下图所示</p>
<p><img src="https://img2018.cnblogs.com/blog/757205/201812/757205-20181231212556801-678306317.png"></p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdowm</tag>
      </tags>
  </entry>
  <entry>
    <title>markdowm高级技巧</title>
    <url>/liuqi_blogs/2020/07/09/markdown%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>支持的 HTML 元素<br>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>
<p>目前支持的 HTML 元素有：</p>
<span id="more"></span>

<pre><code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;
</code></pre>
<p>等 ，如：</p>
<pre><code>使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑
</code></pre>
<p>输出结果为：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/03/81999271-F914-428D-B7BF-164BDC67CAAC.jpg"></p>
<br/>

<h5 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h5><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p>
<pre><code>**文本加粗** 
\*\* 正常显示星号 \*\*
</code></pre>
<p>输出结果为：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/03/CA0E0162-0C48-41CD-B57A-CB32A4287C02.jpg"></p>
<br/>

<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure>

<h5 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h5><p>Markdown Preview Enhanced 使用 KaTeX 或者 MathJax 来渲染数学表达式。</p>
<p>KaTeX 拥有比 MathJax 更快的性能，但是它却少了很多 MathJax 拥有的特性。你可以查看 KaTeX supported functions/symbols 来了解 KaTeX 支持那些符号和函数。</p>
<h6 id="默认下的分隔符："><a href="#默认下的分隔符：" class="headerlink" title="默认下的分隔符："></a>默认下的分隔符：</h6><ul>
<li>$…$ 或者 (…) 中的数学表达式将会在行内显示。</li>
<li>$$…$$ 或者 […] 或者 ```math 中的数学表达式将会在块内显示。</li>
</ul>
<img src="https://www.runoob.com/wp-content/uploads/2019/03/0e408954-fda8-11e5-9eb4-562d7c0ca431.gif" width="100%">


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;Bmatrix&#125;</span><br><span class="line">   a &amp; b \\</span><br><span class="line">   c &amp; d</span><br><span class="line">\end&#123;Bmatrix&#125;</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">\begin&#123;CD&#125;</span><br><span class="line">   A @&gt;a&gt;&gt; B \\</span><br><span class="line"><span class="meta">@VbVV</span> <span class="meta">@AAcA</span> \\</span><br><span class="line">   C @= D</span><br><span class="line">\end&#123;CD&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>输出结果为：<br><img src="https://www.runoob.com/wp-content/uploads/2019/03/A9031CEB-04DB-4822-9C98-2E99489D3662.jpeg" width="100%"></p>
<br/>

<hr>
<p>以下几个实例效果图如下：</p>
<p>1、横向流程图源码格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure>
<p>2、竖向流程图源码格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a=1| D[结果1]</span><br><span class="line">    C --&gt; |a=2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure>
<p>3、标准流程图源码格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>
<p>4、标准流程图源码格式（横向）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>
<p>5、UML时序图源码样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure>
<p>6、UML时序图源码复杂样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure>
<p>7、UML标准时序图样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure>
<p>8、甘特图样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/03/md-flow.png"></p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdowm</tag>
      </tags>
  </entry>
  <entry>
    <title>next8.0添加动漫人物</title>
    <url>/liuqi_blogs/2019/02/22/next8-0%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/</url>
    <content><![CDATA[<p>添加卡通人物（看板娘）<br/><br>我在逛别人博客的时候偶然发现右下角居然有一个萌萌的卡通人物，还能根据你鼠标位置摇头，瞬间被吸引到了，赶紧也给自己博客添加一个吧！点击此处进入该项目地址</p>
<span id="more"></span>

<p>输入如下命令获取 live2d ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
<br/>
输入以下命令，下载相应的模型，将 packagename 更换成模型名称即可，
<br/>
更多模型选择请点击https://github.com/xiazeyu/live2d-widget-models，各个模型的预览请访问原作者的博客https://huaji8.top/post/live2d-plugin-2.0/

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ npm install packagename</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">use npm install &#123;packagename&#125; The <span class="keyword">package</span> name is the folder name in packages/ We have:</span><br><span class="line"></span><br><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/<span class="number">01</span> (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/<span class="number">02</span> (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure>
<br/>
打开站点目录下的 _config.yml 文件，添加如下代码：

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">    enable: <span class="literal">true</span></span><br><span class="line">    scriptFrom: local</span><br><span class="line">    model: </span><br><span class="line">        use: live2d-widget-model-haruto #模型选择</span><br><span class="line">    display: </span><br><span class="line">        position: right  #模型位置</span><br><span class="line">        width: <span class="number">150</span>       #模型宽度</span><br><span class="line">        height: <span class="number">300</span>      #模型高度</span><br><span class="line">    mobile: </span><br><span class="line">        show: <span class="literal">false</span>      #是否在手机端显示</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>live2d动漫动态</category>
      </categories>
      <tags>
        <tag>hexo-next主题配置</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题添加老板娘</title>
    <url>/liuqi_blogs/2019/02/21/next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%80%81%E6%9D%BF%E5%A8%98/</url>
    <content><![CDATA[<p>有时候在逛别人的博客界面的时候，会在页面左下角或者右下角等界面看到这样的画面,还是非常好看的<br><img src="https://img-blog.csdnimg.cn/20200714162808591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F3dF9GdURvbmdMYWk=,size_16,color_FFFFFF,t_70" alt="(老板娘)"></p>
<p>今天这篇博客总结下，怎么把萌萌哒的看板娘放到自己的博客页面中。</p>
<span id="more"></span>

<p>我采用的hexo的next主题。</p>
<p>1.下载live2D文件。</p>
<p>2.将其解压后，放置在下面目录：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">博客主目录\themes\next\source\</span><br><span class="line"></span><br><span class="line">[root@D-<span class="title class_">Centos7</span> live2d-widget]# pwd</span><br><span class="line">/www/wwwroot/my_blog_2_hexo/themes/next/source/live2d-widget</span><br></pre></td></tr></table></figure>


<p>3 更改live2d-widget下的autoload.js文件。里面的内容已经写好了，注释第二行，取消第三行的注释就行了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：live2d_path 参数应使用绝对路径</span></span><br><span class="line"><span class="comment">//const live2d_path = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;;</span></span><br><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;/live2d-widget/&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>4 修改/themes/next/layout/下的_layout.swing或者_layout.swig文件，在head标签中添加一行代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;/live2d-widget/autoload.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>5 在theme/next/_config.yml中,新增如下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>6 然后在博客根目录重新生成即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd 博客目录</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>然后就可以看到效果了。<br><img src="https://img-blog.csdnimg.cn/20200714171310758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F3dF9GdURvbmdMYWk=,size_16,color_FFFFFF,t_70" alt="然后就可以看到效果了。"></p>
<p>4.个性化设置<br>想修改看板娘大小、位置、格式、文本内容等，可查看并修改 waifu-tips.js 、 waifu-tips.json 和 waifu.css</p>
<p>参考文章<br><a href="https://www.jianshu.com/p/89440678ee3c">https://www.jianshu.com/p/89440678ee3c</a><br><a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a></p>
]]></content>
      <categories>
        <category>live2d动漫动态</category>
      </categories>
      <tags>
        <tag>hexo-next主题配置</tag>
      </tags>
  </entry>
  <entry>
    <title>lorem ipsum</title>
    <url>/liuqi_blogs/2020/01/02/sitemap/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>软件包管理工具scoop</title>
    <url>/liuqi_blogs/2020/02/22/scoop/</url>
    <content><![CDATA[<p>软件包管理工具scoop，类似chocolatey,chocolatey很多软件安装位置不固定, 会污染Path，推荐能用scoop安装。scoop会统一安装到一个路径下。chocolatey权限要求高, scoop 使用-g安装才需要管理员权限, 默认普通用户权限.</p>
<span id="more"></span>

<p>scoop 安装<br>设置powershell</p>
<pre><code>1set-executionpolicy remotesigned -s currentuser
</code></pre>
<p>默认安装(安装到C:\Users\scoop), 在powershell里面运行:</p>
<pre><code>iex (new-object net.webclient).downloadstring(&#39;https://get.scoop.sh&#39;)
</code></pre>
<p>安装到指定目录(D:\tool\scoop)</p>
<pre><code>[environment]::setEnvironmentVariable(&#39;SCOOP&#39;,&#39;D:\tool\scoop&#39;,&#39;User&#39;)$env:SCOOP=&#39;D:\tool\scoop&#39;iex (new-object net.webclient).downloadstring(&#39;https://get.scoop.sh&#39;)
</code></pre>
<p>指定-g安装目录(D:\tool\scoop_global)</p>
<pre><code>[environment]::setEnvironmentVariable(&#39;SCOOP_GLOBAL&#39;,&#39;D:\tool\scoop_global&#39;,&#39;Machine&#39;)$env:SCOOP_GLOBAL=&#39;D:\tool\scoop_global&#39;
</code></pre>
<p>常用命令</p>
<pre><code>1234567891011scoop help #帮助scoop list #查看当前已安装软件scoop info app #查看软件信息scoop install app #安装软件scoop search app #搜索软件scoop uninstall app #卸载软件scoop update app #更新指定软件scoop update * #更新安装的软件和scoop# 设置代理(http)scoop config proxy 127.0.0.1:4412
</code></pre>
<p>shims 目录<br>scoop安装程序后会在scoop安装目录下的shims里生成一个对应程序的shim.exe(不知道为啥不用快捷方式).</p>
<p>安装scoop后 会自动把shims目录加到用户的Path里.</p>
<p>persist 目录<br>这个目录下面放的是已安装软件的配置文件, 后续更新软件的时候这部分内容不会修改.</p>
<p>scoop 添加 extras 源 (默认的软件有点少)</p>
<pre><code>1scoop bucket add extras
</code></pre>
<p>一个源：</p>
<pre><code>scoop bucket add extras https://github.com/lukesampson/scoop-extras.git  
</code></pre>
<hr>
<p>scoop 使用问题<br>安装某些 gui 程序后, 运行对应的 shim.exe 会出现 cmd 窗口 (nvim-qt cmd窗口一直显示, cmder cmd窗口一闪而过 )  </p>
<p>解决办法:把ScoopApps目录加到path里,目录在</p>
<pre><code>C:\Users\fcying\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Scoop Apps
</code></pre>
<hr>
<p>常用软件git,curl,7zip安装；有些需要管理员权限的软件就需要先安装sudo，就是Linux中的那个sudo；</p>
<pre><code>12scoop install sudoscoop install git curl 7zip
</code></pre>
]]></content>
      <categories>
        <category>windows工具</category>
      </categories>
      <tags>
        <tag>windows包管理工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT Tag 插件的使用</title>
    <url>/liuqi_blogs/2021/02/22/tagPlugin/</url>
    <content><![CDATA[<p>Tag Plugin 是一种使 Hexo 支持特殊样式内容的方法。例如，我们无法在标准 Markdown 中显示具有自定义尺寸的图像。然后我们可以使用标签插件来解决它。 Hexo 有很多可以帮助用户的标签。 Hexo 还具有主题接口，使主题能够创建自己的标签。</p>
<span id="more"></span>

<p>文本居中引用 - Centered Quote<br>使用方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;世间所有的相遇，都是久别重逢&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>

<p>提示块 - Note<br>使用方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% note <span class="keyword">default</span> %&#125;</span><br><span class="line"><span class="keyword">default</span> 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<br/>

<p>主题配置文件中可以修改风格：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Note</span> tag (bs-callout).</span><br><span class="line"><span class="attr">note</span>:</span><br><span class="line">  # <span class="title class_">Note</span> tag style <span class="attr">values</span>:</span><br><span class="line">  #  - simple    bs-callout old alert style. <span class="title class_">Default</span>.</span><br><span class="line">  #  - modern    bs-callout <span class="keyword">new</span> (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style <span class="keyword">with</span> background, like on <span class="title class_">Mozilla</span> or <span class="title class_">StackOverflow</span>.</span><br><span class="line">  #  - disabled  disable all <span class="variable constant_">CSS</span> styles <span class="keyword">import</span> <span class="keyword">of</span> note tag.</span><br><span class="line">  # 风格</span><br><span class="line">  <span class="attr">style</span>: flat</span><br><span class="line">  # 要不要图标</span><br><span class="line">  <span class="attr">icons</span>: <span class="literal">true</span></span><br><span class="line">  # 圆角矩形</span><br><span class="line">  <span class="attr">border_radius</span>: <span class="number">3</span></span><br><span class="line">  # <span class="title class_">Offset</span> lighter <span class="keyword">of</span> background <span class="keyword">in</span> % <span class="keyword">for</span> modern and flat styles (<span class="attr">modern</span>: -<span class="number">12</span> | <span class="number">12</span>; <span class="attr">flat</span>: -<span class="number">18</span> | <span class="number">6</span>).</span><br><span class="line">  # <span class="title class_">Offset</span> also applied to label tag variables. <span class="title class_">This</span> option can work <span class="keyword">with</span> disabled note tag.</span><br><span class="line">  <span class="attr">light_bg_offset</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><u>标签 - Label</u><br/><br>使用方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% label <span class="keyword">default</span>@默认 %&#125; &#123;% label primary@主要 %&#125; &#123;% label success@成功 %&#125; &#123;% label info@信息 %&#125; &#123;% label warning@警告 %&#125; &#123;% label danger@危险 %&#125; </span><br><span class="line">&#123;% label success@这是成功的信息%&#125;</span><br></pre></td></tr></table></figure>
<br/>
<u>选项卡 - Tabs</u>
<br/>
使用方法:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% tabs tab,<span class="number">1</span> %&#125; 名字为tab，默认在第<span class="number">1</span>个选项卡，如果是-<span class="number">1</span>则隐藏</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**选项卡 <span class="number">1</span>** </span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**选项卡 <span class="number">2</span>**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab A --&gt;</span><br><span class="line">**选项卡 <span class="number">3</span>** 名字为A</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<p>主题配置文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Tabs</span> tag</span><br><span class="line"><span class="attr">tabs</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">transition</span>:</span><br><span class="line">    <span class="attr">tabs</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">labels</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">border_radius</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<br/>
<u>按钮 - Button</u>
<br/>
使用方法:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% button url, text, icon [<span class="keyword">class</span>], [title] %&#125;</span><br></pre></td></tr></table></figure>

<p>url : 绝对或相对 URL<br>text : 按钮文字，如果未指定图标则为必须<br>icon : FontAwesome 图标名称（开头没有’fa-‘）。如果未指定文本，则为必需<br>[class] : FontAwesome 类：fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5X ，可选参数。<br>[title] : 鼠标悬停时的工具提示，可选参数。</p>
<p>注意：最好添加 div标签，测试时没加 div，下面显示不完全，加上非常美观。</p>
<p>一个示例：</p>
<pre><code>&lt;div&gt;&#123;% button https://tding.top/ ,首页,home fa-fw,这是小丁的个人博客首页%&#125;&lt;/div&gt;
</code></pre>
<br/>
多个按钮居中显示：

<pre><code>&lt;div class=&quot;text-center&quot;&gt;&lt;div&gt;&#123;% button https://tding.top/ ,首页,home fa-fw,这是小丁的个人博客首页%&#125; &#123;% button https://tding.top/movies/ ,观影,film fa-fw,豆瓣电影%&#125; &#123;% button https://tding.top/books/ ,阅读,book fa-fw,豆瓣读书%&#125;&lt;/div&gt;&lt;/div&gt;
</code></pre>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>hexo-next主题配置</tag>
      </tags>
  </entry>
  <entry>
    <title>token的使用</title>
    <url>/liuqi_blogs/2022/02/19/token%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="token"><a href="#token" class="headerlink" title="token"></a>token</h1><p>尚方宝剑 : 令牌</p>
<ul>
<li><p>体积小（一串字符串），因而传输速度快</p>
</li>
<li><p>传输方式多样，可以通过HTTP 头部（推荐）、 URL、POST 参数等方式传输严谨的结构化。它自身（在 payload 中）就包含了所有与用户相关的验证消息，如用户可访问路由、访问有效期等信息，服务器无需再去连接数据库验证信息的有效性，并且 payload 支持为应用定制化支持跨域验证，多应用于单点登录 充分依赖无状态 API ，契合 RESTful 设计原则（无状态的 HTTP）</p>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>用户登录之后，服务器会返回一串 token 并保存在本地也就是客户端，在这之后的对服务器的访问都要带上这串 token，来获得访问服务器相关路由、服务及资源的权限。 易于实现 CDN，将静态资源分布式管理</p>
</li>
<li><p>在传统的 session 验证中，服务端必须保存 session ID，用于与用户传过来的 cookie 验证。而一开始 sessionID 只会保存在一台服务器上，所以只能由一台 server 应答，就算其他服务器有空闲也无法应答，无法充分利用到分布式服务器的优点。 JWT 依赖的是在客户端本地保存验证信息，不需要利用服务器保存的信息来验证，所以任意一台服务器都可以应答，服务器的资源也被较好地利用。</p>
</li>
<li><p>对原生的移动端应用支持较好 原生的移动应用对 cookie 与 session 的支持不够好，而对 token 的方式支持较好。</p>
</li>
</ul>
<p>总结:</p>
<ul>
<li>不依赖更复杂的系统  不依赖数据库  不依赖session/cookie </li>
<li>对移动端支持友好</li>
<li>为什么 : 为了授权</li>
</ul>
<h2 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h2><p>express + 前端/小程序</p>
<p>express :  </p>
<ol>
<li>生成token  哪个接口可以得到token  ‘/login’</li>
<li>验证token</li>
</ol>
<p>前端 : </p>
<ol>
<li>每次请求的时候都携带上token</li>
</ol>
<p>登录–&gt;返回一个token–&gt;前端每次请求的时候都携带上–&gt;后端判断–&gt;如果token是有效的–&gt;给前端返回数据</p>
<h3 id="1-1-使用"><a href="#1-1-使用" class="headerlink" title="1.1 使用"></a>1.1 使用</h3><p>express-jwt : </p>
<p>jsonwebtoken : 校验和生成token</p>
<p><img src="image/2.png" alt="token解析"></p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>express</p>
<ul>
<li>第一步 : 在登录接口中生成token</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;username,</span><br><span class="line">    password&#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (username === <span class="string">&#x27;小傲&#x27;</span> &amp;&amp; password === <span class="string">&#x27;123456&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="comment">// 单向加密 md5加密</span></span><br><span class="line">      username</span><br><span class="line">    &#125;,<span class="string">&quot;bingyu&quot;</span>,&#123;</span><br><span class="line">      <span class="attr">expiresIn</span>: <span class="string">&quot;1d&quot;</span> <span class="comment">// 彩虹表 md5暴力破解</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;登录成功&#x27;</span>,</span><br><span class="line">      token <span class="comment">// 出生了 要有身份证</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">      <span class="attr">error</span>: <span class="string">&#x27;登录失败&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>第二步 : 前端登录成功之后得到token 存起来</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">     <span class="comment">//http://localhost:3000</span></span><br><span class="line">     <span class="attr">url</span>: app.<span class="property">globalData</span>.<span class="property">BASE_URL</span>+<span class="string">&#x27;/student/login&#x27;</span>,</span><br><span class="line">     <span class="attr">method</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">     <span class="attr">data</span>:&#123;</span><br><span class="line">       username,password</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">success</span>:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">       <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">1</span>)&#123;</span><br><span class="line">         <span class="comment">//存储token </span></span><br><span class="line">         wx.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">           <span class="attr">data</span>: res.<span class="property">data</span>.<span class="property">token</span>,</span><br><span class="line">           <span class="attr">key</span>: <span class="string">&#x27;token&#x27;</span>,</span><br><span class="line">         &#125;)</span><br><span class="line">         <span class="comment">// 在app.json 注册 tabBar的时候 如果包含要跳转的路径 只能使用wx.switchTab</span></span><br><span class="line">         wx.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">           <span class="attr">url</span>: <span class="string">&#x27;/pages/question/question&#x27;</span>,</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">           <span class="attr">icon</span>:<span class="string">&quot;none&quot;</span>,</span><br><span class="line">           <span class="attr">title</span>: <span class="string">&#x27;登录失败&#x27;</span>,</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>



<ul>
<li>第三步 : 在前端每次请求的时候都携带上token</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">      <span class="attr">header</span>:&#123;</span><br><span class="line">        <span class="attr">token</span>:wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>) <span class="comment">// 去网吧 掏出身份证</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">url</span>: app.<span class="property">globalData</span>.<span class="property">BASE_URL</span>+<span class="string">&#x27;/question/list?course=&#x27;</span>+options.<span class="property">courseName</span>,</span><br><span class="line">      <span class="attr">success</span>:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">questionList</span>:res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>第四步: 验证token</li>
</ul>
<p>express中间件 : 每次请求之前都会先走中间件的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">//不论什么请求 都要校验 token 是否合法</span></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">headers</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;token&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">//校验token</span></span><br><span class="line">    jwt.<span class="title function_">verify</span>(req.<span class="property">headers</span>.<span class="property">token</span>, <span class="string">&#x27;bingyu&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, decoded</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123; <span class="comment">// 有错误信息 校验失败</span></span><br><span class="line">        <span class="comment">// token 不对</span></span><br><span class="line">        <span class="comment">// token过期了</span></span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">          <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">          <span class="attr">error</span>: <span class="string">&quot;token失效&quot;</span></span><br><span class="line">        &#125;);<span class="comment">//无效</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>();<span class="comment">//有效</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/student/login&#x27;</span>) &#123;<span class="comment">//没有得到token </span></span><br><span class="line">      <span class="title function_">next</span>(); <span class="comment">//白名单  不需要校验的地方</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">next</span>();<span class="comment">//通过了</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">学生登录--&gt;登录成功--&gt;获取token--&gt;存起来--&gt;每次请求携带着--&gt;后端校验--&gt;校验成功--&gt;返回200</span><br><span class="line">后端校验--&gt;校验失败--&gt;返回401</span><br><span class="line">学生登录--&gt;登录失败--&gt;返回400</span><br><span class="line">后台管理登录--&gt;登录成功</span><br><span class="line">后台管理登录--&gt;登录失败</span><br></pre></td></tr></table></figure>



<h2 id="完整的校验-包含白名单"><a href="#完整的校验-包含白名单" class="headerlink" title="完整的校验(包含白名单)"></a>完整的校验(包含白名单)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> whitePath = [<span class="string">&#x27;/users/login&#x27;</span>, <span class="string">&#x27;/student/login&#x27;</span>, <span class="string">&#x27;/common/upload&#x27;</span>];</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> token = req.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);</span><br><span class="line">  <span class="keyword">let</span> index = whitePath.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span> =&gt;</span> item === req.<span class="property">url</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//图片的白名单</span></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">url</span>.<span class="title function_">includes</span>(<span class="string">&#x27;/photos&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (token === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">      <span class="attr">error</span>: <span class="string">&quot;No authorization token was found&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    jwt.<span class="title function_">verify</span>(req.<span class="property">headers</span>.<span class="property">token</span>, <span class="string">&#x27;bingyu&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, decoded</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123; <span class="comment">// 有错误信息 校验失败</span></span><br><span class="line">        <span class="comment">// token 不对</span></span><br><span class="line">        <span class="comment">// token过期了</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">          <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">          <span class="attr">error</span>: <span class="string">&quot;token expired&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">next</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="每次请求的时候携带token"><a href="#每次请求的时候携带token" class="headerlink" title="每次请求的时候携带token"></a>每次请求的时候携带token</h2><ul>
<li><p>结合<code>async</code> <code>await</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">submitForm</span>(<span class="params">formName</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="keyword">async</span> (valid) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="comment">//验证通过</span></span><br><span class="line">      <span class="comment">//跳转页面 实现登录</span></span><br><span class="line">      <span class="comment">// 登录成功获取token</span></span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">login</span>(&#123;<span class="attr">username</span>: <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">name</span>, <span class="attr">password</span>: <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">pass</span>&#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, res.<span class="property">token</span>);</span><br><span class="line">      <span class="comment">//this.$router.push(&#x27;/main&#x27;); 返回的是promise</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/main&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error submit!!&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="每次请求都携带token"><a href="#每次请求都携带token" class="headerlink" title="每次请求都携带token"></a>每次请求都携带token</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">  config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>异步</title>
    <url>/liuqi_blogs/2021/08/22/%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><h2 id="1-promise"><a href="#1-promise" class="headerlink" title="1. promise"></a>1. promise</h2><p>Promise 是es6中出现的新的api :</p>
<p>目的:  通过链式调用解决异步的问题</p>
<p>传统解决异步的方案 : 通过回调的方式解决异步的问题</p>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleP</span>(<span class="params">c1,c2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="built_in">parseInt</span>(<span class="string">&quot;fdsajkfjds&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(i)) &#123;</span><br><span class="line">    <span class="title function_">c2</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">c1</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">handleP</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述方案就会造成著名的回调地狱</p>
<p>promise 方案</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);<span class="comment">//同步</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i = <span class="built_in">parseInt</span>(<span class="string">&quot;fdsaf&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(i)) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;转换出错了&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功&#x27;</span>)).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败的回调&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="2-浏览器执行原理"><a href="#2-浏览器执行原理" class="headerlink" title="2. 浏览器执行原理"></a>2. 浏览器执行原理</h2><p><img src="image/image-20200718104917684.png" alt="image-20200718104917684"></p>
<h2 id="3-面试常客-打印顺序"><a href="#3-面试常客-打印顺序" class="headerlink" title="3. 面试常客 打印顺序"></a>3. 面试常客 打印顺序</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  resolve() 在同步的环境中执行的微任务</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(); <span class="comment">// 异步的环境中执行的微任务</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 施 1234</span></span><br><span class="line"><span class="comment">// 张 1234</span></span><br><span class="line"><span class="comment">// 胡 1324</span></span><br><span class="line"><span class="comment">// 王 1234</span></span><br><span class="line"><span class="comment">// 张傲 1423</span></span><br><span class="line"><span class="comment">// 胡鹏飞 1324</span></span><br><span class="line"><span class="comment">// 郝 1324</span></span><br><span class="line"><span class="comment">//1 3 5 4 2 6</span></span><br></pre></td></tr></table></figure>

<h2 id="4-async-await"><a href="#4-async-await" class="headerlink" title="4. async / await"></a>4. async / await</h2><ul>
<li><p>async await 是成对出现的</p>
</li>
<li><p>为什么出现  为了完全的解决异步的问题 出现的</p>
</li>
<li><p>什么时候出现的  es7</p>
</li>
<li><p>怎么用呢 结合promise使用</p>
</li>
<li><p>async 放在方法的前面  await 跟着promise 直接通过同步的方式能得到resolve(43242) 的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以同步的方式得到解决的</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3就不执行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myData</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>按需加载</title>
    <url>/liuqi_blogs/2021/01/19/%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h1><ul>
<li>路由按需加载<ul>
<li>并没有减小体积 在加载这个组件的时候 才会被加载</li>
</ul>
</li>
<li>常用的框架也按需加载<ul>
<li>需要框架支持 </li>
<li>没有用到的 不会引进来  </li>
<li>element-ui  el-button </li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="element-ui-按需加载的步骤"><a href="#element-ui-按需加载的步骤" class="headerlink" title="element-ui 按需加载的步骤"></a>element-ui 按需加载的步骤</h2><ol>
<li><p>下载一个包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i babel-plugin-componen -D</span><br></pre></td></tr></table></figure></li>
<li><p>配置 <code>.babelrc</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;env&quot;</span>, &#123;</span><br><span class="line">      <span class="string">&quot;modules&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;targets&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;browsers&quot;</span>: [<span class="string">&quot;&gt; 1%&quot;</span>, <span class="string">&quot;last 2 versions&quot;</span>, <span class="string">&quot;not ie &lt;= 8&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&quot;stage-2&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [<span class="string">&quot;transform-vue-jsx&quot;</span>, <span class="string">&quot;transform-runtime&quot;</span>,</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;component&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;libraryName&quot;</span>: <span class="string">&quot;element-ui&quot;</span>,</span><br><span class="line">        <span class="string">&quot;styleLibraryName&quot;</span>: <span class="string">&quot;theme-chalk&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>新建一个文件夹 <code>plugins</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按需引入 vue里面的element-ui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Pagination</span>,</span><br><span class="line">  <span class="title class_">Dialog</span>,</span><br><span class="line">  <span class="title class_">Autocomplete</span>,</span><br><span class="line">  <span class="title class_">Dropdown</span>,</span><br><span class="line">  <span class="title class_">DropdownMenu</span>,</span><br><span class="line">  <span class="title class_">DropdownItem</span>,</span><br><span class="line">  <span class="title class_">Menu</span>,</span><br><span class="line">  <span class="title class_">Submenu</span>,</span><br><span class="line">  <span class="title class_">MenuItem</span>,</span><br><span class="line">  <span class="title class_">MenuItemGroup</span>,</span><br><span class="line">  <span class="title class_">Input</span>,</span><br><span class="line">  <span class="title class_">InputNumber</span>,</span><br><span class="line">  <span class="title class_">Radio</span>,</span><br><span class="line">  <span class="title class_">RadioGroup</span>,</span><br><span class="line">  <span class="title class_">RadioButton</span>,</span><br><span class="line">  <span class="title class_">Checkbox</span>,</span><br><span class="line">  <span class="title class_">CheckboxButton</span>,</span><br><span class="line">  <span class="title class_">CheckboxGroup</span>,</span><br><span class="line">  <span class="title class_">Switch</span>,</span><br><span class="line">  <span class="title class_">Select</span>,</span><br><span class="line">  <span class="title class_">Option</span>,</span><br><span class="line">  <span class="title class_">OptionGroup</span>,</span><br><span class="line">  <span class="title class_">Button</span>,</span><br><span class="line">  <span class="title class_">ButtonGroup</span>,</span><br><span class="line">  <span class="title class_">Table</span>,</span><br><span class="line">  <span class="title class_">TableColumn</span>,</span><br><span class="line">  <span class="title class_">DatePicker</span>,</span><br><span class="line">  <span class="title class_">TimeSelect</span>,</span><br><span class="line">  <span class="title class_">TimePicker</span>,</span><br><span class="line">  <span class="title class_">Popover</span>,</span><br><span class="line">  <span class="title class_">Tooltip</span>,</span><br><span class="line">  <span class="title class_">Breadcrumb</span>,</span><br><span class="line">  <span class="title class_">BreadcrumbItem</span>,</span><br><span class="line">  <span class="title class_">Form</span>,</span><br><span class="line">  <span class="title class_">FormItem</span>,</span><br><span class="line">  <span class="title class_">Tabs</span>,</span><br><span class="line">  <span class="title class_">TabPane</span>,</span><br><span class="line">  <span class="title class_">Tag</span>,</span><br><span class="line">  <span class="title class_">Tree</span>,</span><br><span class="line">  <span class="title class_">Alert</span>,</span><br><span class="line">  <span class="title class_">Slider</span>,</span><br><span class="line">  <span class="title class_">Icon</span>,</span><br><span class="line">  <span class="title class_">Row</span>,</span><br><span class="line">  <span class="title class_">Col</span>,</span><br><span class="line">  <span class="title class_">Upload</span>,</span><br><span class="line">  <span class="title class_">Progress</span>,</span><br><span class="line">  <span class="title class_">Spinner</span>,</span><br><span class="line">  <span class="title class_">Badge</span>,</span><br><span class="line">  <span class="title class_">Card</span>,</span><br><span class="line">  <span class="title class_">Rate</span>,</span><br><span class="line">  <span class="title class_">Steps</span>,</span><br><span class="line">  <span class="title class_">Step</span>,</span><br><span class="line">  <span class="title class_">Carousel</span>,</span><br><span class="line">  <span class="title class_">CarouselItem</span>,</span><br><span class="line">  <span class="title class_">Collapse</span>,</span><br><span class="line">  <span class="title class_">CollapseItem</span>,</span><br><span class="line">  <span class="title class_">Cascader</span>,</span><br><span class="line">  <span class="title class_">ColorPicker</span>,</span><br><span class="line">  <span class="title class_">Transfer</span>,</span><br><span class="line">  <span class="title class_">Container</span>,</span><br><span class="line">  <span class="title class_">Header</span>,</span><br><span class="line">  <span class="title class_">Aside</span>,</span><br><span class="line">  <span class="title class_">Main</span>,</span><br><span class="line">  <span class="title class_">Footer</span>,</span><br><span class="line">  <span class="title class_">Timeline</span>,</span><br><span class="line">  <span class="title class_">TimelineItem</span>,</span><br><span class="line">  <span class="title class_">Link</span>,</span><br><span class="line">  <span class="title class_">Divider</span>,</span><br><span class="line">  <span class="title class_">Image</span>,</span><br><span class="line">  <span class="title class_">Calendar</span>,</span><br><span class="line">  <span class="title class_">Backtop</span>,</span><br><span class="line">  <span class="title class_">PageHeader</span>,</span><br><span class="line">  <span class="title class_">CascaderPanel</span>,</span><br><span class="line">  <span class="title class_">Loading</span>,</span><br><span class="line">  <span class="title class_">MessageBox</span>,</span><br><span class="line">  <span class="title class_">Message</span>,</span><br><span class="line">  <span class="title class_">Notification</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Pagination</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Dialog</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Autocomplete</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Dropdown</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">DropdownMenu</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">DropdownItem</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Menu</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Submenu</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">MenuItem</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">MenuItemGroup</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Input</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">InputNumber</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Radio</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">RadioGroup</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">RadioButton</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Checkbox</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">CheckboxButton</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">CheckboxGroup</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Switch</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Select</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Option</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">OptionGroup</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Button</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ButtonGroup</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Table</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">TableColumn</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">DatePicker</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">TimeSelect</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">TimePicker</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Popover</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Tooltip</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Breadcrumb</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">BreadcrumbItem</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Form</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">FormItem</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Tabs</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">TabPane</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Tag</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Tree</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Alert</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Slider</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Icon</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Row</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Col</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Upload</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Progress</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Spinner</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Badge</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Card</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Rate</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Steps</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Step</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Carousel</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">CarouselItem</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Collapse</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">CollapseItem</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Cascader</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ColorPicker</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Transfer</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Container</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Header</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Aside</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Main</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Footer</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Timeline</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">TimelineItem</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Link</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Divider</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Image</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Calendar</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Backtop</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">PageHeader</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">CascaderPanel</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Loading</span>.<span class="property">directive</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$loading</span> = <span class="title class_">Loading</span>.<span class="property">service</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$msgbox</span> = <span class="title class_">MessageBox</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$alert</span> = <span class="title class_">MessageBox</span>.<span class="property">alert</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$confirm</span> = <span class="title class_">MessageBox</span>.<span class="property">confirm</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$prompt</span> = <span class="title class_">MessageBox</span>.<span class="property">prompt</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$notify</span> = <span class="title class_">Notification</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$message</span> = <span class="title class_">Message</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>在main.js中引入 <code>plugin/index.js</code></p>
<p>删除以前全部引入的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// //UI</span></span><br><span class="line"><span class="comment">// import ElementUI from &#x27;element-ui&#x27;;</span></span><br><span class="line"><span class="comment">// //样式</span></span><br><span class="line"><span class="comment">// import &#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="comment">// Vue.use(ElementUI);//每个页面都可以使用Element-UI</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./plugins/index&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>每日分享补充</title>
    <url>/liuqi_blogs/2021/04/25/%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<h1 id="每日分享补充"><a href="#每日分享补充" class="headerlink" title="每日分享补充"></a>每日分享补充</h1><h2 id="1-node的问题"><a href="#1-node的问题" class="headerlink" title="1. node的问题"></a>1. node的问题</h2><ul>
<li><p>你们公司用过node没</p>
</li>
<li><p>缺点 : 处理大量数据方便 不如别的语言</p>
</li>
<li><p>你们公司哪些地方用了node</p>
<ul>
<li>应用场景 异步 : 量多数据少 JSON </li>
<li>中间层 服务器 java/python   node—&gt;axios—&gt;java   </li>
<li>编写cli脚本 vue init webpack 脚手架<span id="more"></span>
<h2 id="2-SEO"><a href="#2-SEO" class="headerlink" title="2. SEO"></a>2. SEO</h2></li>
</ul>
</li>
<li><p>公司中谁来做</p>
<ul>
<li>网络营销</li>
</ul>
</li>
<li><p>怎么做</p>
</li>
<li><p>需不需要前端做</p>
<ul>
<li>ssr : 服务端渲染</li>
<li>门户网站 (官网)</li>
</ul>
</li>
<li><p>前端在这个领域做什么</p>
<ul>
<li>vue : nuxt  </li>
<li>react: next</li>
</ul>
</li>
<li><p>哪些网站不需要做</p>
<ul>
<li>后台管理 vue / react</li>
</ul>
</li>
</ul>
<h2 id="3-promise-async-await"><a href="#3-promise-async-await" class="headerlink" title="3. promise  async  await"></a>3. promise  async  await</h2><h2 id="4-MVVM-amp-amp-MVC"><a href="#4-MVVM-amp-amp-MVC" class="headerlink" title="4. MVVM&amp;&amp;MVC"></a>4. MVVM&amp;&amp;MVC</h2><p>MVC: java </p>
<p>M: Model 数据</p>
<p>C : Controller 控制</p>
<p>V : View  视图</p>
<p>React : MVC</p>
<p>M : 底层 state/ props</p>
<p>C : 虚拟dom diff</p>
<p>V : 视图层 render</p>
<p>Vue : MVVM </p>
<p>M: 数据层 ajax / mock</p>
<p>VM : new Vue({data:{key:数据}, methods:{}})</p>
<p>V : View</p>
<p>MVP : 移动端开发 android 面向切面编程 AOP</p>
]]></content>
      <categories>
        <category>react.js</category>
      </categories>
      <tags>
        <tag>react.js</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端事件</title>
    <url>/liuqi_blogs/2021/07/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="移动端事件"><a href="#移动端事件" class="headerlink" title="移动端事件"></a>移动端事件</h1><p>在前端的移动Web开发中，有一部分事件只在移动端产生，如触摸相关的事件。接下来给大家简单总结一下移动端的事件。</p>
<h2 id="1-PC端事件在移动端的兼容问题"><a href="#1-PC端事件在移动端的兼容问题" class="headerlink" title="1. PC端事件在移动端的兼容问题"></a>1. PC端事件在移动端的兼容问题</h2><h3 id="1-1-click事件的200-300ms延迟问题"><a href="#1-1-click事件的200-300ms延迟问题" class="headerlink" title="1.1 click事件的200~300ms延迟问题"></a>1.1 click事件的200~300ms延迟问题</h3><p>由于移动端默认的布局视口宽度是980像素，所以网页文字非常小，为了快速让网页还原到原来的大小，Safari最新引入了双击缩放功能：用户双击手机页面的时候，浏览器会智能的缩放当前页面到原始大小。</p>
<span id="more"></span>

<blockquote>
<p>双击缩放的原理就是，当用户click一次之后，浏览器会经过约300ms之后检测是否再有一次click，如果有的话，就会缩放页面。否则的话就是一个click事件。</p>
</blockquote>
<p>由于双击缩放功能存在，click事件触发就会有大约200~300ms的延迟。</p>
<h3 id="1-2-dblclick事件失效"><a href="#1-2-dblclick事件失效" class="headerlink" title="1.2 dblclick事件失效"></a>1.2 dblclick事件失效</h3><p>由于双击缩放的存在，pc端的dblclick事件也失效了。</p>
<h2 id="2-移动端特有的touch事件"><a href="#2-移动端特有的touch事件" class="headerlink" title="2. 移动端特有的touch事件"></a>2. 移动端特有的touch事件</h2><p>由于移动端设备大都具备触摸功能，所以移动端浏览器都引入了触摸(touch)事件。</p>
<p>touch相关的事件跟普通的其他dom事件一样使用，可以直接用addEventListener来监听和处理。</p>
<p>最基本的touch事件包括4个事件：</p>
<ol>
<li>touchstart： 当在屏幕上按下手指时触发</li>
<li>touchmove： 当在屏幕上移动手指时触发</li>
<li>touchend： 当在屏幕上抬起手指时触发</li>
<li>touchcancel 当一些更高级别的事件发生的时候（如电话接入或者弹出信息）会取消当前的touch操作，即触发touchcancel。一般会在touchcancel时暂停游戏、存档等操作。</li>
</ol>
<h3 id="2-1-touch事件与click事件同时触发"><a href="#2-1-touch事件与click事件同时触发" class="headerlink" title="2.1 touch事件与click事件同时触发"></a>2.1 touch事件与click事件同时触发</h3><p>在很多情况下，触摸事件和鼠标事件会同时被触发（目的是让没有对触摸设备优化的代码仍然可以在触摸设备上正常工作）。</p>
<p>因为双击缩放检测的存在，在移动设备屏幕上点击操作的事件执行顺序：</p>
<p><strong>touchstart(瞬间触发)  →  touchend → click(200-300ms延迟)</strong></p>
<blockquote>
<p>如果你使用了触摸事件，可以调用 event.preventDefault()来阻止鼠标事件被触发。</p>
</blockquote>
<h3 id="2-2-touchstart事件"><a href="#2-2-touchstart事件" class="headerlink" title="2.2 touchstart事件"></a>2.2 touchstart事件</h3><p> 当用户手指触摸到的触摸屏的时候触发。事件对象的 target 就是touch 发生位置的那个元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    点击我！</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;touchstart&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-touchmove事件"><a href="#2-3-touchmove事件" class="headerlink" title="2.3 touchmove事件"></a>2.3 touchmove事件</h3><p>当用户在触摸屏上移动触点(手指)的时候，触发这个事件。一定是先要触发touchstart事件，再有可能触发 touchmove 事件。</p>
<p>touchmove 事件的target 与最先触发的 touchstart 的 target 保持一致。touchmove事件和鼠标的mousemove事件一样都会多次重复调用，所以，事件处理时不能有太多耗时操作。不同的设备，移动同样的距离 touchmove 事件的触发频率是不同的。</p>
<blockquote>
<p>注意：</p>
<ol>
<li>即使手指移出了 原来的target 元素，则 touchmove 仍然会被一直触发，而且 target 仍然是原来的 target 元素。</li>
<li>touchmove事件会多次重复触发，由于移动端计算资源宝贵，尽量保证<a href="https://link.jianshu.com/?t=https://www.2cto.com/kf/201411/352213.html">事件节流</a></li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> i = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchmove&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        p.<span class="property">innerHTML</span> = e.<span class="property">target</span>.<span class="property">tagName</span> + <span class="string">&quot;, &quot;</span> + i++;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/4393631-fc8152e419ebd000.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/572/format/webp" alt="img"></p>
<h3 id="2-4-touchend事件"><a href="#2-4-touchend事件" class="headerlink" title="2.4 touchend事件"></a>2.4 touchend事件</h3><p> 当用户的手指抬起的时候，会触发 touchend 事件。如何用户的手指从触屏设备的边缘移出了触屏设备，也会触发 touchend 事件。</p>
<blockquote>
<p>touchend 事件的 target 也是与 touchstart 的 target 一致，即使已经移出了元素。</p>
</blockquote>
<img src="image/image-20200706000225103.png" alt="image-20200706000225103" style="zoom:50%;" />

<p>一次完整的touch事件的触发顺序和过程</p>
<h3 id="2-5-touchcancel事件"><a href="#2-5-touchcancel事件" class="headerlink" title="2.5 touchcancel事件"></a>2.5 touchcancel事件</h3><p> 当触点由于某些原因被中断时触发。有几种可能的原因如下(具体的原因根据不同的设备和浏览器有所不同):</p>
<ul>
<li>由于某个事件取消了触摸：例如触摸过程被一个模态的弹出框打断。</li>
<li>触点离开了文档窗口，而进入了浏览器的界面元素、插件或者其他外部内容区域。</li>
<li>当用户产生的触点个数超过了设备支持的个数，从而导致 TouchList 中最早的 Touch对象被取消</li>
</ul>
<blockquote>
<p>touchcancel 事件一般用于保存现场数据。比如：正在玩游戏，如果发生了 。touchcancel 事件，则应该把游戏当前状态相关的一些数据保存起来。</p>
</blockquote>
<h2 id="3-触摸事件对象"><a href="#3-触摸事件对象" class="headerlink" title="3. 触摸事件对象"></a>3. 触摸事件对象</h2><p><code>TouchEvent</code> 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等。</p>
<p>每 个 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Touch"><code>Touch</code></a> 对象代表一个触点; 每个触点都由其位置，大小，形状，压力大小，和目标 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Element"><code>element</code></a> 描述。 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchList"><code>TouchList</code></a> 对象代表多个触点的一个列表.</p>
<h3 id="3-1-TouchEvent"><a href="#3-1-TouchEvent" class="headerlink" title="3.1 TouchEvent"></a>3.1 TouchEvent</h3><p><em><a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent"><code>TouchEvent</code></a>的属性继承了 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/UIEvent"><code>UIEvent</code></a> 和 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Event"><code>Event</code></a>。</em></p>
<p>属性列表：</p>
<ol>
<li><a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/changedTouches"><code>TouchEvent.changedTouches</code></a>： 一个 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchList"><code>TouchList</code></a> 对象，包含了代表所有从上一次触摸事件到此次事件过程中，状态发生了改变的触点的 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Touch"><code>Touch</code></a> 对象。</li>
<li><a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/targetTouches"><code>TouchEvent.targetTouches</code></a>： 一个 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchList"><code>TouchList</code></a> 对象，是包含了如下触点的 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Touch"><code>Touch</code></a> 对象：触摸起始于当前事件的目标 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Element"><code>element</code></a> 上，并且仍然没有离开触摸平面的触点。</li>
<li><a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/touches"><code>TouchEvent.touches</code></a>： 一 个 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchList"><code>TouchList</code></a> 对象，包含了所有当前接触触摸平面的触点的 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Touch"><code>Touch</code></a> 对象，无论它们的起始于哪个 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Element"><code>element</code></a> 上，也无论它们状态是否发生了变化。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">   <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">     <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">     <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">     <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#09c</span>;</span></span><br><span class="line"><span class="language-css">     <span class="attribute">background-color</span>: <span class="number">#0dc</span>;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">     box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">dir</span>(e); <span class="comment">// 查看TouchEvent对象的属性和方法</span></span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="image/image-20200706000435872.png" alt="image-20200706000435872" style="zoom:50%;" />

<h3 id="3-2-TouchList详解"><a href="#3-2-TouchList详解" class="headerlink" title="3.2 TouchList详解"></a>3.2 TouchList详解</h3><p> 一个<code>TouchList</code>代表一个触摸屏幕上所有触点的列表。</p>
<p> 举例来讲, 如果一个用户用三根手指接触屏幕(或者触控板), 与之相关的<code>TouchList</code> 对于每根手指都会生成一个 <code>Touch</code>对象, 共计 3 个.</p>
<ol>
<li><p>只读属性：<code>length</code></p>
<p>返回这个<code>TouchList</code>中<code>Touch</code>对的个数。(就是有几个手指接触到了屏幕)</p>
</li>
<li><p>方法：<code>item(index)</code></p>
<p>返回<code>TouchList</code>中指定索引的<code>Touch</code>对象。</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 50px; color: #ffffff;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchend&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        p.<span class="property">innerHTML</span> = e.<span class="property">changedTouches</span>.<span class="property">length</span>;  <span class="comment">//返回Touch对象的个数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; e.<span class="property">changedTouches</span>.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//遍历出来每个Touch对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">changedTouches</span>.<span class="title function_">item</span>(i));</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="image/image-20200706000458421.png" alt="image-20200706000458421"></p>
<p><strong>测试多个手机触摸屏幕：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    div.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> msg = <span class="string">&quot;touches.length: &quot;</span> + e.<span class="property">touches</span>.<span class="property">length</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;br&gt; targetTouches.length: &quot;</span> + e.<span class="property">targetTouches</span>.<span class="property">length</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;br&gt; changedTouches.length: &quot;</span> + e.<span class="property">changedTouches</span>.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">        p.<span class="property">innerHTML</span> = msg;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>操作：</p>
<ol>
<li><p>放1个手指在div上</p>
<img src="image/image-20200706000520690.png" alt="image-20200706000520690" style="zoom:50%;" /> </li>
<li><p>先放1个手指在其他地方，然后再放1个手指在<code>div</code>上</p>
<img src="image/image-20200706000552162.png" alt="image-20200706000552162" style="zoom:50%;" /> </li>
<li><p>先放1个手指在其他地方，然后再逐渐放2个手指在div上</p>
<img src="image/image-20200706000611403.png" alt="image-20200706000611403" style="zoom:50%;" /> </li>
</ol>
<h2 id="3-3-Touch详解"><a href="#3-3-Touch详解" class="headerlink" title="3.3 Touch详解"></a>3.3 Touch详解</h2><p> <code>Touch</code>表示用户和触摸设备之间接触时单独的交互点(<code>a single point of contact</code>)。 这个交互点通常是一个手指或者触摸笔， 触摸设备通常是触摸屏或者触摸板。</p>
<p>基本属性列表（都是只读）:</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>属性名</th>
<th>属性说明</th>
</tr>
</thead>
<tbody><tr>
<td>1.</td>
<td><code>identifier</code></td>
<td>表示每 1 个 <code>Touch</code> 对象 的独一无二的 <code>identifier</code>。有了这个 <code>identifier</code> 可以确保你总能追踪到这个 <code>Touch</code>对象。</td>
</tr>
<tr>
<td>2.</td>
<td><code>screenX</code></td>
<td>触摸点相对于屏幕左边缘的 <code>x</code> 坐标。</td>
</tr>
<tr>
<td>3.</td>
<td><code>scre</code>enY</td>
<td>触摸点相对于屏幕上边缘的 <code>y</code> 坐标。</td>
</tr>
<tr>
<td>4.</td>
<td><code>clientX</code></td>
<td>触摸点相对于浏览器的 <code>viewport</code>左边缘的 <code>x</code> 坐标。不会包括左边的滚动距离。</td>
</tr>
<tr>
<td>5.</td>
<td><code>clientY</code></td>
<td>触摸点相对于浏览器的 <code>viewport</code>上边缘的 <code>y</code> 坐标。不会包括上边的滚动距离。</td>
</tr>
<tr>
<td>6.</td>
<td><code>pageX</code></td>
<td>触摸点相对于 <code>document</code>的左边缘的 <code>x</code> 坐标。 与 <code>clientX</code> 不同的是，他包括左边滚动的距离，如果有的话。</td>
</tr>
<tr>
<td>7.</td>
<td><code>pageY</code></td>
<td>触摸点相对于 <code>document</code>的左边缘的 <code>y</code> 坐标。 与 <code>clientY</code> 不同的是，他包括上边滚动的距离，如果有的话。</td>
</tr>
<tr>
<td>8.</td>
<td><code>target</code></td>
<td>总是表示 手指最开始放在触摸设备上的触发点所在位置的 <code>element</code>。 即使已经移出了元素甚至移出了<code>document</code>, 他表示的<code>element</code>仍然不变</td>
</tr>
</tbody></table>
<p>案例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">box.<span class="property">ontouchstart</span> = <span class="keyword">function</span> (<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> touchList = e.<span class="property">changedTouches</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; touchList.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> touch = touchList[i];</span><br><span class="line">        <span class="keyword">var</span> msg = <span class="string">`id : <span class="subst">$&#123;touch.identifier&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                       screenX : <span class="subst">$&#123;touch.screenX&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                       screenY : <span class="subst">$&#123;touch.screenY&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                       clientX : <span class="subst">$&#123;touch.clientX&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                       clientY : <span class="subst">$&#123;touch.clientY&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                       pageX : <span class="subst">$&#123;touch.pageX&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                       pageY : <span class="subst">$&#123;touch.pageY&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                       target: <span class="subst">$&#123;touch.target.nodeName&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                        `</span>;</span><br><span class="line">        p.<span class="property">innerHTML</span> = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有左右滚动：</p>
<img src="image/image-20200706000631489.png" alt="image-20200706000631489" style="zoom:50%;" /> 

<p>左右滚动：<code>pageX</code> 明显大于 <code>clientX</code></p>
<img src="image/image-20200706000649920.png" alt="image-20200706000649920" style="zoom:50%;" /> 

<h2 id="4-封装移动端tap事件"><a href="#4-封装移动端tap事件" class="headerlink" title="4. 封装移动端tap事件"></a>4. 封装移动端tap事件</h2><p>由于点击事件经常使用，如果用click会有延迟问题，一般我们会用touch事件模拟移动端的点击事件, 以下是封装的几个事件，仅供参考。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="variable language_">window</span></span>)&#123;  <span class="comment">//传入window，提高变量的查找效率</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">myQuery</span>(<span class="params">selector</span>)&#123;  <span class="comment">//这个函数就是对外提供的接口。</span></span><br><span class="line">        <span class="comment">//调用这个函数的原型对象上的_init方法，并返回</span></span><br><span class="line">        <span class="keyword">return</span> myQuery.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">_init</span>(selector);</span><br><span class="line">    &#125;</span><br><span class="line">    myQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">        <span class="comment">/*初始化方法，获取当前query对象的方法*/</span></span><br><span class="line">        <span class="attr">_init</span>: <span class="keyword">function</span> (<span class="params">selector</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;string&quot;</span>)&#123;</span><br><span class="line">                <span class="comment">//把查找到的元素存入到这个原型对象上。</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">ele</span> = <span class="variable language_">window</span>.<span class="property">document</span>.<span class="title function_">querySelector</span>(selector);</span><br><span class="line">                <span class="comment">//返回值其实就是原型对象。</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/*单击事件：</span></span><br><span class="line"><span class="comment">         * 为了规避click的300ms的延迟，自定义一个单击事件</span></span><br><span class="line"><span class="comment">         * 触发时间：</span></span><br><span class="line"><span class="comment">         *   当抬起手指的时候触发</span></span><br><span class="line"><span class="comment">         *   需要判断手指落下和手指抬起的事件间隔，如果小于500ms表示单击时间。</span></span><br><span class="line"><span class="comment">         *   如果是大于等于500ms，算是长按时间</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="attr">tap</span>: <span class="keyword">function</span> (<span class="params">handler</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ele</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, touchFn);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ele</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchend&quot;</span>, touchFn);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> startTime,</span><br><span class="line">                endTime;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">touchFn</span>(<span class="params">e</span>)&#123;</span><br><span class="line">                e.<span class="title function_">preventDefault</span>()</span><br><span class="line">                <span class="keyword">switch</span> (e.<span class="property">type</span>)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;touchstart&quot;</span>:</span><br><span class="line">                        startTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;touchend&quot;</span>:</span><br><span class="line">                        endTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">                        <span class="keyword">if</span> (endTime - startTime &lt; <span class="number">500</span>)&#123;</span><br><span class="line">                            handler.<span class="title function_">call</span>(<span class="variable language_">this</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 长按</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> <span class="variable">handler</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="attr">longTag</span>: <span class="keyword">function</span> (<span class="params">handler</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ele</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, touchFn);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ele</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchmove&quot;</span>, touchFn);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ele</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchend&quot;</span>, touchFn);</span><br><span class="line">            <span class="keyword">var</span> timerId;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">touchFn</span>(<span class="params">e</span>)&#123;</span><br><span class="line">                <span class="keyword">switch</span> (e.<span class="property">type</span>)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;touchstart&quot;</span> :  <span class="comment">//500ms之后执行</span></span><br><span class="line">                        timerId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">                            handler.<span class="title function_">call</span>(<span class="variable language_">this</span>, e);</span><br><span class="line">                        &#125;, <span class="number">500</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;touchmove&quot;</span> :</span><br><span class="line">                        <span class="comment">//如果中间有移动也清除定时器</span></span><br><span class="line">                        <span class="built_in">clearTimeout</span>(timerId)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;touchend&quot;</span> :</span><br><span class="line">                        <span class="comment">//如果在500ms之内抬起了手指，则需要定时器</span></span><br><span class="line">                        <span class="built_in">clearTimeout</span>(timerId);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 左侧滑动。</span></span><br><span class="line"><span class="comment">         * 记录手指按下的左边，在离开的时候计算 deltaX是否满足左滑的条件         </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="attr">slideLeft</span>: <span class="keyword">function</span> (<span class="params">handler</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ele</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, touchFn);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ele</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchend&quot;</span>, touchFn);</span><br><span class="line">            <span class="keyword">var</span> startX, startY, endX, endY;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">touchFn</span>(<span class="params">e</span>)&#123;</span><br><span class="line">                e.<span class="title function_">preventDefault</span>();</span><br><span class="line">                <span class="keyword">var</span> firstTouch = e.<span class="property">changedTouches</span>[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">switch</span> (e.<span class="property">type</span>)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;touchstart&quot;</span>:</span><br><span class="line">                        startX = firstTouch.<span class="property">pageX</span>;</span><br><span class="line">                        startY = firstTouch.<span class="property">pageY</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;touchend&quot;</span>:</span><br><span class="line">                        endX = firstTouch.<span class="property">pageX</span>;</span><br><span class="line">                        endY = firstTouch.<span class="property">pageY</span>;</span><br><span class="line">                        <span class="comment">//x方向移动大于y方向的移动，并且x方向的移动大于25个像素，表示在向左侧滑动</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(endX - startX) &gt;= <span class="title class_">Math</span>.<span class="title function_">abs</span>(endY - startY) &amp;&amp; startX - endX &gt;= <span class="number">25</span>)&#123;</span><br><span class="line">                            handler.<span class="title function_">call</span>(<span class="variable language_">this</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/* 右侧滑动 */</span></span><br><span class="line">        <span class="attr">rightLeft</span>: <span class="keyword">function</span> (<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">$</span> = <span class="variable language_">window</span>.<span class="property">myQuery</span> = myQuery;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================</span></span><br><span class="line"><span class="comment">// 使用：</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">tap</span>(<span class="keyword">function</span> (<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;单击事件&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">longTag</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;长按事件&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideLeft</span>(<span class="keyword">function</span> (<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">&quot;左侧滑动了.....&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="5-触摸手势封装相关的框架及事件"><a href="#5-触摸手势封装相关的框架及事件" class="headerlink" title="5. 触摸手势封装相关的框架及事件"></a>5. 触摸手势封装相关的框架及事件</h2><p>手势相关的事件一般就是tap类（触屏）和滑动（swipe)事件两类。都是基于原生的touchstart、touchmove、touchend事件，封装成不同的手势类型自定义事件。</p>
<h3 id="5-1-tap类事件"><a href="#5-1-tap类事件" class="headerlink" title="5.1 tap类事件"></a>5.1 tap类事件</h3><p>触碰事件，我目前还不知道它和touch的区别，一般用于代替click事件，有tap longTap singleTap doubleTap四种之分。</p>
<ol>
<li>tap: 手指碰一下屏幕会触发</li>
<li>longTap: 手指长按屏幕会触发</li>
<li>singleTap: 手指碰一下屏幕会触发</li>
<li>doubleTap: 手指双击屏幕会触发</li>
</ol>
<h3 id="5-2-swipe类事件"><a href="#5-2-swipe类事件" class="headerlink" title="5.2 swipe类事件"></a>5.2 swipe类事件</h3><p>滑动事件，有swipe swipeLeft swipeRight swipeUp swipeDown 五种之分。</p>
<ol>
<li>swipe：手指在屏幕上滑动时会触发</li>
<li>swipeLeft：手指在屏幕上向左滑动时会触发</li>
<li>swipeRight：手指在屏幕上向右滑动时会触发</li>
<li>swipeUp：手指在屏幕上向上滑动时会触发</li>
<li>swipeDown：手指在屏幕上向下滑动时会触发</li>
</ol>
<img src="image/image-20200706000711531.png" alt="image-20200706000711531" style="zoom:50%;" /> 

<h3 id="5-3-zepto的手势相关事件"><a href="#5-3-zepto的手势相关事件" class="headerlink" title="5.3 zepto的手势相关事件"></a>5.3 zepto的手势相关事件</h3><p><a href="https://link.jianshu.com/?t=http://www.zeptojs.cn/">Zepto.js</a> 是一个轻量级的针对现代高级浏览器的JavaScript库， 它适配了jQuery的大部分api，也就是jQuery怎么用，Zepto.js就怎么用。它非常小，非常适合移动端。</p>
<p>Zepto.js的touch模块中封装了手势相关的代码。封装了再触摸设备上触发tap– 和 swipe– 相关事件，也适用于所有的<code>touch</code>(iOS, Android)和<code>pointer</code>事件(Windows Phone)。</p>
<ul>
<li>触屏事件：tap、singleTap、doubleTap、longTap(&gt;750ms）</li>
<li>滑动事件：swipe、swipeLeft,、swipeRight,、swipeUp,、swipeDown</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.delete</span> &#123; <span class="attribute">display</span>: none; &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">items</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>List item 1 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">delete</span>&gt;</span>DELETE<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>List item 2 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">delete</span>&gt;</span>DELETE<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#items li&#x27;</span>).<span class="title function_">swipe</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&#x27;.delete&#x27;</span>).<span class="title function_">hide</span>()</span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&#x27;.delete&#x27;</span>, <span class="variable language_">this</span>).<span class="title function_">show</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;.delete&#x27;</span>).<span class="title function_">tap</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  $(<span class="variable language_">this</span>).<span class="title function_">parent</span>(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">remove</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-4-其他移动端手势相关库"><a href="#5-4-其他移动端手势相关库" class="headerlink" title="5.4 其他移动端手势相关库"></a>5.4 其他移动端手势相关库</h3><ol>
<li><a href="https://link.jianshu.com/?t=https://github.com/Clouda-team/touchjs">百度云的touch.js</a></li>
<li><a href="https://link.jianshu.com/?t=https://github.com/hammerjs/hammer.js">hammer.js</a><br> hammer提供了不仅仅tap、swipe等事件，还提供了：pan（平移)、pinch类（捏拿缩放）、 press类（按住）、 rotate类（旋转）类手势支持， <a href="https://link.jianshu.com/?t=http://www.cnblogs.com/imwtr/p/5884484.html">hammer.js详解教程</a></li>
</ol>
<h2 id="6-移动端点击穿透问题"><a href="#6-移动端点击穿透问题" class="headerlink" title="6. 移动端点击穿透问题"></a>6. 移动端点击穿透问题</h2><p>如果某个返回按钮的位置，恰好在要返回的这个页面的带有href属性的a标签的范围内，在点击返回按钮后，页面快速切换到有a标签的页面，300ms后触发了click事件，从而触发了a标签的意外跳转，这个就是典型的点击穿透问题。罪魁祸首其实就是a标签跳转默认是click事件触发，而移动端的touch事件触发之后，依然会在300ms后触发click事件。</p>
<p>解决办法：<br> 1.就是阻止触发touch事件完成后的click事件。<br> 2.不要混用touch和click事件。显然不可能都绑定click事件，因为要解决300ms延迟问题(除了fastclick)，那么只能都绑定touch事件，这样click事件永远不会被触发。</p>
<blockquote>
<p>注意：zepto并没有阻止click事件，所以使用zepto的tap事件依然会导致点击穿透问题，你需要手动添加 e.preventDefault() 来阻止click事件。</p>
</blockquote>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端开发</title>
    <url>/liuqi_blogs/2021/08/17/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<h1 id="移动端开发"><a href="#移动端开发" class="headerlink" title="移动端开发"></a>移动端开发</h1><h2 id="1-移动端适配"><a href="#1-移动端适配" class="headerlink" title="1. 移动端适配"></a>1. 移动端适配</h2><p>###1.1 视口</p>
<ul>
<li>布局视口(写页面)  980px</li>
<li>视觉视口(用户可以看到的) 375px</li>
</ul>
<blockquote>
<p>为了用户体验 我们需要让视觉视口和布局视口相等</p>
</blockquote>
<span id="more"></span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-像素"><a href="#1-2-像素" class="headerlink" title="1.2 像素"></a>1.2 像素</h3><h3 id="1-3-方案"><a href="#1-3-方案" class="headerlink" title="1.3 方案"></a>1.3 方案</h3><h4 id="1-3-1-百分比"><a href="#1-3-1-百分比" class="headerlink" title="1.3.1 百分比"></a>1.3.1 百分比</h4><img src="image/image-20200706005612379.png" alt="image-20200706005612379" style="zoom:50%;" /> 

<h4 id="1-3-2-rem"><a href="#1-3-2-rem" class="headerlink" title="1.3.2 rem"></a>1.3.2 rem</h4><h4 id="1-3-3总结"><a href="#1-3-3总结" class="headerlink" title="1.3.3总结"></a>1.3.3总结</h4><p>**1. **在 head 设置 width=device-width 的 viewport</p>
<p><strong>2.</strong> 在 css 中使用 px</p>
<p>**3. ** 在适当的场景使用 flex 布局，或者配合 vw 进行自适应</p>
<p>**4. ** 在跨设备类型的时候（pc &lt;-&gt; 手机 &lt;-&gt; 平板）使用媒体查询</p>
<p><strong>5.</strong>  在跨设备类型如果交互差异太大的情况，考虑分开项目开发</p>
<h2 id="2-真机调试"><a href="#2-真机调试" class="headerlink" title="2. 真机调试"></a>2. 真机调试</h2><h3 id="2-1-代理地址"><a href="#2-1-代理地址" class="headerlink" title="2.1 代理地址"></a>2.1 代理地址</h3><h3 id="2-2-查看控制台错误"><a href="#2-2-查看控制台错误" class="headerlink" title="2.2 查看控制台错误"></a>2.2 查看控制台错误</h3>]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端适配问题</title>
    <url>/liuqi_blogs/2021/08/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="移动端适配面试相关"><a href="#移动端适配面试相关" class="headerlink" title="移动端适配面试相关"></a>移动端适配面试相关</h2><p>手机市场日渐丰富的同时，给我们前端开发人员带来的 “网页内容自适应屏幕尺寸进行显示的问题” 也日渐凸显出来，接下来我们就要细说移动端适配的前世今生及方案。</p>
<h2 id="一、为什么要移动端适配？"><a href="#一、为什么要移动端适配？" class="headerlink" title="一、为什么要移动端适配？"></a>一、为什么要移动端适配？</h2><span id="more"></span>
<blockquote>
<p>一般情况下设计稿的设计师按照 375 的尺寸设计，然而，在现在移动终端（就是手机）快速更新的时代，每个品牌的手机都有着不同的物理分辨率，这样就会导致，每台设备的逻辑分辨率也不尽相同，此时 375 的设计稿，如果想要还原那基本是不可能了，因为如果一个左右布局，左边如果写死，右边自适应的话，每个设备的右边所展示的内容大小就不尽相同，这时移动端适配就显得尤其重要。</p>
</blockquote>
<p>既然要了解前世今生，我们就从几个概念说起，先上一张图。</p>
<img src="image/image-20200706003620977.png" alt="image-20200706003620977" style="zoom:50%;" /> 

<p>下面我们一个个解析</p>
<h3 id="1-1-屏幕尺寸"><a href="#1-1-屏幕尺寸" class="headerlink" title="1.1 屏幕尺寸"></a>1.1 屏幕尺寸</h3><blockquote>
<p>屏幕尺寸是以屏幕对角线的长度来计量，计量单位为英寸。</p>
</blockquote>
<p>如图所示两个对角线的长度就是这个屏幕的尺寸</p>
<img src="image/image-20200706003644416.png" alt="image-20200706003644416" style="zoom:50%;" /> 

<h3 id="1-2-像素"><a href="#1-2-像素" class="headerlink" title="1.2 像素"></a>1.2 像素</h3><p>我们看到上图 320x480 叫分辨率，而这个所谓的分辨率说白了就是横向320个像素纵向480个像素组成 </p>
<p>1.2.1 什么叫像素呢？</p>
<blockquote>
<p>像素（Pel, pixel, pictureelement），为组成一幅图像的全部亮度和色度的最小图像单元。电视的图像是由按一定间隔排列的亮度不同的像点构成的，形成像点的单位也就是像素，组成图像的最小单位就是像素。从计算机技术的角度来解释，像素是硬件和软件所能控制的最小单位。它指显示屏的画面上表示出来的最小单位，不是图画上的最小单位。一幅图像通常包含成千上万个像素，每个像素都有自己的颜色信息，它们紧密地组合在一起。由于人眼的错觉，这些组合在一起的像素被当成一幅完整的图像。当修改图像的某区域，实际上是在修改该区域内的像素。对这些像素修改的好与坏将决定最终图片的质量。单位面积内的像素越多，图像的效果就越好。彩色电视图像是由成千个像素点所组成的，而且每个像素都是由红绿蓝三种颜色并排组成的。(<strong>注意每个像素的大小是不固定的，他是根据设备的分辨率决定的，知识点，后面要考</strong>)</p>
</blockquote>
<h4 id="1-2-2-什么叫分辨率呢"><a href="#1-2-2-什么叫分辨率呢" class="headerlink" title="1.2.2 什么叫分辨率呢?"></a>1.2.2 什么叫分辨率呢?</h4><blockquote>
<p>屏幕分辨率是指纵横向上的像素点数，单位是 px。屏幕分辨率确定计算机屏幕上显示多少信息的设置，以水平和垂直像素来衡量。就相同大小的屏幕而言，当屏幕分辨率低时（例如 640 x 480），在屏幕上显示的像素少，单个像素尺寸比较大。屏幕分辨率高时（例如 1600 x 1200），在屏幕上显示的像素多，单个像素尺寸比较小。</p>
</blockquote>
<p>知道什么叫做分辨率后，有人就会奇怪，我记得苹果的苹果官网上的苹果 6 的分辨率为 750x1334 啊，但是设计稿上苹果 6 的分辨率为 375x667 啊，而且各个设备的分辨率都比实际分辨率小很多，这就牵扯到一些历史原因了</p>
<h4 id="1-2-3-设备物理分辨率（设备像素）"><a href="#1-2-3-设备物理分辨率（设备像素）" class="headerlink" title="1.2.3 设备物理分辨率（设备像素）"></a>1.2.3 设备物理分辨率（设备像素）</h4><p>相信我们所有前端开发者，都是见证了手机这个移动设备发展的过程。从蓝屏手机，到彩屏手机，到诺基亚研发出来触屏手机，再到智能手机一步步发展下来，我们的我们的手越来越清晰，越来越大，所以我们的屏幕发展也越来越迅速。</p>
<img src="image/image-20200706003704379.png" alt="image-20200706003704379" style="zoom:50%;" /> 

<p>上图可以清楚的看到，不同分辨率所带来的的差距</p>
<p>从最初的颗粒感相当大的屏幕，到 720p 再到 1080p，甚至于现在各家旗舰手机的 2k 屏幕，我们的物理分辨率在变得原来越大。这样就暴露出来一个问题，我们如果手机分辨率翻倍，我们的图像不就要被缩小一倍，我们难道要在每个设备上就出个设计稿，每个设备的分辨不尽相同啊，其实你担忧的问题，我们的乔帮主在很多年前就想到了。这就是我们的逻辑分辨率</p>
<h4 id="1-2-4-逻辑分辨率（设备独立像素）"><a href="#1-2-4-逻辑分辨率（设备独立像素）" class="headerlink" title="1.2.4 逻辑分辨率（设备独立像素）"></a>1.2.4 逻辑分辨率（设备独立像素）</h4><p>如下图所示，虽然设备物理分辨不同，但是他的这个逻辑分辨率却都差不多，这就要感谢乔帮主了。</p>
<img src="image/image-20200706003720231.png" alt="image-20200706003720231" style="zoom:50%;" /> 

<p>乔布斯在 iPhone4 的发布会上首次提出了 Retina Display(视网膜屏幕)的概念，在 iPhone4 使用的视网膜屏幕中，把 2x2 个像素当 1 个像素使用，这样让屏幕看起来更精致，但是元素的大小却不会改变。从此以后高分辨率的设备，多了一个逻辑像素。这些设备逻辑像素的差别虽然不会跨度很大，但是仍然有点差别，于是便诞生了移动端页面需要适配这个问题，既然逻辑像素由物理像素得来，那他们就会有一个像素比值。</p>
<h4 id="1-2-5-设备像素比"><a href="#1-2-5-设备像素比" class="headerlink" title="1.2.5 设备像素比"></a>1.2.5 设备像素比</h4><p>设备像素比 device pixel ratio 简称 dpr，即物理像素和设备独立像素的比值。为什么要知道设备像素比呢？因为这个像素比会产生一个非常经典的问题，1 像素边框的问题。</p>
<ol>
<li>1px 边框问题</li>
</ol>
<blockquote>
<p>当我们 css 里写的 1px 的时候，由于它是逻辑像素，导致我们的逻辑像素根据这个设备像素比（dpr）去映射到设备上就为 2px，或者 3px，由于每个设备的屏幕尺寸不一样，就导致每个物理像素渲染出来的大小也不同（记得上面的知识点吗，设备的像素大小是不固定的），这样如果在尺寸比较大的设备上，1px 渲染出来的样子相当的粗矿，这就是经典的一像素边框问题。</p>
</blockquote>
<ol>
<li>如何解决</li>
</ol>
<p>核心思路，就是<strong>在 web 中，浏览器为我们提供了 window.devicePixelRatio 来帮助我们获取 dpr。在 css 中，可以使用媒体查询 min-device-pixel-ratio，区分 dpr：</strong>我们根据这个像素比，来算出他对应应该有的大小，但是暴露个非常大的兼容问题。</p>
<img src="image/image-20200706003741055.png" alt="image-20200706003741055" style="zoom:50%;" /> 

<blockquote>
<p>其中 Chrome 把 0.5px 四舍五入变成了 1px，而 firefox/safari 能够画出半个像素的边，并且 Chrome 会把小于 0.5px 的当成 0，而 Firefox 会把不小于 0.55px 当成 1px，Safari 是把不小于 0.75px 当成 1px，进一步在手机上观察 iOS 的 Chrome 会画出 0.5px 的边，而安卓(5.0)原生浏览器是不行的。所以直接设置 0.5px 不同浏览器的差异比较大，并且我们看到不同系统的不同浏览器对小数点的 px 有不同的处理。<strong>所以如果我们把单位设置成小数的 px 包括宽高等，其实不太可靠，因为不同浏览器表现不一样</strong>。</p>
</blockquote>
<p>至于其他解决一像素边框问题网上有一堆答案，在这里我推荐一种非常好用，并且没有副作用的解决方案。</p>
<p><strong>transform: scale(0.5) 方案</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    height:1px;</span><br><span class="line">    background:#000;</span><br><span class="line">    -webkit-transform: scaleY(0.5);</span><br><span class="line">    -webkit-transform-origin:00;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>css 根据设备像素比媒体查询后的解决方案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 2倍屏 */</span><br><span class="line">@media only screen and (-webkit-min-device-pixel-ratio: 2.0) &#123;</span><br><span class="line">    .border-bottom::after &#123;</span><br><span class="line">        -webkit-transform: scaleY(0.5);</span><br><span class="line">        transform: scaleY(0.5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/* 3倍屏 */</span><br><span class="line">@media only screen and (-webkit-min-device-pixel-ratio: 3.0) &#123;</span><br><span class="line">    .border-bottom::after &#123;</span><br><span class="line">        -webkit-transform: scaleY(0.33);</span><br><span class="line">        transform: scaleY(0.33);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如此，完美的解决一像素看着粗的问题。</p>
<blockquote>
<p><strong>扩展补充</strong></p>
<p>CSS 最新的规范中正在计划通过标准的属性实现一像素边框，通过给<code>border-width</code>属性添加<code>hairline</code>关键字属性来实现，具体如下<strong>链接</strong>[1]。之所以叫hairline，是因为一像素边框就跟头发丝一样。</p>
<p>练习使用方案时，也要多多关注最新发展哟。</p>
</blockquote>
<h2 id="二、如何适配"><a href="#二、如何适配" class="headerlink" title="二、如何适配"></a>二、如何适配</h2><h3 id="2-1-viewport"><a href="#2-1-viewport" class="headerlink" title="2.1 viewport"></a>2.1 viewport</h3><blockquote>
<p>视口(viewport)代表当前可见的计算机图形区域。在 Web 浏览器术语中，通常与浏览器窗口相同，但不包括浏览器的 UI， 菜单栏等——即指你正在浏览的文档的那一部分。</p>
</blockquote>
<p>那么在移动端如何配置视口呢？简单的一个 meta 标签即可！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width; initial-scale=1; maximum-scale=1; minimum-scale=1; user-scalable=no;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>他们分别什么含义呢？</p>
<img src="image/image-20200706003800381.png" alt="image-20200706003800381" style="zoom:50%;" /> 

<p>我们在移动端视口要想视觉效果和体验好，那么我们的视口宽度必须无限接近理想视口。</p>
<p><strong>理想视口：一般来讲，这个视口其实不是真是存在的，它对设备来说是一个最理想布局视口尺寸，在用户不进行手动缩放的情况下，可以将页面理想地展示。那么所谓的理想宽度就是浏览器（屏幕）的宽度了。</strong></p>
<p>于是上述的 meta 设置，就是我们的理想设置，他规定了我们的视口宽度为屏幕宽度，初始缩放比例为 1，就是初始时候我们的视觉视口就是理想视口！</p>
<p><strong>其中 user-scalable 设置为 no 可以解决移动端点击事件延迟问题</strong>（拓展）</p>
<h3 id="2-2-适配方法"><a href="#2-2-适配方法" class="headerlink" title="2.2 适配方法"></a>2.2 适配方法</h3><h4 id="2-2-1-rem-适配"><a href="#2-2-1-rem-适配" class="headerlink" title="2.2.1 rem 适配"></a>2.2.1 rem 适配</h4><blockquote>
<p>rem 是 CSS3 新增的一个相对单位，这个单位引起了广泛关注。这个单位与 em 有什么区别呢？区别在于使用 rem 为元素设定字体大小时，仍然是相对大小，但相对的只是 HTML 根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了 IE8 及更早版本外，所有浏览器均已支持 rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用 rem 设定的字体大小。</p>
</blockquote>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设我给根元素的大小设置为14px</span></span><br><span class="line">html&#123;</span><br><span class="line">    font-size：14px</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//那么我底下的p标签如果想要也是14像素</span></span><br><span class="line">p&#123;</span><br><span class="line">    font-<span class="attr">size</span>:1rem</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如此即可</span></span><br></pre></td></tr></table></figure>

<p>rem 的布局，不得不提 flexible，flexible 方案是阿里早期开源的一个移动端适配解决方案，引用 flexible 后，我们在页面上统一使用 rem 来布局。</p>
<p>他的原理非常简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// set 1rem = viewWidth / 10</span><br><span class="line">function setRemUnit () &#123;</span><br><span class="line">    var rem = docEl.clientWidth / 10</span><br><span class="line">    docEl.style.fontSize = rem + &#x27;px&#x27;</span><br><span class="line">&#125;</span><br><span class="line">setRemUnit();</span><br></pre></td></tr></table></figure>

<p>rem 是相对于 html 节点的 font-size 来做计算的。所以在页面初始话的时候给根元素设置一个 <code>font-size</code>，接下来的元素就根据 rem 来布局，这样就可以保证在页面大小变化时，布局可以自适应。</p>
<p>如此我们只需要给设计稿的 px 转换成对应的 rem 单位即可。</p>
<p>当然，这个方案只是个过渡方案，为什么说是过渡方案</p>
<p>因为当年 viewport 在低版本安卓设备上还有兼容问题，而 vw，vh 还没能实现所有浏览器兼容，所以 flexible 方案用 rem 来模拟 vmin 来实现在不同设备等比缩放的“过度”方案，之所以说是过度方案，是因为这个他这个根据设备大小去判断页面的方案是根据屏幕大小去百分百还原设计稿，从而让人看到的大小效果是一样的，但是 苹果 5 和苹果 6p 虽然看到的设计稿还原是一样的，但是他在一个合适距离上看到的效果能一样吗，本质上，<strong>用户使用更大的屏幕，是想看到更多的内容，而不是更大的字。</strong></p>
<p>so，这个用缩放来解决问题的方案是个过渡方案，注定被时代所淘汰。</p>
<h4 id="2-2-2-vw，vh-布局"><a href="#2-2-2-vw，vh-布局" class="headerlink" title="2.2.2 vw，vh 布局"></a>2.2.2 vw，vh 布局</h4><blockquote>
<p>vh、vw 方案即将视觉视口宽度 window.innerWidth 和视觉视口高度 window.innerHeight 等分为 100 份。</p>
</blockquote>
<img src="image/image-20200706003826294.png" alt="image-20200706003826294" style="zoom:50%;" /> 

<img src="image/image-20200706003847281.png" alt="image-20200706003847281" style="zoom:50%;" /> 

<p>vh 和 vw 方案和 rem 类似也是相当麻烦需要做单位转化，而且 px 转换成 vw 不一定能完全整除，因此有一定的像素差。</p>
<p>不过在工程化的今天，webpack 解析 css 的时候用 postcss-loader 有个 postcss-px-to-viewport 能自动实现 px 到 vw 的转化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    loader: &#x27;postcss-loader&#x27;,</span><br><span class="line">    options: &#123;</span><br><span class="line">    	plugins: ()=&gt;[</span><br><span class="line">        	require(&#x27;autoprefixer&#x27;)(&#123;</span><br><span class="line">        		browsers: [&#x27;last 5 versions&#x27;]</span><br><span class="line">        	&#125;),</span><br><span class="line">        	require(&#x27;postcss-px-to-viewport&#x27;)(&#123;</span><br><span class="line">        		viewportWidth: 375, //视口宽度（数字)</span><br><span class="line">        		viewportHeight: 1334, //视口高度（数字）</span><br><span class="line">        		unitPrecision: 3, //设置的保留小数位数（数字）</span><br><span class="line">        		viewportUnit: &#x27;vw&#x27;, //设置要转换的单位（字符串）</span><br><span class="line">        		selectorBlackList: [&#x27;.ignore&#x27;, &#x27;.hairlines&#x27;], //不需要进行转换的类名（数组）</span><br><span class="line">                minPixelValue: 1, //设置要替换的最小像素值（数字）</span><br><span class="line">                mediaQuery: false//允许在媒体查询中转换px（true/false）</span><br><span class="line">        	&#125;)</span><br><span class="line">    	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-px-为主，vx-和-vxxx（vw-vh-vmax-vmin）为辅，搭配一些-flex（推荐）"><a href="#2-2-3-px-为主，vx-和-vxxx（vw-vh-vmax-vmin）为辅，搭配一些-flex（推荐）" class="headerlink" title="2.2.3 px 为主，vx 和 vxxx（vw/vh/vmax/vmin）为辅，搭配一些 flex（推荐）"></a>2.2.3 px 为主，vx 和 vxxx（vw/vh/vmax/vmin）为辅，搭配一些 flex（推荐）</h4><p>之所以推荐使用此种方案，是由于我们要去考虑用户的需求，<strong>用户之所以去买大屏手机，不是为了看到更大的字，而是为了看到更多的内容</strong>，这样直接使用 px 是最明智的方案，使用 vw，rem 等布局手段无可厚非，但是，flex 这种弹性布局大行其道的今天，如果如果还用这种传统的思维去想问题显然是有两个原因（个人认为 px 是最好的，可能有大佬，能用 vw，或者 rem 写出精妙的布局，也说不准）。</p>
<ol>
<li><strong>为了偷懒，不愿意去做每个手机的适配</strong></li>
<li><strong>不愿意去学习新的布局方式，让 flex 等先进的布局和你擦肩而过</strong></li>
</ol>
<h3 id="2-3-移动端适配流程"><a href="#2-3-移动端适配流程" class="headerlink" title="2.3 移动端适配流程"></a>2.3 移动端适配流程</h3><p><strong>1. 在 head 设置 width=device-width 的 viewport</strong></p>
<p><strong>2. 在 css 中使用 px结合百分比</strong></p>
<p><strong>3. 在适当的场景使用 flex 布局，或者配合 vw 进行自适应</strong></p>
<p><strong>4. 在跨设备类型的时候（pc &lt;-&gt; 手机 &lt;-&gt; 平板）使用媒体查询</strong></p>
<p><strong>5. 在跨设备类型如果交互差异太大的情况，考虑分开项目开发</strong></p>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>项目实战——振涛考试系统</title>
    <url>/liuqi_blogs/2021/06/11/%E7%AC%AC%E4%B8%80%E5%91%A8-%E6%8C%AF%E6%B6%9B%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE-vue/</url>
    <content><![CDATA[<h1 id="振涛考试系统"><a href="#振涛考试系统" class="headerlink" title="振涛考试系统"></a>振涛考试系统</h1><h2 id="1-项目基础封装"><a href="#1-项目基础封装" class="headerlink" title="1. 项目基础封装"></a>1. 项目基础封装</h2><h3 id="1-1-请求的封装"><a href="#1-1-请求的封装" class="headerlink" title="1.1 请求的封装"></a>1.1 请求的封装</h3><span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span>);</span><br><span class="line"><span class="comment">//基础的配置</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="comment">//如果是开发环境+ /api  生产环境就不加  production</span></span><br><span class="line">  <span class="comment">//上线是不需要跨域的  因为同源 </span></span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;/api&#x27;</span> : <span class="string">&#x27;&#x27;</span><span class="comment">// 每次请求的时候都会在前面拼接一个/api</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求的拦截</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">  config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应的拦截</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">&#125;,<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">//400</span></span><br><span class="line">  <span class="comment">//500</span></span><br><span class="line">  <span class="comment">//404</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-仓库的封装"><a href="#1-2-仓库的封装" class="headerlink" title="1.2 仓库的封装"></a>1.2 仓库的封装</h3><h4 id="1-2-1-下载包"><a href="#1-2-1-下载包" class="headerlink" title="1.2.1 下载包"></a>1.2.1 下载包</h4><p><code>npm install vuex</code></p>
<h4 id="1-2-2-配置"><a href="#1-2-2-配置" class="headerlink" title="1.2.2 配置"></a>1.2.2 配置</h4><ul>
<li><p>新建store文件夹 index.js </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Store</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小三&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></li>
<li><p>入口文件引入 main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在vue组件中使用elementUI需要使用 Vue.use()</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);<span class="comment">//每个页面都可以使用Element-UI</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">App</span> &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>页面可以使用</p>
</li>
</ul>
<h3 id="1-3-路由的封装"><a href="#1-3-路由的封装" class="headerlink" title="1.3 路由的封装"></a>1.3 路由的封装</h3><h4 id="1-3-1-下载vue-router"><a href="#1-3-1-下载vue-router" class="headerlink" title="1.3.1 下载vue-router"></a>1.3.1 下载vue-router</h4><p><code>npm i vue-router -S</code></p>
<h4 id="1-3-2-新建文件"><a href="#1-3-2-新建文件" class="headerlink" title="1.3.2 新建文件"></a>1.3.2 新建文件</h4><p><code>router/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./router-config&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>####1.3.3  配置路由表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mainRouter = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/Login&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/main&#x27;</span>),</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  ...mainRouter,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h4 id="1-3-4显示路由"><a href="#1-3-4显示路由" class="headerlink" title="1.3.4显示路由"></a>1.3.4显示路由</h4><p> <code>router-view</code></p>
<h3 id="1-4-导航的封装"><a href="#1-4-导航的封装" class="headerlink" title="1.4 导航的封装"></a>1.4 导航的封装</h3><h4 id="1-4-1-筛选路由"><a href="#1-4-1-筛选路由" class="headerlink" title="1.4.1 筛选路由"></a>1.4.1 筛选路由</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getNavData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> routes = mainChildRouters.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="string">&#x27;meta&#x27;</span> <span class="keyword">in</span> item));</span><br><span class="line">  routes = routes.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="string">&#x27;title&#x27;</span> <span class="keyword">in</span> item.<span class="property">meta</span>));</span><br><span class="line">  <span class="comment">//哪些是一级菜单 item.meta 有 group</span></span><br><span class="line">  <span class="keyword">let</span> subMenus = routes.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="string">&#x27;group&#x27;</span> <span class="keyword">in</span> item.<span class="property">meta</span>));</span><br><span class="line">  <span class="comment">//哪些是二级菜单</span></span><br><span class="line">  <span class="keyword">let</span> itemMenus = routes.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="string">&#x27;item&#x27;</span> <span class="keyword">in</span> item.<span class="property">meta</span>));</span><br><span class="line">  <span class="comment">/*遍历二级菜单 对号入座 添加到对应一级菜单下*/</span></span><br><span class="line">  itemMenus.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sub = subMenus.<span class="title function_">find</span>(<span class="function"><span class="params">val</span> =&gt;</span> val.<span class="property">meta</span>.<span class="property">group</span> === item.<span class="property">meta</span>.<span class="property">item</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(sub.<span class="property">child</span>)) &#123;</span><br><span class="line">      sub.<span class="property">child</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line">    sub.<span class="property">child</span>.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> subMenus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-2-页面"><a href="#1-4-2-页面" class="headerlink" title="1.4.2 页面"></a>1.4.2 页面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class="line">  &lt;el-row class=&quot;tac&quot;&gt;</span><br><span class="line">    &lt;el-col&gt;</span><br><span class="line">      &lt;el-menu</span><br><span class="line">        router</span><br><span class="line">        :default-active=&quot;$route.matched[0].path+&#x27;/home&#x27;&quot;</span><br><span class="line">        class=&quot;el-menu-vertical-demo&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;div v-for=&quot;(item,index) in navData&quot; &gt;</span><br><span class="line">          &lt;el-submenu v-if=&quot;&#x27;child&#x27; in item&quot; :index=&quot;$route.matched[0].path+&#x27;/&#x27;+item.path&quot;&gt;</span><br><span class="line">            &lt;template slot=&quot;title&quot;&gt;</span><br><span class="line">              &lt;i :class=&quot;item.meta.icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">              &lt;span&gt;&#123;&#123;item.meta.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item v-for=&quot;(child,ind) in item.child&quot; :key=&quot;ind&quot;</span><br><span class="line">                          :index=&quot;$route.matched[0].path+&#x27;/&#x27;+child.path&quot;&gt;</span><br><span class="line">              &lt;i :class=&quot;child.meta.icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">              &lt;span slot=&quot;title&quot;&gt;&#123;&#123;child.meta.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">          &lt;el-menu-item v-else :key=&quot;index&quot;</span><br><span class="line">                        :index=&quot;$route.matched[0].path+&#x27;/&#x27;+item.path&quot;&gt;</span><br><span class="line">            &lt;i :class=&quot;item.meta.icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot=&quot;title&quot;&gt;&#123;&#123;item.meta.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;/el-menu-item&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-menu&gt;</span><br><span class="line">    &lt;/el-col&gt;</span><br><span class="line">  &lt;/el-row&gt;</span><br><span class="line">&lt;/el-aside&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-后台接口的封装"><a href="#1-5-后台接口的封装" class="headerlink" title="1.5 后台接口的封装"></a>1.5 后台接口的封装</h3><h4 id="1-5-1-服务"><a href="#1-5-1-服务" class="headerlink" title="1.5.1 服务"></a>1.5.1 服务</h4><ul>
<li><p>自动重启 </p>
<ul>
<li><p>package.json中配置 node-dev</p>
<img src="image/image-20200630103657710.png" alt="image-20200630103657710" style="zoom:50%;" /> </li>
</ul>
</li>
<li><p>支持es6语法</p>
<ul>
<li><p>下载的包 <code>@babel/register</code>  <code>@babel/core</code>  <code>@babel/plugin-transform-modules-commonjs</code></p>
</li>
<li><p>entry.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;@babel/register&#x27;</span>)(&#123;</span><br><span class="line">  <span class="attr">plugins</span>:[</span><br><span class="line">    <span class="string">&#x27;@babel/plugin-transform-modules-commonjs&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./bin/www&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>文件的改动</p>
<img src="image/image-20200630103822377.png" alt="image-20200630103822377" style="zoom:50%;" />  



<p>导出</p>
<img src="image/image-20200630103900372.png" alt="image-20200630103900372" style="zoom:50%;" /> </li>
</ul>
</li>
</ul>
<h4 id="1-5-2-接口"><a href="#1-5-2-接口" class="headerlink" title="1.5.2 接口"></a>1.5.2 接口</h4><ul>
<li><p>接口文档  <a href="https://www.showdoc.cc/">https://www.showdoc.cc/</a></p>
</li>
<li><p>路由的规范</p>
</li>
<li><p>路径的规范 utils &gt; pathUtils</p>
</li>
<li><p>操作数组完成增删改查</p>
<ul>
<li>查找 <ul>
<li>遍历 foreach  map  filter</li>
<li>find/findIndex</li>
</ul>
</li>
<li>删除<ul>
<li>splite</li>
</ul>
</li>
<li>增<ul>
<li>push</li>
</ul>
</li>
<li>改<ul>
<li>数组[index] = 值</li>
</ul>
</li>
</ul>
</li>
<li><p>状态码</p>
<ul>
<li>400 : 请求不符合要求 要求的字段必须填写 但是没有填写</li>
<li>404 : 服务器没有这个资源</li>
<li>401 : 未授权 (没有登录就不能跳转到某一页)</li>
<li>422 : 参数类型出错</li>
<li>500 : 服务器内部出错</li>
</ul>
</li>
<li><p>请求方式</p>
<ul>
<li>get  : 获取数据</li>
<li>post : 提交数据/保密性的数据</li>
</ul>
</li>
</ul>
<h2 id="2-项目上线"><a href="#2-项目上线" class="headerlink" title="2. 项目上线"></a>2. 项目上线</h2><h3 id="2-1-打包"><a href="#2-1-打包" class="headerlink" title="2.1 打包"></a>2.1 打包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<h3 id="2-2-复制到服务器"><a href="#2-2-复制到服务器" class="headerlink" title="2.2 复制到服务器"></a>2.2 复制到服务器</h3><img src="image/image-20200630081321530.png" alt="image-20200630081321530" style="zoom:50%;" /> 

<img src="image/image-20200630081349389.png" alt="image-20200630081349389" style="zoom:50%;" /> 

<h2 id="3-代理设置–解决跨域问题"><a href="#3-代理设置–解决跨域问题" class="headerlink" title="3. 代理设置–解决跨域问题"></a>3. 代理设置–解决跨域问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">proxyTable</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span>,  <span class="comment">//是否跨域</span></span><br><span class="line">    <span class="attr">pathRewrite</span>: &#123;<span class="comment">//请求服务器  在服务器中不需要加 /api</span></span><br><span class="line">      <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span>   <span class="comment">//需要rewrite的,</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="3-功能点"><a href="#3-功能点" class="headerlink" title="3. 功能点"></a>3. 功能点</h2><p>完善题目管理</p>
<p>分页</p>
<p>列表 删除 编辑</p>
<p>课程管理</p>
<p>学生管理</p>
<p>教师管理</p>
<h2 id="5-知识点"><a href="#5-知识点" class="headerlink" title="5. 知识点"></a>5. 知识点</h2><h3 id="5-1-项目的要求"><a href="#5-1-项目的要求" class="headerlink" title="5.1 项目的要求"></a>5.1 项目的要求</h3><ul>
<li>框架搭建完成</li>
<li>题目的部分</li>
<li>课程管理</li>
<li>教师管理</li>
<li>学生管理</li>
</ul>
<h3 id="5-2-分页组件的封装"><a href="#5-2-分页组件的封装" class="headerlink" title="5.2 分页组件的封装"></a>5.2 分页组件的封装</h3><ul>
<li><p>element-ui  分页组件没有结合table</p>
</li>
<li><p>需要自己封装</p>
</li>
<li><p>步骤</p>
<ul>
<li><p>后台 接收 页数:page 每页多少个:count data/question.json</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> total = questionJson.<span class="property">length</span>;</span><br><span class="line">    </span><br><span class="line">questionJson = questionJson.<span class="title function_">slice</span>(count * (page - <span class="number">1</span>), count * page);</span><br><span class="line">    </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(questionJson);</span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">  total,<span class="comment">// 分页组件的时候会用到</span></span><br><span class="line">  <span class="attr">data</span>: questionJson</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>前端</p>
<p>请求的时候添加 count:每页多少条  page:页数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getQuestion</span>(&#123;...<span class="variable language_">this</span>.<span class="property">listQuery</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//&#123;msg,code,data&#125;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tableData</span> = res.<span class="property">data</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">total</span> = res.<span class="property">total</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>数据中添加<code>listQuery</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">listQuery</span>: &#123;</span><br><span class="line">      <span class="attr">page</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="attr">count</span>:<span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">total</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>使用分页组件  </p>
<blockquote>
<p>注意  子组件中的props中的数据要和父组件数据双向绑定  此时要用到 .sync 修饰符</p>
</blockquote>
<blockquote>
<p>每次点击页码的时候 改变的是父组件中的值</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pagination</span><br><span class="line">  @pagination=&quot;requestQuestionData&quot;</span><br><span class="line">  :total=&quot;total&quot;</span><br><span class="line">  :page.sync=&quot;listQuery.page&quot;</span><br><span class="line">  :limit.sync=&quot;listQuery.count&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/pagination&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="5-3-模糊查找"><a href="#5-3-模糊查找" class="headerlink" title="5.3 模糊查找"></a>5.3 模糊查找</h3><ul>
<li><p>后台  接收相应的参数 title  course</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;count, page, title, course&#125; = req.<span class="property">query</span>;</span><br><span class="line">count = count || <span class="number">3</span>;</span><br><span class="line">page = page || <span class="number">1</span>;</span><br><span class="line">title = title || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">course = course || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> questionJson = fs.<span class="title function_">readFileSync</span>(questionDataPath, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="comment">//转换成数组</span></span><br><span class="line">questionJson = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(questionJson);</span><br><span class="line"><span class="keyword">let</span> total = questionJson.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*模糊搜索*/</span></span><br><span class="line"><span class="comment">//搜索题目title</span></span><br><span class="line">questionJson = questionJson.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">title</span>.<span class="title function_">includes</span>(title));</span><br><span class="line"><span class="comment">//搜索所属课程</span></span><br><span class="line"><span class="keyword">if</span> (course) &#123;</span><br><span class="line">  questionJson = questionJson.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">course</span> === course);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>前端  对应的参数传递过去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-form :inline=&quot;true&quot; :model=&quot;searchForm&quot; class=&quot;demo-form-inline&quot;&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;标题&quot;&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;searchForm.title&quot; placeholder=&quot;题目&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;所属课程&quot;&gt;</span><br><span class="line">    &lt;el-select v-model=&quot;searchForm.course&quot; placeholder=&quot;所属课程&quot;&gt;</span><br><span class="line">      &lt;el-option label=&quot;vue&quot; value=&quot;vue&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">      &lt;el-option label=&quot;react&quot; value=&quot;react&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;requestQuestionData&quot;&gt;查询&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;warning&quot; @click=&quot;handleReset&quot;&gt;重置&lt;/el-button&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">&lt;/el-form&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>题目查找 模糊搜索</p>
</li>
<li><p>vue导航守卫 (路由)</p>
<ul>
<li>没有登录 react 高阶组件</li>
</ul>
</li>
<li><p>登录授权</p>
</li>
<li><p>删除完重新加载</p>
<ul>
<li>重新请求下数据  created  this.requestTableData()</li>
</ul>
</li>
</ul>
<h3 id="5-4-文件上传"><a href="#5-4-文件上传" class="headerlink" title="5.4 文件上传"></a>5.4 文件上传</h3><ul>
<li><p>前端</p>
<ul>
<li><p>组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-form-item label=&quot;图片&quot; prop=&quot;img&quot;&gt;</span><br><span class="line">  &lt;!--            &lt;el-input v-model=&quot;ruleForm.img&quot;&gt;&lt;/el-input&gt;--&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--自定义上传--&gt;</span><br><span class="line">  &lt;el-upload</span><br><span class="line">    class=&quot;avatar-uploader&quot;</span><br><span class="line">    action=&quot;&quot;</span><br><span class="line">    :show-file-list=&quot;false&quot;</span><br><span class="line">    :data=&quot;&#123;file:&#x27;file&#x27;&#125;&quot;</span><br><span class="line">    :http-request=&quot;handleUpload&quot;</span><br><span class="line">    :before-upload=&quot;beforeAvatarUpload&quot;&gt;</span><br><span class="line">    &lt;img v-if=&quot;ruleForm.img&quot; :src=&quot;ruleForm.img&quot; class=&quot;avatar&quot;&gt;</span><br><span class="line">    &lt;i v-else class=&quot;el-icon-plus avatar-uploader-icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/el-upload&gt;</span><br><span class="line"></span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>自定义上传<code>http-request</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleUpload</span>(<span class="params">param</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> fileObj = param.<span class="property">file</span>;</span><br><span class="line">  <span class="comment">// FormData 对象</span></span><br><span class="line">  <span class="keyword">let</span> form = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">  <span class="comment">// 文件对象</span></span><br><span class="line">  form.<span class="title function_">append</span>(<span class="string">&quot;filename&quot;</span>, param.<span class="property">file</span>.<span class="property">size</span> + <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 其他参数</span></span><br><span class="line">  form.<span class="title function_">append</span>(<span class="string">&quot;photos&quot;</span>, fileObj);</span><br><span class="line">  <span class="comment">//调用api接口</span></span><br><span class="line">  <span class="title function_">uploadFile</span>(form).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;msg, imgUrl&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(msg);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">img</span> = imgUrl;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeAvatarUpload</span>(<span class="params">file</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isJPGOrPng = file.<span class="property">type</span> === <span class="string">&#x27;image/jpeg&#x27;</span> || <span class="string">&#x27;image/png&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> isLt2M = file.<span class="property">size</span> / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isJPGOrPng) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传头像图片只能是 JPG 或者 png 格式!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!isLt2M) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传头像图片大小不能超过 2MB!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isJPGOrPng &amp;&amp; isLt2M;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>后台 <code>multer</code></p>
<ul>
<li><p>导入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multer <span class="keyword">from</span> <span class="string">&#x27;multer&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>设置 上传的路径 / 文件重命名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">  <span class="comment">//设置上传路径</span></span><br><span class="line">  <span class="attr">destination</span>: <span class="keyword">function</span> (<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, uploadPath)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//给文件重命名</span></span><br><span class="line">  <span class="attr">filename</span>: <span class="keyword">function</span> (<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, file.<span class="property">fieldname</span> + req.<span class="property">body</span>.<span class="property">filename</span> + <span class="string">&#x27;-&#x27;</span> + file.<span class="property">originalname</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 初始化upload 实例</span></span><br><span class="line"><span class="keyword">let</span> upload = <span class="title function_">multer</span>(&#123;storage&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>上传接口的处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, upload.<span class="title function_">single</span>(<span class="string">&#x27;photos&#x27;</span>), <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">file</span>);</span><br><span class="line">  <span class="comment">// console.log(req.body);</span></span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;上传成功&#x27;</span>,</span><br><span class="line">    <span class="attr">imgUrl</span>: <span class="string">&#x27;http://localhost:7007/&#x27;</span> + req.<span class="property">file</span>.<span class="property">filename</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>静态资源的处理app.js中添加路径为静态资源路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以通过地址的方式访问uploads里面的资源</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>)));</span><br></pre></td></tr></table></figure></li>
<li><p>上传之后 列表页的处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-table-column</span><br><span class="line">  fixed</span><br><span class="line">  prop=&quot;img&quot;</span><br><span class="line">  label=&quot;图片预览&quot;</span><br><span class="line">  width=&quot;150&quot;&gt;</span><br><span class="line">  &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">    &lt;img style=&quot;width:100px&quot; v-if=&quot;scope.row.img&quot; :src=&quot;scope.row.img&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;img style=&quot;width:100px&quot; v-else src=&quot;../assets/noPic.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>ppt晚上之前发过来  至少10分钟的讲解 </p>
</li>
</ul>
<ul>
<li>vue原理</li>
<li>promise</li>
<li>async await</li>
<li>http协议</li>
</ul>
<ul>
<li><p>js上 </p>
<ul>
<li>类型转换 条件语句 switch  if </li>
</ul>
</li>
<li><p>node</p>
<ul>
<li>饿了么弹框</li>
</ul>
</li>
<li><p>模块化 / js下</p>
<ul>
<li><a href="https://org.modao.cc/app/4dec0a0ec296f30eb41a70d25b3171aae8ab7d6c?simulator_type=device&amp;sticky">https://org.modao.cc/app/4dec0a0ec296f30eb41a70d25b3171aae8ab7d6c?simulator_type=device&amp;sticky</a> </li>
</ul>
</li>
<li><p>vue 组件封装</p>
<ul>
<li><a href="https://org.modao.cc/app/c9b8ef14751a0d84b2cbf21ff83f927609918506?simulator_type=device&amp;sticky">https://org.modao.cc/app/c9b8ef14751a0d84b2cbf21ff83f927609918506?simulator_type=device&amp;sticky</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序入门</title>
    <url>/liuqi_blogs/2022/01/19/%E7%AC%AC%E4%B8%89%E5%91%A8-%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%95%B4%E4%BD%93/</url>
    <content><![CDATA[<h1 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h1><h2 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1. 是什么?"></a>1. 是什么?</h2><ul>
<li><p>不是网页  没有跨域</p>
</li>
<li><p>不是app  </p>
</li>
<li><p>嵌套在app中的一种衍生产品 </p>
<ul>
<li>微信小程序</li>
<li>支付宝小程序</li>
<li>字节跳动小程序</li>
<li>qq小程序</li>
<li>百度小程序<span id="more"></span>
<h2 id="2-下载"><a href="#2-下载" class="headerlink" title="2. 下载"></a>2. 下载</h2></li>
</ul>
</li>
<li><p>官网 : <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a></p>
</li>
</ul>
<img src="image/image-20200713091718367.png" alt="image-20200713091718367" style="zoom: 33%;" /> 

<h2 id="3-开发工具"><a href="#3-开发工具" class="headerlink" title="3. 开发工具"></a>3. 开发工具</h2><img src="image/image-20200713092601472.png" alt="image-20200713092601472" style="zoom:23%;" /> 

<ul>
<li>开启对请求的不校验</li>
</ul>
<img src="image/image-20200713092757423.png" alt="image-20200713092757423" style="zoom:33%;" /> 

<h2 id="4-文档介绍"><a href="#4-文档介绍" class="headerlink" title="4. 文档介绍"></a>4. 文档介绍</h2><img src="image/image-20200713095622026.png" alt="image-20200713095622026" style="zoom:50%;" /> 

<ul>
<li>指南: 大的方向 小程序大概怎么开发</li>
<li>框架: 文件的配置和语法</li>
<li>组件: 页面的ui</li>
<li>api : 跳转 请求 嵌入网页  提示框…</li>
</ul>
<h2 id="5-新建页面"><a href="#5-新建页面" class="headerlink" title="5. 新建页面"></a>5. 新建页面</h2><p><img src="image/image-20200713101122560.png" alt="image-20200713101122560"></p>
<h3 id="5-1-入口文件"><a href="#5-1-入口文件" class="headerlink" title="5.1 入口文件"></a>5.1 入口文件</h3><p><img src="image/image-20200713101208368.png" alt="image-20200713101208368"></p>
<h2 id="6-练习"><a href="#6-练习" class="headerlink" title="6. 练习"></a>6. 练习</h2><ul>
<li>新建一个页面 将这个页面变成入口文件</li>
<li>在页面中添加样式 </li>
<li>修改全局配置文件 <ul>
<li>修改头部</li>
<li>修改背景色</li>
<li>添加 底部导航</li>
<li>添加图片 显示/ 选中</li>
</ul>
</li>
</ul>
<h2 id="7-语法"><a href="#7-语法" class="headerlink" title="7. 语法"></a>7. 语法</h2><h3 id="7-1-模板-循环-判断"><a href="#7-1-模板-循环-判断" class="headerlink" title="7.1 模板 循环 判断"></a>7.1 模板 循环 判断</h3><img src="image/image-20200713161832221.png" alt="image-20200713161832221" style="zoom:50%;" /> 



<p><img src="image/image-20200713161847595.png" alt="image-20200713161847595" style="zoom:50%;" />\</p>
<img src="image/image-20200713161859641.png" alt="image-20200713161859641" style="zoom:50%;" /> 

<h3 id="7-2-事件"><a href="#7-2-事件" class="headerlink" title="7.2 事件"></a>7.2 事件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">data-title</span>=<span class="string">&quot;&#123;&#123;item&#125;&#125;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;toQuestionDetail&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>传值 data-xxx  传值</p>
</li>
<li><p>接收到值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">toQuestionDetail</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">title</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-3-输入事件"><a href="#7-3-输入事件" class="headerlink" title="7.3 输入事件"></a>7.3 输入事件</h3><ul>
<li>输入框</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;weui-input&quot;</span>  <span class="attr">bindinput</span>=<span class="string">&quot;handleUsername&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;weui-input&quot;</span>  <span class="attr">bindinput</span>=<span class="string">&quot;handlePassword&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>处理事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleUsername</span>(<span class="params">event</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">detail</span>.<span class="property">value</span>)</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">     <span class="attr">username</span>:event.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="7-4-全局数据"><a href="#7-4-全局数据" class="headerlink" title="7.4 全局数据"></a>7.4 全局数据</h3><ul>
<li>app.js</li>
</ul>
<img src="image/image-20200715101112757.png" alt="image-20200715101112757" style="zoom:50%;" /> 

<ul>
<li><p>页面上</p>
<p><img src="image/image-20200715101146967.png" alt="image-20200715101146967"> </p>
<img src="image/image-20200715101203414.png" alt="image-20200715101203414" style="zoom:50%;" /> </li>
</ul>
<h2 id="8-组件"><a href="#8-组件" class="headerlink" title="8. 组件"></a>8. 组件</h2><h3 id="8-1-常用组件"><a href="#8-1-常用组件" class="headerlink" title="8.1 常用组件"></a>8.1 常用组件</h3><ul>
<li><p>容器组件 : 承载更多的子元素</p>
<p><code>scroll-view</code> : 滚动(可以横向滚动/纵向)</p>
<p><code>view</code> : 类似<code>div</code></p>
</li>
<li><p>普通组件 : 放在容器组件中</p>
<p><code>text</code> : 存放文本 地位和<code>span</code> 类似</p>
<p><code>icon</code> : 想要打造一个和微信一样的UI页面</p>
<p><code>navigator</code> : 类似路由中的 <code>router-link</code> 可以实现点击之后跳转</p>
</li>
<li><p>表单组件</p>
<p><code>button</code> : 按钮</p>
<p><code>checkbox</code> : 多选</p>
<p><code>picker</code>: 选择器</p>
<p><code>radio</code>: 单选</p>
<p><code>radio-group</code> : 单选组</p>
<p><code>input</code> :输入框</p>
</li>
</ul>
<h3 id="8-1-navigator-传值"><a href="#8-1-navigator-传值" class="headerlink" title="8.1 navigator 传值"></a>8.1 navigator 传值</h3><ul>
<li>方式一 : 通过组件</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// url : 跳转对应页面  title: 想要传过去的值</span></span><br><span class="line"></span><br><span class="line">&lt;navigator url=<span class="string">&quot;/pages/navigate/navigate?title=&#123;&#123;item&#125;&#125;&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/navigator&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另外一个页面接收</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(options)</span><br><span class="line">    <span class="comment">//将数据赋值的方法 setState</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>:options.<span class="property">title</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>方式二 : 通过动态 api</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>:<span class="string">&quot;/pages/questionDetail/questionDetail&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="9-api"><a href="#9-api" class="headerlink" title="9. api"></a>9. api</h2><ul>
<li><p>wx.xxx({属性})</p>
</li>
<li><p>网络请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//需要在onLoad生命周期中请求数据</span></span><br><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>:url+<span class="string">&quot;/question/list&quot;</span>,</span><br><span class="line">  		<span class="attr">method</span>:<span class="string">&quot;GET&quot;</span></span><br><span class="line">      <span class="attr">success</span>:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">				<span class="comment">// 将数据赋值到data中</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">questionList</span>:res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="10-样式"><a href="#10-样式" class="headerlink" title="10. 样式"></a>10. 样式</h2><p>大部分情况和css是一致的</p>
<p>与 CSS 相比，WXSS 扩展的特性有：</p>
<ul>
<li><p>尺寸单位</p>
<ul>
<li>px</li>
<li>rpx : 小程序提供的样式单位</li>
</ul>
<p>每个手机的机型都有一个倍屏概念 屏幕宽度 375px  1px == 两个物理像素  这种情况就叫2倍屏</p>
<p>普通的webapp :  缩放去解决倍屏问题  1px  transform: scale(0.5)</p>
<p>rpx 就是用来解决小程序的倍屏问题的  1rpx === 1个物理像素</p>
</li>
<li><p>样式导入</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./weui.wxss&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul>
<li>每天晚上都打卡再睡觉</li>
<li>10点之前 11点</li>
</ul>
<h2 id="2020年07月14号"><a href="#2020年07月14号" class="headerlink" title="2020年07月14号"></a>2020年07月14号</h2><ul>
<li>页面渲染</li>
<li>请求数据  登录页面  首页</li>
<li>(做题/选做)</li>
</ul>
<h2 id="2020年07月15日-星期三-天气晴-21°-31°"><a href="#2020年07月15日-星期三-天气晴-21°-31°" class="headerlink" title="2020年07月15日 星期三 天气晴 21°-31°"></a>2020年07月15日 星期三 天气晴 21°-31°</h2><img src="image/image-20200715091515937.png" alt="image-20200715091515937" style="zoom:50%;" /> 



<p>vue/ react </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">模板:</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;数据&quot;</span>  <span class="attr">:key</span>=<span class="string">&quot;唯一标识&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on</span>=<span class="string">&quot;数据&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;list.map(item=&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">渲染函数 </span><br><span class="line">render : 编译模板</span><br><span class="line"></span><br><span class="line">vNode(虚拟dom)</span><br><span class="line">&#123;</span><br><span class="line">	key: &quot;div&quot;,</span><br><span class="line">	children:[&#123;key:&quot;p&quot;,children:&quot;我是p&quot;&#125;],</span><br><span class="line">	props:&#123;id:&quot;box&quot;,class:&quot;container&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">diff : 原有的vNode 和新的vNode对比 只会更新变化的内容</span><br><span class="line"></span><br><span class="line">视图</span><br><span class="line"></span><br><span class="line">div</span><br><span class="line">div</span><br></pre></td></tr></table></figure>

<ul>
<li>登录的逻辑<ul>
<li>布局 两个输入框 一个按钮</li>
<li>点击登录的时候<ul>
<li>参数传过去</li>
<li>失败 toast</li>
<li>成功 跳转页面</li>
</ul>
</li>
</ul>
</li>
<li>点击进入详情之前 判断</li>
<li>进入详情页 再次请求数据 </li>
</ul>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>项目的搭建</title>
    <url>/liuqi_blogs/2021/05/19/%E7%AC%AC%E4%BA%8C%E5%91%A8-M%E7%AB%99%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="项目的搭建"><a href="#项目的搭建" class="headerlink" title="项目的搭建"></a>项目的搭建</h1><h2 id="1-路由"><a href="#1-路由" class="headerlink" title="1. 路由"></a>1. 路由</h2><p><code>react-router-dom</code></p>
<h3 id="1-1-首页引入-路由组件-确定路由模式"><a href="#1-1-首页引入-路由组件-确定路由模式" class="headerlink" title="1.1 首页引入 路由组件 确定路由模式"></a>1.1 首页引入 路由组件 确定路由模式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HashRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">RouterView</span> <span class="attr">routes</span>=<span class="string">&#123;routeConfig&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="1-2-配置路由文件"><a href="#1-2-配置路由文件" class="headerlink" title="1.2 配置路由文件"></a>1.2 配置路由文件</h3><ol>
<li><p>router文件夹新建文件 <code>router-config.js</code> 配置路由表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 配置路由表</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LoadAble</span> <span class="keyword">from</span> <span class="string">&quot;../hoc/LoadAble&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">LoadAble</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/login/Login&#x27;</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">LoadAble</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/home/Home&#x27;</span>)),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home/exercise&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">LoadAble</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/exercise/Exercise&#x27;</span>))</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home/news&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">LoadAble</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/news/News&#x27;</span>))</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home/fineClass&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">LoadAble</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/fineClass/FineClass&#x27;</span>))</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home/me&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">LoadAble</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/me/Me&#x27;</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">from</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li>
<li><p>区分一级路由和二级路由</p>
<ul>
<li>切换部分内容 要跳转的是二级路由</li>
<li>切换整体内容 要跳转的是一级路由</li>
</ul>
</li>
</ol>
<h3 id="1-3-封装路由组件-RouterView"><a href="#1-3-封装路由组件-RouterView" class="headerlink" title="1.3 封装路由组件 RouterView"></a>1.3 封装路由组件 RouterView</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Route</span>,<span class="title class_">Switch</span>,<span class="title class_">Redirect</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* &lt;RouterView routes=&#123;数组(路由表的配置文件)&#125;/&gt;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 在哪些地方引入</span></span><br><span class="line"><span class="comment">* 1. 入口组件</span></span><br><span class="line"><span class="comment">* 2. 存在二级路由的页面引入</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">RouterView</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/*路由的配置文件*/</span></span><br><span class="line">    <span class="keyword">const</span> &#123;routes&#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="comment">/*Switch  只能包裹 Route  Redirect 一旦匹配成功就不会向后匹配*/</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">          routes.map((item,key)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">            /*重定向*/</span></span><br><span class="line"><span class="language-xml">            if (item.from !== undefined) &#123;</span></span><br><span class="line"><span class="language-xml">              return <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">exact</span> <span class="attr">key</span>=<span class="string">&#123;key&#125;</span> <span class="attr">from</span>=<span class="string">&#123;item.from&#125;</span> <span class="attr">to</span>=<span class="string">&#123;item.redirect&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">            const Template = item.component;</span></span><br><span class="line"><span class="language-xml">            /*路由*/</span></span><br><span class="line"><span class="language-xml">            return  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">key</span>=<span class="string">&#123;key&#125;</span> <span class="attr">path</span>=<span class="string">&#123;item.path&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">render</span>=<span class="string">&#123;(props)</span>=&gt;</span> <span class="tag">&lt;<span class="name">Template</span> &#123;<span class="attr">...this.props</span>&#125; &#123;<span class="attr">...props</span>&#125; <span class="attr">routes</span>=<span class="string">&#123;item.routes&#125;/</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">          &#125;)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Switch</span></span><br><span class="line"><span class="comment">*   Route</span></span><br><span class="line"><span class="comment">*   Route</span></span><br><span class="line"><span class="comment">*   Route</span></span><br><span class="line"><span class="comment">*   Route</span></span><br><span class="line"><span class="comment">*   Redirect</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-高阶组件-实现路由懒加载"><a href="#1-3-高阶组件-实现路由懒加载" class="headerlink" title="1.3 高阶组件 实现路由懒加载"></a>1.3 高阶组件 实现路由懒加载</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*此高阶组件处理路由懒加载*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">PureComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//()=&gt;import(&#x27;路径&#x27;)  返回值是promise</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">LoadAble</span>(<span class="params">component</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">PureComponent</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">      <span class="title class_">Template</span>: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;<span class="title class_">Template</span>&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title class_">Template</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Template</span> &#123;<span class="attr">...this.props</span>&#125;/&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="variable language_">module</span> = <span class="keyword">await</span> <span class="title function_">component</span>()</span><br><span class="line">      <span class="comment">//组件</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="title class_">Template</span>: <span class="variable language_">module</span>.<span class="property">default</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-结合页面"><a href="#1-4-结合页面" class="headerlink" title="1.4 结合页面"></a>1.4 结合页面</h3><ul>
<li>在需要用到二级路由的页面 引入 <code>RouterView</code></li>
</ul>
<h3 id="1-5-动态路由-一级路由中"><a href="#1-5-动态路由-一级路由中" class="headerlink" title="1.5 动态路由 一级路由中"></a>1.5 动态路由 一级路由中</h3><h2 id="2-redux"><a href="#2-redux" class="headerlink" title="2. redux"></a>2. redux</h2><h2 id="3-布局"><a href="#3-布局" class="headerlink" title="3. 布局"></a>3. 布局</h2><ul>
<li>整体布局 上中下</li>
</ul>
<h2 id="4-组件的封装"><a href="#4-组件的封装" class="headerlink" title="4. 组件的封装"></a>4. 组件的封装</h2><ul>
<li>头部<ul>
<li>左侧<ul>
<li>返回按钮 back=true</li>
<li>用户信息 info=true</li>
</ul>
</li>
<li>中间的部分<ul>
<li>标题     title={‘标题’}</li>
<li>选项卡  showChoose=true</li>
</ul>
</li>
<li>右侧<ul>
<li>没有</li>
</ul>
</li>
</ul>
</li>
<li>尾部</li>
</ul>
<h2 id="5-前后端联调"><a href="#5-前后端联调" class="headerlink" title="5. 前后端联调"></a>5. 前后端联调</h2><ul>
<li>跨域<ul>
<li>代理 </li>
<li>后端处理  cors</li>
<li>jsonp</li>
<li>websocket</li>
</ul>
</li>
<li>axios二次封装<ul>
<li>utils</li>
</ul>
</li>
</ul>
<h2 id="6-逻辑的处理"><a href="#6-逻辑的处理" class="headerlink" title="6. 逻辑的处理"></a>6. 逻辑的处理</h2><h3 id="6-1-做题"><a href="#6-1-做题" class="headerlink" title="6.1 做题"></a>6.1 做题</h3><ul>
<li><p>根据专业专高实训有一个大的分类  前端筛选</p>
</li>
<li><p>点击其中一个分类 对应出现相应的课程</p>
</li>
<li><p>点击去练习的时候</p>
<ul>
<li>react / vue 请求数据 ?course=react   ?course=vue  得到相关课程所有的题目</li>
<li>渲染详情页</li>
<li>详情页 就要用到动态路由</li>
</ul>
</li>
<li><p>步骤</p>
<ul>
<li>新建一个动态路由 代表做题的详情页  /:course</li>
<li>动态路由中获取参数</li>
<li>请求对应的题目</li>
<li>做题<ul>
<li>每点击一个选项 都能获取当前题的id 和 选项</li>
<li>点击下一题 : 将id 和 选项 push到一个数组中</li>
<li>id唯一 : 如果当前id对应的题目存在数组中 不用push 直接修改对应id的选项</li>
<li>点击提交的时候 将数组和数据进行比较 哪个对了 哪个错了 跳转页面 成绩传过去 传值 redux</li>
<li>bug : 点击的时候 需要点击2次提交才会提交成功 问题:仓库还没存储 就获取  导致数据丢失  解决方案 : 点击的时候 默认什么选项也不选  在点击选项的时候把数据提交到仓库 </li>
</ul>
</li>
<li>成绩</li>
<li>提交到后台<ul>
<li>post 接口 接收成绩 做题个数 uid 正确率 </li>
</ul>
</li>
</ul>
</li>
<li><p>跳转到详情页 动态路由</p>
</li>
<li><p>做题剩余的逻辑</p>
<ul>
<li><p>开始做题 要有个提示</p>
</li>
<li><p>没做完点击返回的时候 有个提示 确定 返回 取消 继续做题</p>
</li>
<li><p>提交的时候也要有提示 确定提交吗 确定的时候 看到成绩</p>
</li>
<li><p>上一题 下一题</p>
</li>
<li><p>点击确定提交 数据提交到后台 uid: (谁做的) 成绩:数字 做题数量:数字 错题:[qId] </p>
</li>
<li><p>后台存到一个数组中  [{uid :’adsdfaf’,num:0,错题:[qId]}]</p>
</li>
<li><p>首页展示的每个课程的题的个数 能实现就实现 实现不了就算了</p>
</li>
<li><p>后台管理 首页 : 谁做题的分数最高 做题的总个数</p>
</li>
<li><p>错题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">result(做题结果)--&gt;send(将错题id提交到后台)--&gt;数组的形式存储到这个人对应的个人信息中--&gt;前端获取个人信息的时候就能获取错题id--&gt;根据题目id渲染响应的错题</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="6-2-登录-用户管理"><a href="#6-2-登录-用户管理" class="headerlink" title="6.2 登录/用户管理"></a>6.2 登录/用户管理</h3><ul>
<li><p>同学学生账号登录 登陆之后就可以答题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">登录--&gt;首页--&gt;答题可以预览详情</span><br><span class="line">没有登录--&gt;不可以答题不可以预览详情</span><br><span class="line">没有登录--&gt;不能看到我的页面中显示的昵称</span><br><span class="line">登录--&gt;修改昵称修改密码</span><br><span class="line">login(请求登录接口)--&gt;得到登录成功存储本地--&gt;token(得到一个token)</span><br><span class="line">token--有token--&gt;进入详情</span><br><span class="line">token--没有token--&gt;不能进入详情</span><br></pre></td></tr></table></figure></li>
<li><p>详情拦截</p>
<ul>
<li>本地存储 token</li>
<li>没有token 不让进入详情页</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">进入详情页--有token--&gt;详情页</span><br><span class="line">进入详情页--没有token--&gt;跳转到登录页</span><br><span class="line">跳转到登录页--登录成功--&gt;详情页</span><br></pre></td></tr></table></figure></li>
<li><p>公司中的token</p>
<ul>
<li>前端 token : <ul>
<li>access_token : 获取用户权限  每次在请求头中添加一个token </li>
<li>refresh_token : 刷新access_token 后台 2h token过期 旧的token换新的token</li>
<li>为什么要有token : 保证数据安全性 登录成功之后 返回token 每次请求的时候在请求头中添加token</li>
</ul>
</li>
<li>后端 :jwt : json web token 验证 生成token(加密的过程)</li>
</ul>
</li>
</ul>
<h3 id="6-3-待完善逻辑"><a href="#6-3-待完善逻辑" class="headerlink" title="6.3 待完善逻辑"></a>6.3 待完善逻辑</h3><ul>
<li>错题</li>
<li></li>
</ul>
<h2 id="7-接口的处理"><a href="#7-接口的处理" class="headerlink" title="7. 接口的处理"></a>7. 接口的处理</h2><ul>
<li>后台管理页面显示 谁的做题量最高 谁的正确率最高</li>
<li>登录 学生的账号</li>
<li>redux 持久化  我的页面</li>
<li>没登录 不能做题 (高阶组件登录拦截)</li>
</ul>
<h2 id="8-动态路由"><a href="#8-动态路由" class="headerlink" title="8. 动态路由"></a>8. 动态路由</h2><h3 id="8-1-新建一个页面组件"><a href="#8-1-新建一个页面组件" class="headerlink" title="8.1 新建一个页面组件"></a>8.1 新建一个页面组件</h3><img src="image/image-20200708101118919.png" alt="image-20200708101118919" style="zoom:50%;" /> 



<h3 id="8-2-路由配置文件中添加动态路由的配置文件"><a href="#8-2-路由配置文件中添加动态路由的配置文件" class="headerlink" title="8.2 路由配置文件中添加动态路由的配置文件"></a>8.2 路由配置文件中添加动态路由的配置文件</h3><p><img src="image/image-20200708101158243.png" alt="image-20200708101158243"> </p>
<h3 id="8-3-页面中处理跳转-拼接一个参数"><a href="#8-3-页面中处理跳转-拼接一个参数" class="headerlink" title="8.3 页面中处理跳转 拼接一个参数"></a>8.3 页面中处理跳转 拼接一个参数</h3><p><img src="image/image-20200708102837438.png" alt="image-20200708102837438"></p>
<h3 id="8-4-在详情页中获取动态路由的参数"><a href="#8-4-在详情页中获取动态路由的参数" class="headerlink" title="8.4 在详情页中获取动态路由的参数"></a>8.4 在详情页中获取动态路由的参数</h3><img src="image/image-20200708102913637.png" alt="image-20200708102913637" style="zoom:50%;" /> 

<h2 id="9-redux"><a href="#9-redux" class="headerlink" title="9. redux"></a>9. redux</h2><h3 id="9-1-下载包-redux-react-redux"><a href="#9-1-下载包-redux-react-redux" class="headerlink" title="9.1 下载包 redux react-redux"></a>9.1 下载包 redux react-redux</h3><ul>
<li><p>redux : 仓库</p>
</li>
<li><p>react-redux 将仓库的内容映射到页面中</p>
</li>
</ul>
<h3 id="9-2-搭建仓库"><a href="#9-2-搭建仓库" class="headerlink" title="9.2 搭建仓库"></a>9.2 搭建仓库</h3><ul>
<li>新建一个store文件夹 index.js</li>
<li>新建reducers </li>
<li>合并reducer </li>
<li>actions</li>
<li>页面使用  react-redux<ul>
<li>入口组件中使用 Provider</li>
<li>组件中使用connect</li>
</ul>
</li>
</ul>
<h3 id="9-3-该项目redux使用场景"><a href="#9-3-该项目redux使用场景" class="headerlink" title="9.3 该项目redux使用场景"></a>9.3 该项目redux使用场景</h3><ul>
<li>做题成绩</li>
<li>用户</li>
</ul>
]]></content>
      <categories>
        <category>react.js</category>
      </categories>
      <tags>
        <tag>react.js</tag>
      </tags>
  </entry>
  <entry>
    <title>项目的搭建</title>
    <url>/liuqi_blogs/2021/02/19/%E7%AC%AC%E4%BA%8C%E5%91%A8%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="M栈的项目"><a href="#M栈的项目" class="headerlink" title="M栈的项目"></a>M栈的项目</h1><h2 id="移动端-结合上周后台管理"><a href="#移动端-结合上周后台管理" class="headerlink" title="移动端 结合上周后台管理"></a>移动端 结合上周后台管理</h2><ul>
<li><p>移动端的适配  不同的浏览器展示相同的样式</p>
</li>
<li><p>浏览器的事件 touch 滑动事件 事件穿透问题</p>
</li>
<li><p>技术栈</p>
<span id="more"></span>
<ul>
<li>React搭建移动端</li>
<li>antd : pc端的ui库</li>
<li>Material-UI  结合 react的移动端  按钮 点击波浪效果  颜色搭配 绿色/蓝色/红色 浮动按钮</li>
</ul>
</li>
<li><p>业务流程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">login(学生的身份登录)--&gt;home(首页)</span><br><span class="line">home--&gt;精品课</span><br><span class="line">home--&gt;答题</span><br><span class="line">home--&gt;资讯</span><br><span class="line">home--&gt;我的</span><br><span class="line">答题--&gt;答题页面</span><br><span class="line">答题页面--&gt;成绩</span><br><span class="line">成绩--&gt;传递到后台</span><br><span class="line">精品课--&gt;精品课分类</span><br><span class="line">精品课分类--&gt;精品课详情</span><br><span class="line">资讯--&gt;资讯列表</span><br><span class="line">资讯列表--&gt;资讯详情</span><br><span class="line">我的--&gt;修改个人资料</span><br><span class="line">我的--&gt;错题记录</span><br><span class="line">我的--&gt;退出登录</span><br></pre></td></tr></table></figure></li>
<li><p>真机调试</p>
</li>
</ul>
<h2 id="1-适配"><a href="#1-适配" class="headerlink" title="1. 适配"></a>1. 适配</h2><h3 id="1-1-视口"><a href="#1-1-视口" class="headerlink" title="1.1 视口"></a>1.1 视口</h3><ul>
<li><p>布局视口 980px (不同的浏览器会有不同的效果)</p>
</li>
<li><p>视觉视口 375px 视觉视口</p>
</li>
<li><p>理想状态  布局视口===视觉视口</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0,user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><pre><code>user-scalable=no//click 点击300ms延时的问题就解决了
</code></pre>
</li>
</ul>
<h3 id="1-2-方案"><a href="#1-2-方案" class="headerlink" title="1.2 方案"></a>1.2 方案</h3><p>**1. **在 head 设置 width=device-width 的 viewport</p>
<p><strong>2.</strong> 在 css 中使用 px  (rem:慎用) 规范 : 4的倍数</p>
<p>**3. ** 在适当的场景(宽度)使用 flex 布局，或者配合 vw/vh 进行自适应 百分比</p>
<p>**4. ** 在跨设备类型的时候（pc &lt;-&gt; 手机 &lt;-&gt; 平板）使用媒体查询</p>
<p><strong>5.</strong>  在跨设备类型如果交互差异太大的情况，考虑分开项目开发 pc  移动</p>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
</search>
