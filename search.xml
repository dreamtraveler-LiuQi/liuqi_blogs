<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>01-认识Web和Web标准</title>
    <url>/liuqi_blogs/2021/09/01/01-%E8%AE%A4%E8%AF%86Web%E5%92%8CWeb%E6%A0%87%E5%87%86/</url>
    <content><![CDATA[<h1 id="01-认识Web和Web标准"><a href="#01-认识Web和Web标准" class="headerlink" title="01-认识Web和Web标准"></a>01-认识Web和Web标准</h1><h2 id="Web、网页、浏览器"><a href="#Web、网页、浏览器" class="headerlink" title="Web、网页、浏览器"></a>Web、网页、浏览器</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>Web（World Wide Web）即全球广域网，也称为万维网。</p>
<p>我们常说的<code>Web端</code>就是网页端。</p>
<span id="more"></span>

<h3 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h3><p><strong>网页是构成网站的基本元素</strong>。网页主要由文字、图像和超链接等元素构成。当然，除了这些元素，网页中还可以包含音频、视频以及Flash等。</p>
<p>我们在浏览器上输入网址后，打开的任何一个页面，都是属于网页。</p>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>浏览器是网页运行的平台，常见的浏览器有谷歌（Chrome）、Safari、火狐（Firefox）、IE、Edge、Opera等。</p>
<p>关于浏览器的详细介绍，可以看下一篇文章：《<a href="https://github.com/qianguyihao/Web/blob/master/01-html/02-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E4%BB%8B%E7%BB%8D.md">浏览器的介绍</a>》</p>
<h2 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h2><h3 id="W3C组织"><a href="#W3C组织" class="headerlink" title="W3C组织"></a>W3C组织</h3><p><strong>W3C</strong>：万维网联盟组织，用来制定web标准的机构（组织）。</p>
<p>W3C 万维网联盟是国际最著名的标准化组织。1994年成立后，至今已发布近百项相关万维网的标准，对万维网发展做出了杰出的贡献。</p>
<p>W3C 组织就类似于现实世界中的联合国。</p>
<p>为什么要遵循WEB标准呢？因为很多浏览器的浏览器内核不同，导致页面解析出来的效果可能会有差异，给开发者增加无谓的工作量。因此需要指定统一的标准。</p>
<h3 id="Web-标准"><a href="#Web-标准" class="headerlink" title="Web 标准"></a>Web 标准</h3><p><strong>Web标准</strong>：制作网页要遵循的规范。</p>
<p>Web标准不是某一个标准，而是由W3C组织和其他标准化组织制定的一系列标准的集合。</p>
<p><strong>1、Web标准包括三个方面</strong>：</p>
<ul>
<li>结构标准（HTML）：用于对网页元素进行整理和分类。</li>
<li>表现标准（CSS）：用于设置网页元素的版式、颜色、大小等外观样式。</li>
<li>行为标准（JS）：用于定义网页的交互和行为。</li>
</ul>
<p>根据上面的Web标准，可以将 Web前端分为三层，如下。</p>
<p><strong>2、Web前端分三层</strong>：</p>
<ul>
<li>HTML（HyperText Markup Language）：超文本标记语言。从<strong>语义</strong>的角度描述页面的<strong>结构</strong>。相当于人的身体组织结构。</li>
<li>CSS（Cascading Style Sheets）：层叠样式表。从<strong>审美</strong>的角度美化页面的<strong>样式</strong>。相当于人的衣服和打扮。</li>
<li>JS：JavaScript。从<strong>交互</strong>的角度描述页面的<strong>行为</strong>。相当于人的动作，让人有生命力。</li>
</ul>
<p><strong>3、打个比方</strong>：（拿黄渤举例）</p>
<p>HTML 相当于人的身体组织结构：</p>
<p><img src="http://img.smyhvae.com/20200322_1250.png" alt="img"></p>
<p>CSS 相当于人的衣服和打扮：</p>
<p><img src="http://img.smyhvae.com/20200322_1251.png" alt="img"></p>
<p>JS 相当于人的行为：</p>
<p><img src="http://img.smyhvae.com/20200322_2220.gif" alt="img"></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>02-浏览器的介绍</title>
    <url>/liuqi_blogs/2021/09/05/02-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="02-浏览器的介绍"><a href="#02-浏览器的介绍" class="headerlink" title="02-浏览器的介绍"></a>02-浏览器的介绍</h1><h2 id="常见的浏览器"><a href="#常见的浏览器" class="headerlink" title="常见的浏览器"></a>常见的浏览器</h2><p>浏览器是网页运行的平台，常见的浏览器有谷歌（Chrome）、Safari、火狐（Firefox）、IE、Edge、Opera等。如下图所示：</p>
<span id="more"></span>

<p><img src="http://img.smyhvae.com/20191204_1900.png" alt="img"></p>
<p>我们重点需要学习的是 Chrome 浏览器。</p>
<h2 id="浏览器的市场占有份额"><a href="#浏览器的市场占有份额" class="headerlink" title="浏览器的市场占有份额"></a>浏览器的市场占有份额</h2><p>浏览器的市场占有份额：<a href="https://tongji.baidu.com/research/site?source=index#browser">https://tongji.baidu.com/research/site?source=index#browser</a></p>
<p><img src="http://img.smyhvae.com/20200322_1058.png" alt="img"></p>
<p>上面这张图的统计时间是2020年2月。</p>
<h2 id="浏览器的组成"><a href="#浏览器的组成" class="headerlink" title="浏览器的组成"></a>浏览器的组成</h2><p>浏览器分成两部分：</p>
<ul>
<li>1、渲染引擎（即：浏览器内核）</li>
<li>2、JS 引擎</li>
</ul>
<h3 id="1、渲染引擎（浏览器内核）"><a href="#1、渲染引擎（浏览器内核）" class="headerlink" title="1、渲染引擎（浏览器内核）"></a>1、渲染引擎（浏览器内核）</h3><p>浏览器所采用的「渲染引擎」也称之为「浏览器内核」，用来解析 HTML与CSS。渲染引擎决定了浏览器如何显示网页的内容以及页面的格式信息。</p>
<p><strong>渲染引擎是浏览器兼容性问题出现的根本原因。</strong></p>
<p>渲染引擎的英文叫做 Rendering Engine。通俗来说，它的作用就是：读取网页内容，计算网页的显示方式并显示在页面上。</p>
<p>常见浏览器的内核如下：</p>
<table>
<thead>
<tr>
<th align="center">浏览器</th>
<th align="center">内核</th>
</tr>
</thead>
<tbody><tr>
<td align="center">chrome</td>
<td align="center">Blink</td>
</tr>
<tr>
<td align="center">欧鹏</td>
<td align="center">Blink</td>
</tr>
<tr>
<td align="center">360安全浏览器</td>
<td align="center">Blink</td>
</tr>
<tr>
<td align="center">360极速浏览器</td>
<td align="center">Blink</td>
</tr>
<tr>
<td align="center">Safari</td>
<td align="center">Webkit</td>
</tr>
<tr>
<td align="center">Firefox 火狐</td>
<td align="center">Gecko</td>
</tr>
<tr>
<td align="center">IE</td>
<td align="center">Trident</td>
</tr>
</tbody></table>
<p>备注：360的浏览器，以前使用的IE浏览器的Trident内核，但是现在已经改为使用 chrome 浏览器的 Blink内核。</p>
<p>另外，移动端的浏览器内核是什么？大家可以自行查阅资料。</p>
<h3 id="2、JS-引擎"><a href="#2、JS-引擎" class="headerlink" title="2、JS 引擎"></a>2、JS 引擎</h3><p>也称为 JS 解释器。 用来解析网页中的JavaScript代码，对其处理后再运行。</p>
<p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行时会逐行解释源码（转换为机器语言），然后由计算机去执行。</p>
<p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行。所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p>
<p>常见浏览器的 JS 引擎如下：</p>
<table>
<thead>
<tr>
<th align="center">浏览器</th>
<th align="left">JS 引擎</th>
</tr>
</thead>
<tbody><tr>
<td align="center">chrome / 欧鹏</td>
<td align="left">V8</td>
</tr>
<tr>
<td align="center">Safari</td>
<td align="left">Nitro</td>
</tr>
<tr>
<td align="center">Firefox 火狐</td>
<td align="left">SpiderMonkey（1.0-3.0）/ TraceMonkey（3.5-3.6）/ JaegerMonkey（4.0-）</td>
</tr>
<tr>
<td align="center">Opera</td>
<td align="left">Linear A（4.0-6.1）/ Linear B（7.0-9.2）/ Futhark（9.5-10.2）/ Carakan（10.5-）</td>
</tr>
<tr>
<td align="center">IE</td>
<td align="left">Trident</td>
</tr>
</tbody></table>
<p>参考链接：</p>
<ul>
<li><a href="https://juejin.im/post/5ada727c518825670b33a584">主流浏览器内核及JS引擎</a></li>
</ul>
<h2 id="浏览器工作原理"><a href="#浏览器工作原理" class="headerlink" title="浏览器工作原理"></a>浏览器工作原理</h2><p><img src="http://img.smyhvae.com/20180124_1700.png" alt="img"></p>
<p>1、User Interface 用户界面，我们所看到的浏览器</p>
<p>2、Browser engine 浏览器引擎，用来查询和操作渲染引擎</p>
<p>3、Rendering engine 用来显示请求的内容，负责解析HTML、CSS</p>
<p>4、Networking 网络，负责发送网络请求</p>
<p>5、JavaScript Interpreter(解析者) JavaScript解析器，负责执行JavaScript的代码</p>
<p>6、UI Backend UI后端，用来绘制类似组合框和弹出窗口</p>
<p>7、Data Persistence(持久化) 数据持久化，数据存储 cookie、HTML5中的sessionStorage</p>
<p>参考链接：</p>
<ul>
<li><a href="https://www.2cto.com/kf/201202/118111.html">https://www.2cto.com/kf/201202/118111.html</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>03-初识HTML</title>
    <url>/liuqi_blogs/2021/09/11/03-%E5%88%9D%E8%AF%86HTML/</url>
    <content><![CDATA[<h1 id="03-初识HTML"><a href="#03-初识HTML" class="headerlink" title="03-初识HTML"></a>03-初识HTML</h1><h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul>
<li>头标签</li>
<li>排版标签：<code>&lt;p&gt;</code>、 <code>&lt;div&gt;</code>、 <code>&lt;span&gt;</code>、<code>&lt;br&gt;</code> 、 <code>&lt;hr&gt;</code> 、 <code>&lt;center&gt;</code> 、 <code>&lt;pre&gt;</code></li>
<li>字体标记：<code>&lt;h1&gt;</code>、 <code>&lt;font&gt;</code>、 <code>&lt;b&gt;</code>、 <code>&lt;u&gt;</code> 、<code>&lt;sup&gt;</code> 、<code>&lt;sub&gt;</code></li>
<li>超链接 <code>&lt;a&gt;</code></li>
<li>图片标签 <code>&lt;img&gt;</code><span id="more"></span></li>
</ul>
<h2 id="编辑器相关"><a href="#编辑器相关" class="headerlink" title="编辑器相关"></a>编辑器相关</h2><p>前端开发的编辑器软件，我首先推荐 VS Code，其次推荐Sublime Text。</p>
<p>有人说 WebStorm 也不错？但真实情况是，自从VS Code 问世之后，用 WebStorm 的人越来越少了。</p>
<h3 id="VS-Code-的使用"><a href="#VS-Code-的使用" class="headerlink" title="VS Code 的使用"></a>VS Code 的使用</h3><p>详情请移步至：[第一次使用VS Code时你应该知道的一切配置](<a href="https://github.com/qianguyihao/Web/blob/master/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/01-VS">https://github.com/qianguyihao/Web/blob/master/00-前端工具/01-VS</a> Code的使用.md)</p>
<h3 id="Sublime-Text-的使用"><a href="#Sublime-Text-的使用" class="headerlink" title="Sublime Text 的使用"></a>Sublime Text 的使用</h3><p>详情请移步至：[Sublime Text使用技巧](<a href="https://github.com/qianguyihao/Mac/blob/master/05-%E5%85%A8%E5%B9%B3%E5%8F%B0%E8%BD%AF%E4%BB%B6/Sublime">https://github.com/qianguyihao/Mac/blob/master/05-全平台软件/Sublime</a> Text使用技巧.md)</p>
<h2 id="HTML的概述"><a href="#HTML的概述" class="headerlink" title="HTML的概述"></a>HTML的概述</h2><h3 id="HTML的概念"><a href="#HTML的概念" class="headerlink" title="HTML的概念"></a>HTML的概念</h3><p><strong>HTML</strong> 全称为 HyperText Markup Language，译为<strong>超文本标记语言</strong>。</p>
<p>HTML 不是一种编程语言，是一种描述性的<strong>标记语言</strong>。</p>
<p><strong>作用</strong>：HTML是负责描述文档<strong>语义</strong>的语言。</p>
<h3 id="概念：超文本"><a href="#概念：超文本" class="headerlink" title="概念：超文本"></a>概念：超文本</h3><p>所谓的超文本，有两层含义：</p>
<p>（1）图片、音频、视频、动画、多媒体等内容，成为超文本，因为它们超出了文本的限制。</p>
<p>（2）不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件进行连接。即：超级链接文本。</p>
<h3 id="概念：标记语言"><a href="#概念：标记语言" class="headerlink" title="概念：标记语言"></a>概念：标记语言</h3><p>HTML 不是一种编程语言，是一种描述性的<strong>标记语言</strong>。这主要有两层含义：</p>
<p>（1）<strong>标记语言是一套标记标签</strong>。比如：超链接标签<code>&lt;a&gt;</code>、图片标签<code>&lt;img&gt;</code>、一级标题标签<code>&lt;h1&gt;</code>等等，它们都是属于 HTML 标签。</p>
<p>说的通俗一点就是：网页是由网页元素组成的，这些元素是由 HTML 标签描述出来，然后通过浏览器解析，就可以显示给用户看了。</p>
<p>（2）编程语言是有编译过程的，而标记语言没有编译过程，HTML标签是直接由浏览器解析执行。</p>
<h3 id="HTML是负责描述文档语义的语言"><a href="#HTML是负责描述文档语义的语言" class="headerlink" title="HTML是负责描述文档语义的语言"></a>HTML是负责描述文档语义的语言</h3><p>HTML 中，除了<strong>语义</strong>，其他什么都没有。</p>
<p>HTML 是一个纯本文文件（就是用txt文件改名而成），用一些标签来描述语义，这些标签在浏览器页面上是无法直观看到的，所以称之为“超文本标记语言”。</p>
<p>所以，接下来，我们需要要学习一堆 HTML 中的标签对，这些标签对能够给文本不同的语义。</p>
<p>比如，面试的时候问你，<code>&lt;h1&gt;</code> 标签有什么作用？</p>
<ul>
<li>正确答案：给文本增加主标题的语义。</li>
<li>错误答案：给文字加粗、加黑、变大。</li>
</ul>
<p>关乎“语义”的更深刻的理解，等接下来我们学习了各种标签，就明白了。</p>
<h2 id="HTML的历史"><a href="#HTML的历史" class="headerlink" title="HTML的历史"></a>HTML的历史</h2><p><img src="http://img.smyhvae.com/20151001_1001.png" alt="html中标签发展趋势"></p>
<p>我们专门来对XHTML做一个介绍。</p>
<p><strong>XHTML介绍：</strong> XHTML：Extensible Hypertext Markup Language，可扩展超文本标注语言。 XHTML的主要目的是为了<strong>取代HTML</strong>，也可以理解为HTML的升级版。 HTML的标记书写很不规范，会造成其它的设备(ipad、手机、电视等)无法正常显示。 XHTML与HTML4.0的标记基本上一样。 XHTML是<strong>严格的、纯净的</strong>HTML。</p>
<p>我们稍后将对XHTML的编写规范进行介绍。</p>
<h2 id="HTML的专有名词"><a href="#HTML的专有名词" class="headerlink" title="HTML的专有名词"></a>HTML的专有名词</h2><ul>
<li>网页 ：由各种标记组成的一个页面就叫网页。</li>
<li>主页(首页) : 一个网站的起始页面或者导航页面。</li>
<li>标记： <code>&lt;p&gt;</code>称为开始标记 ，<code>&lt;/p&gt;</code>称为结束标记，也叫标签。每个标签都规定好了特殊的含义。</li>
<li>元素：<code>&lt;p&gt;内容&lt;/p&gt;</code>称为元素.</li>
<li>属性：给每一个标签所做的辅助信息。</li>
<li>xhtml： 符合XML语法标准的HTML。</li>
<li>dhtml：dynamic，动态的。<code>javascript + css + html</code>合起来的页面就是一个dhtml。</li>
<li>http：超文本传输协议。用来规定客户端浏览器和服务端交互时数据的一个格式。SMTP：邮件传输协议，ftp：文件传输协议。</li>
</ul>
<h2 id="HTML的编辑工具"><a href="#HTML的编辑工具" class="headerlink" title="HTML的编辑工具"></a>HTML的编辑工具</h2><blockquote>
<p>用的最多的编辑器是： VS Code 和 Sublime Text。</p>
</blockquote>
<ul>
<li>VS Code：最火的前端代码编辑器。</li>
<li>Sublime Text：很轻量的代码编辑器。</li>
<li>NotePad：记事本。</li>
<li>EditPlus：语法高亮显示。技巧： 根据颜色判断单词是否出错 （不是100%）。不好的地方：没有代码提示。</li>
<li>UltraEdit：根据颜色判断单词是否出错，可以显示2进制数据。</li>
<li>dw(dreamweaver，专业工具) ：建立WEB站点和应用程序的专业工具。它将布局功能、开发工具、代码编辑组合在一起。有代码提示。</li>
</ul>
<p>PS：后缀名不能决定文件格式，只能决定打开文件打开的方式。</p>
<h2 id="计算机编码介绍"><a href="#计算机编码介绍" class="headerlink" title="计算机编码介绍"></a>计算机编码介绍</h2><p>计算机，不能直接存储文字，存储的是编码。</p>
<p>计算机只能处理二进制的数据，其它数据，比如：0-9、a-z、A-Z，这些字符，我们定义一套规则来表示。假如：A用110表示，B用111表示等。</p>
<p><strong>ASCII码：</strong> 美国发布的，用1个字节(8位二进制)来表示一个字符，共可以表示2^8=256个字符。 美国的国家语言是英语，只要能表示0-9、a-z、A-Z、特殊符号。</p>
<p><strong>ANSI编码：</strong> <strong>每个国家为了显示本国的语言，都对ASCII码进行了扩展</strong>。用2个字节(16位二进制)来表示一个汉字，共可以表示2^16＝65536个汉字。例如： 中国的ANSI编码是GB2312编码(简体)，对6763汉字进行编码，含600多特殊字符。另外还有GBK(简体)。 日本的ANSI编码是JIS编码。 台湾的ANSI编码是BIG5编码（繁体）。</p>
<p><strong>GBK：</strong> 对GB2312进行了扩展，用来显示罕见的、古汉语的汉字。现在已经收录了2.1万左右。并提供了1890个汉字码位。K的含义就是“扩展”。</p>
<p><strong>Unicode编码(统一编码)：</strong> 用4个字节(32位二进制)来表示一个字符，想法不错，但效率太低。例如，字母A用ASCII表示的话一个字节就够，可用Unicode编码的话，得用4个字节表示，造成了空间的极大浪费。A的Unicode编码是0000 0000 0000 0000 0000 0000 0100 0000</p>
<p><strong>UTF-8(Unicode Transform Format)编码：</strong> 根据字符的不同，选择其编码的长度。比如：一个字符A用1个字节表示，一个汉字用2个字节表示。</p>
<p>毫无疑问，开发中，都用<strong>UTF-8</strong>编码吧，准没错。</p>
<p><strong>中文能够使用的字符集两种：</strong></p>
<ul>
<li>第一种：UTF-8。UTF-8是国际通用字库，里面涵盖了所有地球上所有人类的语言文字，比如阿拉伯文、汉语、鸟语……</li>
<li>第二种：GBK（对GB2312进行了扩展）。gb2312 是国标，是中国的字库，里面<strong>仅</strong>涵盖了汉字和一些常用外文，比如日文片假名，和常见的符号。</li>
</ul>
<p>字库规模： UTF-8（字全） &gt; gb2312（只有汉字）</p>
<p><strong>重点1：避免乱码</strong></p>
<p>我们用meta标签声明的当前这个html文档的字库，一定要和保存的文件编码类型一样，否则乱码！（重点）。</p>
<p>当我们不设置的时候，sublime默认类型就是UTF-8。而一旦更改为gb2312的时候，就一定要记得设置一下sublime的保存类型： <code>文件→ set File Encoding to → Chinese Simplified(GBK)</code>。</p>
<p><strong>重点2：UTF-8和gb2312的比较</strong></p>
<p>保存大小：UTF-8（更臃肿、加载更慢） &gt; gb2312 （更小巧，加载更快）</p>
<p>总结：</p>
<ul>
<li>UTF-8：字多，有各种国家的语言，但是保存尺寸大，文件臃肿；</li>
<li>gb2312：字少，只用中文和少数外语和符号，但是尺寸小，文件小巧。</li>
</ul>
<p>列出2个使用情形：</p>
<p>1） 你们公司是做日本动漫的，经常出现一些日语动漫的名字，网页要使用UTF-8。如果用gb2312将无法显示日语。 2） 你们公司就是中文网页，极度的追求网页的显示速度，要使用gb2312。如果使用UTF-8将每个汉字多一个byte，所以5000个汉字，多5kb。</p>
<p>我们亲测：</p>
<ul>
<li>qq网、网易、搜狐都是使用gb2312。这些公司，都追求显示速度。</li>
<li>新华网藏语频道，使用的是UTF-8，保证字符集的数量。</li>
</ul>
<p>我们是怎么查看网页的编码方式的呢？在浏览器中打开网页，右键，选择“查看网页源代码”，找到meta标签中的charset属性即可。</p>
<p>那么，我们为什么可以查看网页的源代码呢？因为这个打开的网页已经存到我的临时文件夹里了，临时文件夹里的html是纯文本文件，纯文本文件自然可以查看网页的源代码了。</p>
<h2 id="HTML颜色介绍"><a href="#HTML颜色介绍" class="headerlink" title="HTML颜色介绍"></a>HTML颜色介绍</h2><p><strong>颜色表示：</strong></p>
<ul>
<li>纯单词表示：red、green、blue、orange、gray等</li>
<li>10进制表示：rgb(255,0,0)</li>
<li>16进制表示：#FF0000、#0000FF、#00FF00等</li>
</ul>
<p><strong>RGB色彩模式：</strong></p>
<ul>
<li>自然界中所有的颜色都可以用红、绿、蓝(RGB)这三种颜色波长的不同强度组合而得，这就是人们常说的三原色原理。</li>
<li>RGB三原色也叫加色模式，这是因为当我们把不同光的波长加到一起的时候，可以得到不同的混合色。例：红+绿=黄色，红+蓝＝紫色，绿+蓝=青</li>
<li>在数字视频中，对RGB三基色各进行8位编码就构成了大约1678万种颜色，这就是我们常说的真彩色。所有显示设备都采用的是RGB色彩模式。</li>
<li>RGB各有256级(0-255)亮度，256级的RGB色彩总共能组合出约1678万种色彩，即256×256×256=16777216。</li>
</ul>
<h2 id="HTML的规范"><a href="#HTML的规范" class="headerlink" title="HTML的规范"></a>HTML的规范</h2><ul>
<li>HTML是一个弱势语言</li>
<li>HTML不区分大小写</li>
<li>HTML页面的后缀名是html或者htm(有一些系统不支持后缀名长度超过3个字符，比如dos系统)</li>
<li>HTML的结构：<ul>
<li>声明部分：主要作用是用来告诉浏览器这个页面使用的是哪个标准。<!doctype html>是HTML5标准。</li>
<li>head部分：将页面的一些额外信息告诉服务器。不会显示在页面上。</li>
<li>body部分：我们所写的代码必须放在此标签內。</li>
</ul>
</li>
</ul>
<p>目前，IE浏览器是完全不支持H5的，支持最好的是Opera浏览器，可以支持95%以上；其次是google，可以支持一部分H5。</p>
<h3 id="1、编写XHTML的规范："><a href="#1、编写XHTML的规范：" class="headerlink" title="1、编写XHTML的规范："></a>1、编写XHTML的规范：</h3><p>（1）所有标记元素都要正确的嵌套，不能交叉嵌套。正确写法举例：<code>&lt;h1&gt;&lt;font&gt;&lt;/font&gt;&lt;/h1&gt;</code></p>
<p>（2）所有的标记都必须小写。</p>
<p>（3）所有的标记都必须关闭。</p>
<ul>
<li>双边标记：<code>&lt;span&gt;&lt;/span&gt;</code></li>
<li>单边标记：<code>&lt;br&gt;</code> 转成 <code>&lt;br /&gt;</code> <code>&lt;hr&gt;</code> 转成 <code>&lt;hr /&gt;</code>，还有<code>&lt;img src=“URL” /&gt;</code></li>
</ul>
<p>（4）所有的属性值必须加引号。<code>&lt;font color=&quot;red&quot;&gt;&lt;/font&gt;</code></p>
<p>（5）所有的属性必须有值。<code>&lt;hr noshade=&quot;noshade&quot;&gt;</code>、<code>&lt;input type=&quot;radio&quot; checked=&quot;checked&quot; /&gt;</code></p>
<p>（6）XHTML文档开头必须要有DTD文档类型定义</p>
<h3 id="2、HTML的基本语法特性"><a href="#2、HTML的基本语法特性" class="headerlink" title="2、HTML的基本语法特性"></a>2、HTML的基本语法特性</h3><h4 id="（1）HTML对换行不敏感，对tab不敏感"><a href="#（1）HTML对换行不敏感，对tab不敏感" class="headerlink" title="（1）HTML对换行不敏感，对tab不敏感"></a>（1）HTML对换行不敏感，对tab不敏感</h4><p>HTML只在乎标签的嵌套结构，嵌套的关系。谁嵌套了谁，谁被谁嵌套了，和换行、tab无关。换不换行、tab不tab，都不影响页面的结构。</p>
<p>也就是说，HTML不是依靠缩进来表示嵌套的，就是看标签的包裹关系。但是，我们发现有良好的缩进，代码更易读。要求大家都正确缩进标签。</p>
<p>百度为了追求极致的显示速度，所以HTML标签都没有换行、都没有缩进（tab），HTML和换不换行无关，标签的层次依然清晰，只不过程序员不可读了。如下图所示：</p>
<p><img src="http://img.smyhvae.com/20170629_2226.png" alt="img"></p>
<h4 id="（2）空白折叠现象"><a href="#（2）空白折叠现象" class="headerlink" title="（2）空白折叠现象"></a>（2）空白折叠现象</h4><p>HTML中所有的<strong>文字之间</strong>，如果有空格、换行、tab都将被折叠为一个空格显示。</p>
<p>举例如下：</p>
<p><img src="http://img.smyhvae.com/20170629_2230.jpg" alt="img"></p>
<h4 id="（3）标签要严格封闭"><a href="#（3）标签要严格封闭" class="headerlink" title="（3）标签要严格封闭"></a>（3）标签要严格封闭</h4><p>标签不封闭是灾难性的。</p>
<p>标签不封闭的举例如下：</p>
<p><img src="http://img.smyhvae.com/20170629_2245.jpg" alt="img"></p>
<h2 id="三、HTML结构详解"><a href="#三、HTML结构详解" class="headerlink" title="三、HTML结构详解"></a>三、HTML结构详解</h2><blockquote>
<p>备注：</p>
<ul>
<li>所有的浏览器默认情况下都会忽略空格和空行</li>
<li>每个标签都有私有属性。也都有公有属性。</li>
<li>html中表示长度的单位都是<strong>像素</strong>。HTML只有一种单位就是像素。</li>
</ul>
</blockquote>
<p>HTML标签通常是成对出现的（<strong>双边标记</strong>），比如 <code>&lt;div&gt;</code> 和 <code>&lt;/div&gt;</code>，也有单独呈现的标签（<strong>单边标记</strong>），如：<code>&lt;br /&gt;</code>、<code>&lt;hr /&gt;</code>和<code>&lt;img src=&quot;images/1.jpg&quot; /&gt;</code>等。</p>
<p>属性与标记之间、各属性之间需要以空格隔开。属性值以双引号括起来。</p>
<h3 id="快速生成-html-的骨架"><a href="#快速生成-html-的骨架" class="headerlink" title="快速生成 html 的骨架"></a>快速生成 html 的骨架</h3><p><strong>方式1</strong>：在 VS Code 中新建 html 文件，输入<code>html:5</code>，按 <code>Tab</code>键后，自动生成的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>方式2</strong>：在Sublime Text中安装<code>Emmet</code>插件。新建html文件，输入<code>html:5</code>，按<code>Tab</code>键后，自动生成的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>方式3</strong>：在Sublime Text中安装<code>Emmet</code>插件。新建html文件，输入<code>html:xt</code>，按<code>Tab</code>键后（或者按Ctrl+E），自动生成的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>上面的方式2和方式3中，我们会发现，第一行的内容有些不太一样，这就是我们接下来要讲的<strong>文档声明头</strong>。</p>
<h3 id="1、文档声明头"><a href="#1、文档声明头" class="headerlink" title="1、文档声明头"></a>1、文档声明头</h3><p>任何一个标准的HTML页面，第一行一定是一个以<code>&lt;!DOCTYPE ……&gt;</code>开头的语句。</p>
<p>这一行，就是文档声明头，DocType Declaration，简称DTD。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。</p>
<h4 id="HTML4-01有哪些规范呢？"><a href="#HTML4-01有哪些规范呢？" class="headerlink" title="HTML4.01有哪些规范呢？"></a>HTML4.01有哪些规范呢？</h4><p><strong>HTML4.01</strong>这个版本是IE6开始兼容的。<strong>HTML5是IE9开开始兼容的</strong>。如今，手机、移动端的网页，就可以使用HTML5了，因为其兼容性更高。</p>
<p>说个题外话，html1 至 html3 是美国军方以及高等研究所用的，并未对外公开。</p>
<p>HTML4.01里面有两大种规范，每大种规范里面又各有3种小规范。所以一共6种规范（见下图）。</p>
<p>HTML4.01里面规定了<strong>普通</strong>和<strong>XHTML</strong>两大种规范。HTML觉得自己有一些规定不严谨，比如，标签是否可以用大写字母呢？<code>&lt;H1&gt;&lt;/H1&gt;</code>所以，HTML就觉得，把一些规范严格的标准，又制定了一个XHTML1.0。在XHTML中的字母X，表示“严格的”。</p>
<p>总结一下，HTML4.01一共有6种DTD。说白了，HTML的第一行语句一共有6种情况：</p>
<p><img src="http://img.smyhvae.com/20170629_1600.png" alt="img"></p>
<p>下面对上图中的三种小规范进行解释：</p>
<ul>
<li><strong>strict</strong>：表示“严格的”，这种模式里面的要求更为严格。这种严格体现在哪里？有一些标签不能使用。 比如，u标签，就是给一个本文加下划线，但是这和HTML的本质有冲突，因为HTML只能负责语义，不能负责样式，而u这个下划线是样式。所以，在strict中是不能使用u标签的。 那怎么给文本增加下划线呢？今后的css将使用css属性来解决。 那么，XHTML1.0更为严格，因为这个体系本身规定比如标签必须是小写字母、必须严格闭合标签、必须使用引号引起属性等等。</li>
<li><strong>Transitional</strong>：表示“普通的”，这种模式就是没有一些别的规范。</li>
<li><strong>Frameset</strong>：表示“框架”，在框架的页面使用。</li>
</ul>
<p>在sublime输入的html:xt，x表示XHTML，t表示transitional。</p>
<p>在HTML5中极大的简化了DTD，也就是说HTML5中就没有XHTML了（W3C自己打脸了）：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>

<p>1</p>
<h3 id="2、头标签"><a href="#2、头标签" class="headerlink" title="2、头标签"></a>2、头标签</h3><h4 id="html5-的比较完整的骨架："><a href="#html5-的比较完整的骨架：" class="headerlink" title="html5 的比较完整的骨架："></a>html5 的比较完整的骨架：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;牛逼，很牛逼，特别牛逼&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网易是中国领先的互联网技术公司，为用户提供免费邮箱、游戏、搜索引擎服务，开设新闻、娱乐、体育等30多个内容频道，及博客、视频、论坛等互动交流，网聚人的力量。&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>面试题：</p>
<ul>
<li>问：网页的head标签里面，表示的是页面的配置，有什么配置？</li>
<li>答：字符集、关键词、页面描述、页面标题、IE适配、视口、iPhone小图标等等。</li>
</ul>
<p>头标签都放在</p>
<p>头部分之间。包括：<code>&lt;title&gt;</code>、<code>&lt;base&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;link&gt;</code></p>
<ul>
<li><code>&lt;title&gt;</code>：指定整个网页的标题，在浏览器最上方显示。</li>
<li><code>&lt;base&gt;</code>：为页面上的所有链接规定默认地址或默认目标。</li>
<li><code>&lt;meta&gt;</code>：提供有关页面的基本信息</li>
<li><code>&lt;body&gt;</code>：用于定义HTML文档所要显示的内容，也称为主体标签。我们所写的代码必须放在此标签內。</li>
<li><code>&lt;link&gt;</code>：定义文档与外部资源的关系。</li>
</ul>
<p><strong>meta 标签</strong>：</p>
<p>上面的<code>&lt;meta&gt;</code>标签都不用记，但是另外还有一个<code>&lt;meta&gt;</code>标签是需要记住的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;3;http://www.baidu.com&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>上面这个标签的意思是说，3秒之后，自动跳转到百度页面。</p>
<p>常见的几种 meta 标签如下：</p>
<p>（1）字符集 charset：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>字符集用meta标签中的<code>charset</code>定义，meta表示“元”。“元”配置，就是表示基本的配置项目。</p>
<p>charset就是charactor set（即“字符集”）。</p>
<p>浏览器就是通过meta来看网页是什么字符集的。比如你保存的时候，meta写的和声明的不匹配，那么浏览器就是乱码。</p>
<p>（2）视口 viewport：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p><code>width=device-width</code> ：表示视口宽度等于屏幕宽度。</p>
<p>viewport 这个知识点，初学者还比较难理解，以后学 Web 移动端的时候会用到。</p>
<p>（2）定义“关键词”：</p>
<p>举例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网易,邮箱,游戏,新闻,体育,娱乐,女性,亚运,论坛,短信&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>这些关键词，就是告诉搜索引擎，这个网页是干嘛的，能够提高搜索命中率。让别人能够找到你，搜索到你。</p>
<p>（3）定义“页面描述”：</p>
<p>meta除了可以设置字符集，还可以设置关键字和页面描述。</p>
<p>只要设置Description页面描述，那么百度搜索结果，就能够显示这些语句，这个技术叫做<strong>SEO</strong>（search engine optimization，搜索引擎优化）。</p>
<p>设置页面描述的举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网易是中国领先的互联网技术公司，为用户提供免费邮箱、游戏、搜索引擎服务，开设新闻、娱乐、体育等30多个内容频道，及博客、视频、论坛等互动交流，网聚人的力量。&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>效果如下：</p>
<p><img src="http://img.smyhvae.com/20170629_1743.png" alt="img"></p>
<p><strong>title 标签</strong>:</p>
<p>用于设置网页标题：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网页的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>title也是有助于SEO搜索引擎优化的。</p>
<p><strong>base标签</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>base 标签用于指定基础的路径。指定之后，所有的 a 链接都是以这个路径为基准。</p>
<h3 id="3、-lt-body-gt-标签的属性"><a href="#3、-lt-body-gt-标签的属性" class="headerlink" title="3、&lt;body&gt;标签的属性"></a>3、<code>&lt;body&gt;</code>标签的属性</h3><p>其属性有：</p>
<ul>
<li><code>bgcolor</code>：设置整个网页的背景颜色。</li>
<li><code>background</code>：设置整个网页的背景图片。</li>
<li><code>text</code>：设置网页中的文本颜色。</li>
<li><code>leftmargin</code>：网页的左边距。IE浏览器默认是8个像素。</li>
<li><code>topmargin</code>：网页的上边距。</li>
<li><code>rightmargin</code>：网页的右边距。</li>
<li><code>bottommargin</code>：网页的下边距。</li>
</ul>
<p><code>&lt;body&gt;</code>标签另外还有一些属性，这里用个例子来解释：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_39.png" alt="img"></p>
<p>上方代码中，当我们对<code>点我点我</code>这几个字使用超链时，<code>link</code>属性表示默认显示的颜色、<code>alink</code>属性表示鼠标点击但是还没有松开时的颜色、<code>vlink</code>属性表示点击完成之后显示的颜色。效果如下：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_05.gif" alt="img"></p>
<p>接下来，我们讲一下<code>&lt;body&gt;</code>里的各种标签的属性。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>04-HTML标签图文详解一</title>
    <url>/liuqi_blogs/2021/09/17/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%E4%B8%80/</url>
    <content><![CDATA[<h2 id="一、排版标签"><a href="#一、排版标签" class="headerlink" title="一、排版标签"></a>一、排版标签</h2><h3 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释  --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="段落标签-lt-p-gt"><a href="#段落标签-lt-p-gt" class="headerlink" title="段落标签&lt;p&gt;"></a>段落标签<code>&lt;p&gt;</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is another paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>


<p>属性：</p>
<ul>
<li><code>align=&quot;属性值&quot;</code>：对齐方式。属性值包括left center right。 举例：</li>
</ul>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html166440-1dcd2ad6e6353559.png" alt="Paste_Image.png"></p>
<p>段落，是英语paragraph“段落”缩写。</p>
<p>HTML标签是分等级的，HTML将所有的标签分为两种：</p>
<ul>
<li><strong>文本级标签</strong>：p、span、a、b、i、u、em。文本级标签里只能放<strong>文字、图片、表单元素</strong>。（a标签里不能放a和input）</li>
<li><strong>容器级标签</strong>：div、h系列、li、dt、dd。容器级标签里可以放置任何东西。</li>
</ul>
<p>从学习p的第一天开始，就要死死记住：<strong>p标签是一个文本级标签，p里面只能放文字、图片、表单元素</strong>。其他的一律不能放。</p>
<p>错误写法：（尝试把 h 放到 p 里）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">	我是一个小段落</span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>网页效果如下：</p>
<p><img src="http://img.smyhvae.com/20170630_1102.png" alt="img"></p>
<p>上图显示，浏览器不允许你这么做，我们使用Chrome的F12审查元素发现，浏览器自己把p封闭掉了，不让你去包裹h1。</p>
<p>PS：Chrome浏览器是世界上HTML5支持最好的浏览器。提供了非常好的开发工具，非常适合我们开发人员使用。审查元素功能的快捷键是F12。</p>
<h3 id="块级标签-lt-div-gt-和-lt-span-gt"><a href="#块级标签-lt-div-gt-和-lt-span-gt" class="headerlink" title="#块级标签 &lt;div&gt;和&lt;span&gt;"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E5%9D%97%E7%BA%A7%E6%A0%87%E7%AD%BE-div-%E5%92%8C-span">#</a>块级标签 <code>&lt;div&gt;</code>和<code>&lt;span&gt;</code></h3><blockquote>
<p>div和span是非常重要的标签，div的语义是division“分割”； span的语义就是span“范围、跨度”。</p>
</blockquote>
<blockquote>
<p>CSS课程中你将知道，这两个东西，都是最最重要的“盒子”。</p>
</blockquote>
<p>div：把标签中的内容作为一个块儿来对待(division)。必须单独占据一行。</p>
<p>div标签的属性：</p>
<ul>
<li><code>align=&quot;属性值&quot;</code>：设置块儿的位置。属性值可选择：left、right、 center。</li>
</ul>
<p><strong><code>&lt;span&gt;</code>和<code>&lt;div&gt;</code>唯一的区别在于</strong>：<code>&lt;span&gt;</code>是不换行的，而<code>&lt;div&gt;</code>是换行的。</p>
<p>如果单独在网页中插入这两个元素，不会对页面产生任何的影响。这两个元素是专门为定义CSS样式而生的。或者说，DIV+CSS来实现各种样式。</p>
<p>效果举例：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_08.png" alt="Paste_Image.png"></p>
<p>div在浏览器中，默认是不会增加任何的效果的，但是语义变了，div中的所有元素是一个小区域。 div标签是一个<strong>容器级</strong>标签，里面什么都能放，甚至可以放div自己。</p>
<p>span也是表达“小区域、小跨度”的标签，但是是一个<strong>文本级</strong>的标签。 就是说，span里面只能放置文字、图片、表单元素。 span里面不能放p、h、ul、dl、ol、div。</p>
<p>span里面是放置小元素的，div里面放置大东西的。举例如下：</p>
<p>span举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">	简介简介简介简介简介简介简介简介</span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>详细信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>购买<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>div举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;guanggao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dongxi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>所以，我们亲切的称呼这种模式叫做“<strong>div+css</strong>”。<strong>div标签负责布局，负责结构，负责分块。css负责样式</strong>。</p>
<h3 id="换行标签-lt-br-gt-（已废弃）"><a href="#换行标签-lt-br-gt-（已废弃）" class="headerlink" title="#换行标签&lt;br&gt;（已废弃）"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E6%8D%A2%E8%A1%8C%E6%A0%87%E7%AD%BE-br-%EF%BC%88%E5%B7%B2%E5%BA%9F%E5%BC%83%EF%BC%89">#</a>换行标签<code>&lt;br&gt;</code>（已废弃）</h3><p>当你打算结束一行，而又不想开始一个新段落时，<code>&lt;br&gt;</code>标签就派上用场了。无论你将它置于何处，<code>&lt;br&gt;</code>标签都会产生一个强制的换行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">This <span class="tag">&lt;<span class="name">br</span>&gt;</span> is a para<span class="tag">&lt;<span class="name">br</span>&gt;</span>graph with line breaks</span><br></pre></td></tr></table></figure>


<p>效果如下：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html03.png" alt="img"></p>
<p>上图显示，**<code>&lt;p&gt;</code>标签和<code>&lt;br&gt;</code>标签的区别在于**：<code>&lt;p&gt;</code>标签会在段落的前后自动插入一个空行，而<code>&lt;br&gt;</code>标签没有空行；而且<code>&lt;br&gt;</code>标签没有属性。</p>
<p>注意<code>&lt;br&gt;</code> 没有结束标签，把<code>&lt;br&gt;</code>标签写为 <code>&lt;br/&gt;</code> 是经得起未来考验的做法，XHTML 和 XML 都接受在打开的标签内部来关闭标签的做法。</p>
<h3 id="水平线标签-lt-hr-gt-（已废弃）"><a href="#水平线标签-lt-hr-gt-（已废弃）" class="headerlink" title="#水平线标签&lt;hr&gt;（已废弃）"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E6%B0%B4%E5%B9%B3%E7%BA%BF%E6%A0%87%E7%AD%BE-hr-%EF%BC%88%E5%B7%B2%E5%BA%9F%E5%BC%83%EF%BC%89">#</a>水平线标签<code>&lt;hr&gt;</code>（已废弃）</h3><p>水平分隔线（horizontal rule）可以在视觉上将文档分隔成各个部分。 效果如下：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_04.png" alt="Paste_Image.png"></p>
<p>属性：</p>
<ul>
<li><code>align=&quot;属性值&quot;</code>：设定线条置放位置。属性值可选择：left right center。</li>
<li><code>size=&quot;2&quot;</code>：设定线条粗细。以像素为单位，内定为2。</li>
<li><code>width=&quot;500&quot;</code>或<code>width=&quot;70%&quot;</code>：设定线条长度。可以是绝对值（单位是像素）或相对值。如果设置为相对值的话，内定为100%。</li>
<li><code>color=&quot;#0000FF&quot;</code>：设置线条颜色。</li>
<li><code>noshade</code>：不要阴影，即设定线条为平面显示。若没有这个属性则表明线条具阴影或立体，这是内定值。 属性效果演示：</li>
</ul>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_05.png" alt="Paste_Image.png"></p>
<h3 id="内容居中标签-lt-center-gt"><a href="#内容居中标签-lt-center-gt" class="headerlink" title="#内容居中标签 &lt;center&gt;"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E5%86%85%E5%AE%B9%E5%B1%85%E4%B8%AD%E6%A0%87%E7%AD%BE-center">#</a>内容居中标签 <code>&lt;center&gt;</code></h3><p>此时center代表是一个标签，而不是一个属性值了。只要是在这个标签里面的内容，都会居于浏览器的中间。 效果演示：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_06.png" alt="Paste_Image.png"></p>
<p>到了H5里面，center标签不建议使用。</p>
<h3 id="预定义（预格式化）标签：-lt-pre-gt"><a href="#预定义（预格式化）标签：-lt-pre-gt" class="headerlink" title="#预定义（预格式化）标签：&lt;pre&gt;"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E9%A2%84%E5%AE%9A%E4%B9%89%EF%BC%88%E9%A2%84%E6%A0%BC%E5%BC%8F%E5%8C%96%EF%BC%89%E6%A0%87%E7%AD%BE%EF%BC%9A-pre">#</a>预定义（预格式化）标签：<code>&lt;pre&gt;</code></h3><p>含义：将保留其中的所有的空白字符(空格、换行符)，原封不动的输出结果（告诉浏览器不要忽略空格和空行） 说明：真正排网页过程中，<code>&lt;pre&gt;</code>标签几乎用不着。但在PHP中用于打印一个数组时使用。</p>
<p>效果演示：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_07.png" alt="Paste_Image.png"></p>
<p>上图中，好像红框部分的字体变小了，而且还出现了缩进，好吧， 这个其实是浏览器搞的鬼。 为什么要有<code>&lt;pre&gt;</code>这个标签呢？答案是：</p>
<blockquote>
<p>所有的浏览器默认情况下都会忽略空格和空行。</p>
</blockquote>
<p>好吧，其实这个标签也用的比较少。</p>
<h2 id="二、字体标签"><a href="#二、字体标签" class="headerlink" title="#二、字体标签"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E4%BA%8C%E3%80%81%E5%AD%97%E4%BD%93%E6%A0%87%E7%AD%BE">#</a>二、字体标签</h2><h3 id="标题"><a href="#标题" class="headerlink" title="#标题"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E6%A0%87%E9%A2%98">#</a>标题</h3><p>标题使用<code>&lt;h1&gt;</code>至<code>&lt;h6&gt;</code>标签进行定义。<code>&lt;h1&gt;</code>定义最大的标题，<code>&lt;h6&gt;</code>定义最小的标题。具有align属性，属性值可以是：left、center、right。 效果演示：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_09.png" alt="Paste_Image.png"></p>
<h3 id="字体标签-lt-font-gt-（已废弃）"><a href="#字体标签-lt-font-gt-（已废弃）" class="headerlink" title="#字体标签&lt;font&gt;（已废弃）"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E5%AD%97%E4%BD%93%E6%A0%87%E7%AD%BE-font-%EF%BC%88%E5%B7%B2%E5%BA%9F%E5%BC%83%EF%BC%89">#</a>字体标签<code>&lt;font&gt;</code>（已废弃）</h3><p>属性：</p>
<ul>
<li><code>color=&quot;红色&quot;</code>或<code>color=&quot;#ff00cc&quot;</code>或<code>color=&quot;new rgb(0,0,255)&quot;</code>：设置字体颜色。 设置方式：单词 \ #ff00cc \ rgb(0,0,255)</li>
<li><code>size</code>：设置字体大小。 取值范围只能是：1至7。取值时，如果取值大于7那就按照7来算，如果取值小于1那就按照1来算。如果想要更大的字体，那就只能通过css样式来解决。 设置：用’+2’代表值是5 或直接给值</li>
<li><code>face=&quot;微软雅黑&quot;</code>：设置字体类型。注意在写字体时，“微软雅黑”这个字不能写错。 举例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#FF0000&quot;</span> <span class="attr">size</span>=<span class="string">&quot;10&quot;</span>&gt;</span>vae<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_10.png" alt="Paste_Image.png"></p>
<h3 id="特殊字符（转义字符）"><a href="#特殊字符（转义字符）" class="headerlink" title="#特殊字符（转义字符）"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%EF%BC%88%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%EF%BC%89">#</a>特殊字符（转义字符）</h3><ul>
<li><code> </code>：空格 （non-breaking spacing，不断打空格）</li>
<li><code>&lt;</code>：小于号（less than）</li>
<li><code>&gt;</code>：大于号（greater than）</li>
<li><code>&amp;</code>：符号<code>&amp;</code></li>
<li><code>&quot;</code>：双引号</li>
<li><code>&#39;</code>：单引号</li>
<li><code>©</code>：版权<code>©</code></li>
<li><code>™</code>：商标<code>™</code></li>
<li><code>绐</code>：文字<code>绐</code>。其实，<code>#32464</code>是汉字<code>绐</code>的unicode编码。</li>
</ul>
<p>要求背诵的特殊字符有：<code> </code>、<code>&lt;</code>、<code>&gt;</code>、<code>©</code>。</p>
<p>比如说，你想把<code>&lt;p&gt;</code>作为一个文本在页面上显示，直接写<code>&lt;p&gt;</code>是肯定不行的，因为这代表的是一个段落标签，所以这里需要用到<strong>转义字符</strong>。应该这么写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">这是一个HTML语言的<span class="symbol">&amp;lt;</span>p<span class="symbol">&amp;gt;</span>标签</span><br></pre></td></tr></table></figure>

<p>1</p>
<p>正确的效果如下：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_11.png" alt="Paste_Image.png"></p>
<p>错误的效果如下：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_12.png" alt="Paste_Image.png"></p>
<p>其实我们只要记住前三个符号就行了，其他的在需要的时候查一下就行了。而且，EditPlus软件中是可以直接点击这些符号进行选择的：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_13.png" alt="Paste_Image.png"></p>
<p>来一张表格，方便需要的时候查询：</p>
<table>
<thead>
<tr>
<th align="left">特殊字符</th>
<th align="left">描述</th>
<th align="left">字符的代码</th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left">空格符</td>
<td align="left"><code> </code></td>
</tr>
<tr>
<td align="left">&lt;</td>
<td align="left">小于号</td>
<td align="left"><code>&lt;</code></td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">大于号</td>
<td align="left"><code>&gt;</code></td>
</tr>
<tr>
<td align="left">&amp;</td>
<td align="left">和号</td>
<td align="left"><code>&amp;</code></td>
</tr>
<tr>
<td align="left">￥</td>
<td align="left">人民币</td>
<td align="left"><code>¥</code></td>
</tr>
<tr>
<td align="left">©</td>
<td align="left">版权</td>
<td align="left"><code>©</code></td>
</tr>
<tr>
<td align="left">®</td>
<td align="left">注册商标</td>
<td align="left"><code>®</code></td>
</tr>
<tr>
<td align="left">°</td>
<td align="left">摄氏度</td>
<td align="left"><code>°</code></td>
</tr>
<tr>
<td align="left">±</td>
<td align="left">正负号</td>
<td align="left"><code>±</code></td>
</tr>
<tr>
<td align="left">×</td>
<td align="left">乘号</td>
<td align="left"><code>×</code></td>
</tr>
<tr>
<td align="left">÷</td>
<td align="left">除号</td>
<td align="left"><code>÷</code></td>
</tr>
<tr>
<td align="left">²</td>
<td align="left">平方2（上标2）</td>
<td align="left"><code>²</code></td>
</tr>
<tr>
<td align="left">³</td>
<td align="left">立方3（上标3）</td>
<td align="left"><code>³</code></td>
</tr>
</tbody></table>
<h3 id="一些小标签-小标记"><a href="#一些小标签-小标记" class="headerlink" title="#一些小标签/小标记"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%A0%87%E7%AD%BE-%E5%B0%8F%E6%A0%87%E8%AE%B0">#</a>一些小标签/小标记</h3><ul>
<li><code>&lt;u&gt;</code>：下划线标记</li>
<li><code>&lt;s&gt;</code>或<code>&lt;del&gt;</code>：中划线标记（删除线）</li>
<li><code>&lt;i&gt;</code>或<code>&lt;em&gt;</code>：斜体标记</li>
</ul>
<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_15.png" alt="Paste_Image.png"></p>
<p>上面的这几个标签，常用于做一些小装饰、小图标。比如：</p>
<p>20180118_2340.png</p>
<p>这张图中，我们通过查看京东网站的代码发现，箭头处的小图标都是用的标签<code>&lt;i&gt;</code>。</p>
<p>div的主要目的是用来布局，而小装饰却可以用来</p>
<h3 id="粗体标签-lt-b-gt-或-lt-strong-gt-（已废弃）"><a href="#粗体标签-lt-b-gt-或-lt-strong-gt-（已废弃）" class="headerlink" title="#粗体标签&lt;b&gt;或&lt;strong&gt;（已废弃）"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E7%B2%97%E4%BD%93%E6%A0%87%E7%AD%BE-b-%E6%88%96-strong-%EF%BC%88%E5%B7%B2%E5%BA%9F%E5%BC%83%EF%BC%89">#</a>粗体标签<code>&lt;b&gt;</code>或<code>&lt;strong&gt;</code>（已废弃）</h3><p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_14.png" alt="Paste_Image.png"></p>
<h3 id="上标-lt-sup-gt-下标-lt-sub-gt"><a href="#上标-lt-sup-gt-下标-lt-sub-gt" class="headerlink" title="#上标&lt;sup&gt; 下标&lt;sub&gt;"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E4%B8%8A%E6%A0%87-sup-%E4%B8%8B%E6%A0%87-sub">#</a>上标<code>&lt;sup&gt;</code> 下标<code>&lt;sub&gt;</code></h3><p>上小标这两个标签容易混淆，怎么记呢？这样记：<code>b</code>的意思是<code>bottom：底部</code> 举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">O<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span>    5<span class="tag">&lt;<span class="name">sub</span>&gt;</span>3<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_16.png" alt="Paste_Image.png"></p>
<h2 id="三、超链接"><a href="#三、超链接" class="headerlink" title="#三、超链接"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E4%B8%89%E3%80%81%E8%B6%85%E9%93%BE%E6%8E%A5">#</a>三、超链接</h2><p>超链接有三种形式：</p>
<p><strong>1、外部链接</strong>：链接到外部文件。举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;02页面.html&quot;</span>&gt;</span>点击进入另外一个文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>a是英语<code>anchor</code>“锚”的意思，就好像这个页面往另一个页面扔出了一个锚。是一个文本级的标签。</p>
<p>href是英语<code>hypertext reference</code>超文本地址的缩写。读作“喝瑞夫”，不要读作“喝夫”。</p>
<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_17.png" alt="Paste_Image.png"></p>
<p>当然，我们也可以直接点进链接，访问一个网址。举例如下；</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot;&gt;点我点我&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>1</p>
<p><strong>2、锚链接</strong>： 指给超链接起一个名字，作用是<strong>在本页面或者其他页面的的不同位置进行跳转</strong>。比如说，在网页底部有一个向上箭头，点击箭头后回到顶部，这个就是利用到了锚链接。 首先我们要创建一个<strong>锚点</strong>，也就是说，使用<code>name</code>属性或者<code>id</code>属性给那个特定的位置起个名字。效果如下：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_18.png" alt="Paste_Image.png"></p>
<p>上图中解释：</p>
<p>11行代码表示，顶部这个锚的名字叫做name1。 然后在底部设置超链接，点击时将回到顶部（此时，网页中的url的末尾也出现了<code>#name1</code>）。注意<strong>上图中红框部分的<code>#</code>号不要忘记了</strong>，表示跳到名为name1的特定位置，这是规定。如果少了<code>#</code>号，点击之后，就会跳到name1这个文件或者name1这个文件夹中去。</p>
<p>如果我们将上图中的第28行代码写成：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;a.html#name1&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>那就表示，点击之后，跳转到<code>a.html</code>页面的<code>name1锚点</code>中去。</p>
<p>说明：name属性是HTML4.0以前使用的，id属性是HTML4.0后才开始使用。为了向前兼容，因此，name和id这两个属性都要写上，并且值是一样的。</p>
<p><strong>3、邮件链接</strong>： 代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:smyhvae@163.com&quot;</span>&gt;</span>点击进入我的邮箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>效果：点击之后，会弹出outlook，作用不大。</p>
<h3 id="超链接的属性"><a href="#超链接的属性" class="headerlink" title="#超链接的属性"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E8%B6%85%E9%93%BE%E6%8E%A5%E7%9A%84%E5%B1%9E%E6%80%A7">#</a>超链接的属性</h3><ul>
<li><p><code>href</code>：目标URL</p>
</li>
<li><p><code>title</code>：悬停文本。</p>
</li>
<li><p><code>name</code>：主要用于设置一个锚点的名称。</p>
</li>
<li><p>```<br>target</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">：告诉浏览器用什么方式来打开目标页面。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>target</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  属性有以下几个值：</span><br><span class="line"></span><br><span class="line">  - `_self`：在同一个网页中显示（默认值）</span><br><span class="line">  - `_blank`：**在新的窗口中打开**。</span><br><span class="line">  - `_parent`：在父窗口中显示</span><br><span class="line">  - `_top`：在顶级窗口中显示</span><br><span class="line"></span><br><span class="line">`title`属性举例：</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;a href=&quot;09_img.html&quot; title=&quot;很好看哦&quot;&gt;结婚照&lt;/a&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>1</p>
<p>效果如下：</p>
<p><img src="http://img.smyhvae.com/20170630_1415.png" alt="img"></p>
<p><code>target</code>属性举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.html&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停文本&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>链接的内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>blank就是“空白”的意思，就表示新建一个空白窗口。为啥有一个_ ，就是规定，没啥好解释的。 也就是说，如果不写<code>target=”_blank”</code>那么就是在相同的标签页打开，如果写了<code>target=”_blank”</code>，就是在新的空白标签页中打开。</p>
<h4 id="备注1：分清楚img和a标签的各自的属性"><a href="#备注1：分清楚img和a标签的各自的属性" class="headerlink" title="#备注1：分清楚img和a标签的各自的属性"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E5%A4%87%E6%B3%A81%EF%BC%9A%E5%88%86%E6%B8%85%E6%A5%9Aimg%E5%92%8Ca%E6%A0%87%E7%AD%BE%E7%9A%84%E5%90%84%E8%87%AA%E7%9A%84%E5%B1%9E%E6%80%A7">#</a>备注1：分清楚img和a标签的各自的属性</h4><p>区别如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1<br>2</p>
<h4 id="备注2：a是一个文本级的标签"><a href="#备注2：a是一个文本级的标签" class="headerlink" title="#备注2：a是一个文本级的标签"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E5%A4%87%E6%B3%A82%EF%BC%9Aa%E6%98%AF%E4%B8%80%E4%B8%AA%E6%96%87%E6%9C%AC%E7%BA%A7%E7%9A%84%E6%A0%87%E7%AD%BE">#</a>备注2：a是一个文本级的标签</h4><p>比如一个段落中的所有文字都能够被点击，那么应该是p包裹a：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>段落段落段落段落段落段落<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>而不是a包裹p：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">		段落段落段落段落段落段落</span><br><span class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>a的语义要小于p，a就是可以当做文本来处理，所以p里面相当于放的就是纯文字。</p>
<h2 id="四、图片标签"><a href="#四、图片标签" class="headerlink" title="#四、图片标签"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E5%9B%9B%E3%80%81%E5%9B%BE%E7%89%87%E6%A0%87%E7%AD%BE">#</a>四、图片标签</h2><p>img: 代表的就是一张图片。是单边标记。</p>
<p>img是自封闭标签，也称为单标签。</p>
<h4 id="能插入的图片类型："><a href="#能插入的图片类型：" class="headerlink" title="#能插入的图片类型："></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E8%83%BD%E6%8F%92%E5%85%A5%E7%9A%84%E5%9B%BE%E7%89%87%E7%B1%BB%E5%9E%8B%EF%BC%9A">#</a>能插入的图片类型：</h4><ul>
<li>能够插入的图片类型是：jpg(jpeg)、gif、png、bmp等。</li>
<li>不能往网页中插入的图片格式是：psd、ai</li>
</ul>
<blockquote>
<p>HTML页面不是直接插入图片，而是插入图片的引用地址，所以要先把图片上传到服务器上。</p>
</blockquote>
<h3 id="src属性：图片的相对路径和绝对路径"><a href="#src属性：图片的相对路径和绝对路径" class="headerlink" title="#src属性：图片的相对路径和绝对路径"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#src%E5%B1%9E%E6%80%A7%EF%BC%9A%E5%9B%BE%E7%89%87%E7%9A%84%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%92%8C%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84">#</a><code>src</code>属性：图片的相对路径和绝对路径</h3><p>这里涉及到图片的一个属性：</p>
<ul>
<li><code>src</code>属性：指图片的路径。</li>
</ul>
<p>在写<strong>图片的路径</strong>时，有两种写法：相对路径、绝对路径</p>
<h4 id="1、写法一：相对路径"><a href="#1、写法一：相对路径" class="headerlink" title="#1、写法一：相对路径"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#_1%E3%80%81%E5%86%99%E6%B3%95%E4%B8%80%EF%BC%9A%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84">#</a>1、<strong>写法一：相对路径</strong></h4><p>相对当前页面所在的路径。两个标记 <code>.</code> 和 <code>..</code> 分表代表当前目录和上一层路径。</p>
<p>举例1：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当前目录中的图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;2.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;.\2.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上一级目录中的图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;..\2.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>img 是image“图片”的简写，src 是英语source“资源”的缩写。</p>
<p>相对路径不会出现这种情况：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">aaa/../bbb/1.jpg</span><br></pre></td></tr></table></figure>


<p><code>../</code>要么不写，要么就写在开头。</p>
<p>举例2：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>上方代码的意思是说，当前html页面有一个并列的文件夹<code>images</code>，在文件夹<code>images</code>中存放了一张图片<code>1.jpg</code> 效果：</p>
<p><img src="http://img.smyhvae.com/20151001_19.jpg" alt="Paste_Image.png"></p>
<p>相对路径的面试题。现有如下文件层级图：</p>
<p><img src="http://img.smyhvae.com/20170630_1133.png" alt="img"></p>
<p>问题：如果想在index.html中插入1.png，那么对应的img语句是？</p>
<p>分析：</p>
<p>现在document是最大的文件夹，里面有两个文件夹work和photo。work中又有一个文件夹叫做myweb。myweb文件夹里面有index.html。 所以index.html在myweb文件夹里面，上一级就是work文件夹，上两级就是document文件夹。通过document文件夹当做一个中转站，进入photo文件夹，看到了1.png。</p>
<p>答案：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../photo/1.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<h4 id="2、写法二：绝对路径"><a href="#2、写法二：绝对路径" class="headerlink" title="#2、写法二：绝对路径"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#_2%E3%80%81%E5%86%99%E6%B3%95%E4%BA%8C%EF%BC%9A%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84">#</a>2、写法二：<strong>绝对路径</strong></h4><p>绝对路径包括以下两种：</p>
<p>（1）以盘符开始的绝对路径。举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;C:\Users\qianguyihao\Desktop\html\images\1.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>（2）网络路径。举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://img.smyhvae.com/20200122_200901.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1<br>2</p>
<p>大家打开上面的img中的链接，可能有惊喜哦。</p>
<h3 id="相对路径和绝对路径的总结"><a href="#相对路径和绝对路径的总结" class="headerlink" title="#相对路径和绝对路径的总结"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%92%8C%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%9A%84%E6%80%BB%E7%BB%93">#</a>相对路径和绝对路径的总结</h3><p>相对路径的好处：站点不管拷贝到哪里，文件和图片的相对路径关系都是不变的。 相对路径使用有一个前提，就是网页文件和你的图片，必须在一个服务器上。</p>
<p>问题：我的网页在C盘，图片却在D盘，能不能插入呢？</p>
<p>答案： 用相对路径不能，用绝对路径也不能。</p>
<p>注意：可以使用file://来插入，但是这种方法，没有任何意义！因为服务器上没有所谓c盘、d盘。</p>
<p>下面的方法是行的，但是没有任何工程上的意义，这是因为服务器没有盘符，linux系统没有盘符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;file://C:\Users\Danny\Pictures\明星\1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>总结一下：</p>
<ul>
<li>我们现在无论是在a标签、img标签，如果要用路径。只有两种路径能用，就是相对路径和绝对路径。</li>
<li>相对路径，就是../ image/ 这种路径。从自己出发，找到别人；</li>
<li>绝对路径，就是http://开头的路径。</li>
<li>绝对不允许使用file://开头的东西，这个是完全错误的！</li>
</ul>
<h3 id="img标签的其他属性"><a href="#img标签的其他属性" class="headerlink" title="#img标签的其他属性"></a><a href="blog/web/base/html/04-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.html#img%E6%A0%87%E7%AD%BE%E7%9A%84%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7">#</a>img标签的其他属性</h3><ul>
<li><code>width</code>：宽度</li>
<li><code>height</code>：高度</li>
<li><code>Align</code>（已废弃）：指图片的水平对齐方式，属性值可以是：top、middle、bottom、left、center、right。该属性已废弃，替换为 <code>vertical-align</code>这个CSS属性。</li>
<li><code>title</code>：<strong>提示性文本</strong>。公有属性。也就是鼠标悬停时出现的文本。</li>
<li><code>border</code>（已废弃）：给图片加边框，单位是像素，边框的颜色默认黑色。该属性已废弃，替换为 <code>border</code>这个CSS属性。</li>
<li><code>Hspace</code>（已废弃）：指图片左右的边距。</li>
<li><code>Vspace</code>（已废弃）：指图片上下的边距。</li>
<li><code>alt</code>：当图片不可用（无法显示）的时候，代替图片显示的内容。alt是英语 alternate “替代”的意思，代表替换资源。（有的浏览器不支持）</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;`188&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是美女&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_20.png" alt="Paste_Image.png"></p>
<p><code>Alt</code>属性效果演示：（当图片 src 不可用的时候，显示文字。这样做，至少能让用户知道，这个图片大概是什么内容）</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_21.png" alt="Paste_Image.png"></p>
<ul>
<li>图片的<code>align</code>属性：<strong>图片和周围文字的相对位置</strong>。属性取值可以是：bottom（默认）、center、top、left、right。 我们来分别看一下这<code>align</code>属性的这几个属性值的区别。</li>
</ul>
<p>1、<code>align=&quot;&quot;</code>，图片和文字低端对齐。即默认情况下的显示效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_19.png" alt="img"></p>
<p>2、<code>align=&quot;center&quot;</code>：图片和文字水平方向上居中对齐。显示效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_21.png" alt="img"></p>
<p>3、<code>align=&quot;top&quot;</code>：图片与文字顶端对齐。显示效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_22.png" alt="img"></p>
<p>4、<code>align=&quot;left&quot;</code>：图片在文字的左边。显示效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_23.png" alt="img"></p>
<p>5、<code>align=&quot;right&quot;</code>：图片在文字的右边。显示效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_24.png" alt="img"></p>
<p><strong>注意事项：</strong> （1）如果要想保证图片等比例缩放，请只设置width和height中其中一个。 （2）如果想实现图文混排的效果，请使用align属性，取值为left或right。</p>
<p>最后，送上妹子的近照一张。楼主已经仁至义尽了：<a href="http://img.smyhvae.com/2015-10-01-cnblogs_html_20150219214912_11994.jpg">http://img.smyhvae.com/2015-10-01-cnblogs_html_20150219214912_11994.jpg</a></p>
<p>怎么？还没看够？且看下文：HTML标签—-图文详解（二）</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>05-HTML标签图文详解二</title>
    <url>/liuqi_blogs/2021/09/18/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="05-HTML标签图文详解（二）"><a href="#05-HTML标签图文详解（二）" class="headerlink" title="05-HTML标签图文详解（二）"></a>05-HTML标签图文详解（二）</h1><h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="#本文主要内容"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E6%9C%AC%E6%96%87%E4%B8%BB%E8%A6%81%E5%86%85%E5%AE%B9">#</a>本文主要内容</h2><ul>
<li>列表标签：<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;dl&gt;</code></li>
<li>表格标签：<code>&lt;table&gt;</code></li>
<li>框架标签及内嵌框架<code>&lt;iframe&gt;</code></li>
<li>表单标签：<code>&lt;form&gt;</code></li>
<li>多媒体标签</li>
<li>滚动字幕标签：<code>&lt;marquee&gt;</code></li>
</ul>
<span id="more"></span>

<h2 id="列表标签"><a href="#列表标签" class="headerlink" title="#列表标签"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E5%88%97%E8%A1%A8%E6%A0%87%E7%AD%BE">#</a>列表标签</h2><p>列表标签分为三种。</p>
<h3 id="1、无序列表-lt-ul-gt-，无序列表中的每一项是-lt-li-gt"><a href="#1、无序列表-lt-ul-gt-，无序列表中的每一项是-lt-li-gt" class="headerlink" title="#1、无序列表&lt;ul&gt;，无序列表中的每一项是&lt;li&gt;"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#_1%E3%80%81%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8-ul-%EF%BC%8C%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%AF%8F%E4%B8%80%E9%A1%B9%E6%98%AF-li">#</a>1、无序列表<code>&lt;ul&gt;</code>，无序列表中的每一项是<code>&lt;li&gt;</code></h3><p>英文单词解释如下：</p>
<ul>
<li>ul：unordered list，“无序列表”的意思。</li>
<li>li：list item，“列表项”的意思。</li>
</ul>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>默认1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>默认2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>默认3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_01.png" alt="img"></p>
<p>注意：</p>
<ul>
<li>li不能单独存在，必须包裹在ul里面；反过来说，ul的“儿子”不能是别的东西，只能有li。</li>
<li>我们这里再次强调，ul的作用，并不是给文字增加小圆点的，而是增加无序列表的“语义”的。</li>
</ul>
<p><strong>属性：</strong></p>
<ul>
<li><code>type=&quot;属性值&quot;</code>。属性值可以选： <code>disc</code>(实心原点，默认)，<code>square</code>(实心方点)，<code>circle</code>(空心圆)。 效果如下：</li>
</ul>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_02_1.png" alt="img"></p>
<p>不光是<code>&lt;ul&gt;</code>标签有<code>type</code>属性，<code>&lt;ul&gt;</code>里面的<code>&lt;li&gt;</code>标签也有<code>type</code>属性（虽然说这种写法很少见）。效果如下：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_03.png" alt="img"></p>
<p>注意：项目符号可以是图片，需要通过CSS设置<code>&lt;li&gt;</code>标记的背景图片来实现(CSS中讲)。</p>
<p>当然了，列表之间是可以<strong>嵌套</strong>的。我们来举个例子。代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>北京市<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>海淀区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>朝阳区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>东城区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>广州市<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>天河区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>越秀区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-01-cnblogs_html_40.png" alt="img"></p>
<p><strong>css 属性</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">list-style-position</span>: inside   <span class="comment">/* 给 ul 设置这个属性后，将小圆点包含在 li 元素的内部 */</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<h4 id="ul标签实际应用场景："><a href="#ul标签实际应用场景：" class="headerlink" title="#ul标签实际应用场景："></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#ul%E6%A0%87%E7%AD%BE%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9A">#</a>ul标签实际应用场景：</h4><p>场景1、导航条：</p>
<p><img src="assets/img/image-20200329233932717.ad888738.png" alt="image-20200329233932717"></p>
<p>场景2、li 里面放置的内容可能很多：</p>
<p><img src="http://img.smyhvae.com/20170704_1719.png" alt="img"></p>
<p>声明：ul的儿子，只能是li。但是li是一个容器级标签，<strong>li里面什么都能放，甚至可以再放一个ul</strong>。</p>
<h3 id="2、有序列表-lt-OL-gt-，里面的每一项是-lt-li-gt"><a href="#2、有序列表-lt-OL-gt-，里面的每一项是-lt-li-gt" class="headerlink" title="#2、有序列表&lt;OL&gt;，里面的每一项是&lt;li&gt;"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#_2%E3%80%81%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8-ol-%EF%BC%8C%E9%87%8C%E9%9D%A2%E7%9A%84%E6%AF%8F%E4%B8%80%E9%A1%B9%E6%98%AF-li">#</a>2、有序列表<code>&lt;OL&gt;</code>，里面的每一项是<code>&lt;li&gt;</code></h3><p>英文单词：Ordered List。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> &gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>呵呵哒1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>呵呵哒2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>呵呵哒3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_04.png" alt="img"></p>
<p><strong>属性：</strong></p>
<ul>
<li><code>type=&quot;属性值&quot;</code>。属性值可以是：1(阿拉伯数字，默认)、a、A、i、I。结合<code>start</code>属性表示<code>从几开始</code>。</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>呵呵<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>呵呵<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>呵呵<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>嘿嘿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>嘿嘿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>呵呵<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;i&quot;</span> <span class="attr">start</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;I&quot;</span> <span class="attr">start</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>么么<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>么么<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>么么<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>效果如下： <img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_07.png" alt="img"></p>
<p>和无序列表一样，有序列表也是可以嵌套的哦，这里就不举类似的例子了。</p>
<p>ol和ul就是语义不一样，怎么使用都是一样的。 ol里面只能有li，li必须被ol包裹。li是容器级。</p>
<p>ol这个东西用的不多，如果想表达顺序，大家一般也用ul。举例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>1. 小苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>2. 月亮之上<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>3. 最炫民族风<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="3、定义列表-lt-dl-gt"><a href="#3、定义列表-lt-dl-gt" class="headerlink" title="#3、定义列表&lt;dl&gt;"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#_3%E3%80%81%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8-dl">#</a>3、定义列表<code>&lt;dl&gt;</code></h3><blockquote>
<p>定义列表的作用非常大。</p>
</blockquote>
<p><code>&lt;dl&gt;</code>英文单词：definition list，没有属性。dl的子元素只能是dt和dd。</p>
<ul>
<li><code>&lt;dt&gt;</code>：definition title 列表的标题，这个标签是必须的</li>
<li><code>&lt;dd&gt;</code>：definition description 列表的列表项，如果不需要它，可以不加</li>
</ul>
<p>备注：dt、dd只能在dl里面；dl里面只能有dt、dd。</p>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>第一条<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>你若是觉得你有实力和我玩，良辰不介意奉陪到底<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>我会让你明白，我从不说空话<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>我是本地的，我有一百种方式让你呆不下去；而你，无可奈何<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>第二条<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>良辰最喜欢对那些自认能力出众的人出手<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>你可以继续我行我素，不过，你的日子不会很舒心<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>你只要记住，我叫叶良辰<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>不介意陪你玩玩<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>良辰必有重谢<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_09.png" alt="img"></p>
<p>上图可以看出，定义列表表达的语义是两层：</p>
<ul>
<li>（1）是一个列表，列出了几个dd项目</li>
<li>（2）每一个词儿都有自己的描述项。</li>
</ul>
<p>备注：dd是描述dt的。</p>
<p>定义列表用法非常灵活，可以一个dt配很多dd：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>国家首都，政治文化中心<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>污染很严重，PM2.0天天报表<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>魔都，有外滩、东方明珠塔、黄浦江<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>中国南大门，有珠江、小蛮腰<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>还可以拆开，让每一个dl里面只有一个dt和dd，这样子感觉清晰一些：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>国家首都，政治文化中心<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>污染很严重，PM2.0天天报表<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>魔都，有外滩、东方明珠塔、黄浦江<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>中国南大门，有珠江、小蛮腰<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>真实案例：（京东最下方）</p>
<p><img src="http://img.smyhvae.com/20170704_1727.png" alt="img"></p>
<p>上图中的结构如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>购物指南<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>购物流程<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>会员介绍<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>生活旅行/团购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>常见问题<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>大家电<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>联系客服<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>配送方式<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>上门自提<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>211限时达<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>配送服务查询<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>配送费收取标准<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>海外配送<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>京东商品分类如下：</p>
<p><img src="http://img.smyhvae.com/20170704_1729.png" alt="img"></p>
<p>dt、dd都是容器级标签，想放什么都可以。所以，现在就应该更加清晰的知道：用什么标签，不是根据样子来决定，而是语义（语义本质上是结构）。</p>
<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="#表格标签"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E8%A1%A8%E6%A0%BC%E6%A0%87%E7%AD%BE">#</a>表格标签</h2><p>表格标签用<code>&lt;table&gt;</code>表示。 一个表格<code>&lt;table&gt;</code>是由每行<code>&lt;tr&gt;</code>组成的，每行是由每个单元格<code>&lt;td&gt;</code>组成的。 所以我们要记住，一个表格是由行组成的（行是由列组成的），而不是由行和列组成的。 在以前，要想固定标签的位置，唯一的方法就是表格。现在可以通过CSS定位的功能来实现。但是现在在做页面的时候，表格作用还是有一些的。</p>
<p>例如，一行的单元格：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>上面的表格中没有加文字，所以在生成的网页中什么都看不到。 例如，3行4列的单元格：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>生命壹号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>黄冈<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>许嵩<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>29<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>安徽<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>邓紫棋<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>香港<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_10.png" alt="img"></p>
<p>上图中的表格好像没看到边框呀，不急，接下来看看<code>&lt;table&gt;</code>标签的属性。</p>
<table>的属性：

<ul>
<li><code>border</code>：边框。像素为单位。</li>
<li><code>style=&quot;border-collapse:collapse;&quot;</code>：单元格的线和表格的边框线合并（表格的两边框合并为一条）</li>
<li><code>width</code>：宽度。像素为单位。</li>
<li><code>height</code>：高度。像素为单位。</li>
<li><code>bordercolor</code>：表格的边框颜色。</li>
<li><code>align</code>：<strong>表格</strong>的水平对齐方式。属性值可以填：left right center。 注意：这里不是设置表格里内容的对齐方式，如果想设置内容的对齐方式，要对单元格标签<code>&lt;td&gt;</code>进行设置）</li>
<li><code>cellpadding</code>：单元格内容到边的距离，像素为单位。默认情况下，文字是紧挨着左边那条线的，即默认情况下的值为0。 注意不是单元格内容到四条边的距离哈，而是到一条边的距离，默认是与左边那条线的距离。如果设置属性<code>dir=&quot;rtl&quot;</code>，那就指的是内容到右边那条线的距离。</li>
<li><code>cellspacing</code>：单元格和单元格之间的距离（外边距），像素为单位。默认情况下的值为0</li>
<li><code>bgcolor=&quot;#99cc66&quot;</code>：表格的背景颜色。</li>
<li><code>background=&quot;路径src/...&quot;</code>：背景图片。 背景图片的优先级大于背景颜色。</li>
<li><code>bordercolorlight</code>：表格的上、左边框，以及单元格的右、下边框的颜色</li>
<li><code>bordercolordark</code>：表格的右、下边框，以及单元格的上、左的边框的颜色 这两个属性的目的是为了设置3D的效果。</li>
<li><code>dir</code>：公有属性，单元格内容的排列方式(direction)。 可以 取值：<code>ltr</code>：从左到右（left to right，默认），<code>rtl</code>：从右到左（right to left） 既然说<code>dir</code>是共有属性，如果把这个属性放在任意标签中，那表明这个标签的位置可能会从右开始排列。</li>
</ul>
<p>单元格带边框的效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_11.png" alt="img"></p>
<p>备注：表格中很细表格边线的制作，CSS的写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">style=&quot;<span class="attribute">border-collapse</span>:collapse;&quot;</span><br></pre></td></tr></table></figure>

<p>1</p>
<h3 id="lt-tr-gt-：行"><a href="#lt-tr-gt-：行" class="headerlink" title="#&lt;tr&gt;：行"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#tr-%EF%BC%9A%E8%A1%8C">#</a><code>&lt;tr&gt;</code>：行</h3><p>一个表格就是一行一行组成的。</p>
<p><strong>属性：</strong></p>
<ul>
<li>```<br>dir<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ：公有属性，设置这一行单元格内容的排列方式。可以取值：</span><br><span class="line"></span><br><span class="line">  - `ltr`：从左到右（left to right，默认）</span><br><span class="line">  - `rtl`：从右到左（right to left）</span><br><span class="line"></span><br><span class="line">- `bgcolor`：设置这一行的单元格的背景色。 注：没有background属性，即：无法设置这一行的背景图片，如果非要设置，可以用css实现。</span><br><span class="line"></span><br><span class="line">- `height`：一行的高度</span><br><span class="line"></span><br><span class="line">- `align=&quot;center&quot;`：一行的内容水平居中显示，取值：left、center、right</span><br><span class="line"></span><br><span class="line">- `valign=&quot;center&quot;`：一行的内容垂直居中，取值：top、middle、bottom</span><br><span class="line"></span><br><span class="line">### [#](web/base/html/05-HTML标签图文详解（二）.html#td-：单元格)`&lt;td&gt;`：单元格</span><br><span class="line"></span><br><span class="line">**属性：**</span><br><span class="line"></span><br><span class="line">- `align`：内容的横向对齐方式。属性值可以填：left right center。如果想让每个单元格的内容都居中，这个属性太麻烦了，以后用css来解决。</span><br><span class="line">- `valign`：内容的纵向对齐方式。属性值可以填：top middle bottom</span><br><span class="line">- `width`：绝对值或者相对值(%)</span><br><span class="line">- `height`：单元格的高度</span><br><span class="line">- `bgcolor`：设置这个单元格的背景色。</span><br><span class="line">- `background`：设置这个单元格的背景图片。</span><br><span class="line"></span><br><span class="line">### [#](web/base/html/05-HTML标签图文详解（二）.html#单元格的合并)单元格的合并</span><br><span class="line"></span><br><span class="line">单元格的属性：</span><br><span class="line"></span><br><span class="line">- `colspan`：横向合并。例如`colspan=&quot;2&quot;`表示当前单元格在水平方向上要占据两个单元格的位置。</span><br><span class="line">- `rowspan`：纵向合并。例如`rowspan=&quot;2&quot;`表示当前单元格在垂直方向上要占据两个单元格的位置。</span><br><span class="line"></span><br><span class="line">效果举例：（横向合并）</span><br><span class="line"></span><br><span class="line">![img](http://img.smyhvae.com/2015-10-02-cnblogs_html_13.png)</span><br><span class="line"></span><br><span class="line">效果举例：（纵向合并）</span><br><span class="line"></span><br><span class="line">![img](http://img.smyhvae.com/2015-10-02-cnblogs_html_15.png)</span><br><span class="line"></span><br><span class="line">### [#](web/base/html/05-HTML标签图文详解（二）.html#th-：加粗的单元格。相当于-td-b)`&lt;th&gt;`：加粗的单元格。相当于`&lt;td&gt;` + `&lt;b&gt;`</span><br><span class="line"></span><br><span class="line">- 属性同`&lt;td&gt;`标签。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### [#](web/base/html/05-HTML标签图文详解（二）.html#caption-：表格的标题。使用时和tr标签并列)`&lt;caption&gt;`：表格的标题。使用时和`tr`标签并列</span><br><span class="line"></span><br><span class="line">- 属性：`align`，表示标题相对于表格的位置。属性取值可以是：left、center、right、top、bottom 效果：</span><br><span class="line"></span><br><span class="line">![img](http://img.smyhvae.com/2015-10-02-cnblogs_html_16.png)</span><br><span class="line"></span><br><span class="line">### [#](web/base/html/05-HTML标签图文详解（二）.html#表格的-thead-标签、-tbody-标签、-tfoot-标签)表格的`&lt;thead&gt;`标签、`&lt;tbody&gt;`标签、`&lt;tfoot&gt;`标签</span><br><span class="line"></span><br><span class="line">这三个标签有与没有的区别：</span><br><span class="line"></span><br><span class="line">- 1、如果写了，那么这三个部分的**代码顺序可以任意**，浏览器显示的时候还是按照thead、tbody、tfoot的顺序依次来显示内容。如果不写thead、tbody、tfoot，那么浏览器解析并显示表格内容的时候是从按照代码的从上到下的顺序来显示。</span><br><span class="line">- 2、当表格非常大内容非常多的时候，如果用thead、tbody、tfoot标签的话，那么**数据可以边获取边显示**。如果不写，则必须等表格的内容全部从服务器获取完成才能显示出来。</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"></span><br><span class="line">	&lt;table border=&quot;1&quot;&gt;</span><br><span class="line"></span><br><span class="line">		&lt;tbody&gt;</span><br><span class="line">		&lt;tr&gt;</span><br><span class="line">			&lt;td&gt;生命壹号&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;23&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;男&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;黄冈&lt;/td&gt;</span><br><span class="line">		&lt;/tr&gt;</span><br><span class="line">		&lt;/tbody&gt;</span><br><span class="line"></span><br><span class="line">		&lt;tfoot&gt;</span><br><span class="line">		&lt;tr&gt;</span><br><span class="line">			&lt;td&gt;许嵩&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;29&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;男&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;安徽&lt;/td&gt;</span><br><span class="line">		&lt;/tr&gt;</span><br><span class="line">		&lt;/tfoot&gt;</span><br><span class="line"></span><br><span class="line">		&lt;thead&gt;</span><br><span class="line">		&lt;tr&gt;</span><br><span class="line">			&lt;td&gt;邓紫棋&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;23&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;女&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;香港&lt;/td&gt;</span><br><span class="line">		&lt;/tr&gt;</span><br><span class="line">		&lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/body&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_17.png" alt="img"></p>
<h2 id="框架标签"><a href="#框架标签" class="headerlink" title="#框架标签"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E6%A1%86%E6%9E%B6%E6%A0%87%E7%AD%BE">#</a>框架标签</h2><p>如果我们希望在一个网页中显示多个页面，那框架标签就派上用场了。</p>
<blockquote>
<ul>
<li>注意，框架标签不能放在<code>&lt;body&gt;</code>标签里面，因为<code>&lt;body&gt;</code>标签代表的只是一个页面，而框架标签代表的是多个页面。于是：<code>&lt;frameset&gt;</code>和<code>&lt;body&gt;</code>只能二选一。</li>
<li>框架的集合用<code>&lt;frameset&gt;</code>表示，然后在<code>&lt;frameset&gt;</code>集合里放入一个一个的框架<code>&lt;frame&gt;</code></li>
</ul>
</blockquote>
<p><strong>补充</strong>：<code>frameset</code>和<code>frame</code>已经从 Web标准中删除，建议使用 iframe 代替。</p>
<h3 id="lt-frameset-gt-：框架的集合"><a href="#lt-frameset-gt-：框架的集合" class="headerlink" title="#&lt;frameset&gt;：框架的集合"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#frameset-%EF%BC%9A%E6%A1%86%E6%9E%B6%E7%9A%84%E9%9B%86%E5%90%88">#</a><code>&lt;frameset&gt;</code>：框架的集合</h3><p>一个框架的集合可以包含多个框架或框架的集合。<strong>属性：</strong></p>
<ul>
<li><code>rows</code>：水平分割，将框架分为上下部分。写法有两种：</li>
</ul>
<p>1、绝对值写法：<code>rows=&quot;200,*&quot;</code> 其中<code>*</code>代表剩余的。这里其实包含了两个框架：上面的框架占200个像素，下面的框架占剩下的部分。</p>
<p>2、相对值写法：<code>rows=&quot;30%,*&quot;</code> 其中<code>*</code>代表剩余的。这里其实包含了两个框架：上面的框架占30%，下面的框架占70%。</p>
<p>注：如果你想将框架分成很多行，在属性值里用逗号隔开就行了。</p>
<ul>
<li><code>cols</code>：垂直分割，将框架分为左右部分。写法有两种：</li>
</ul>
<p>1、绝对值写法：<code>cols=&quot;200,*&quot;</code> 其中<code>*</code>代表剩余的。这里其实包含了两个框架：左边的框架占200个像素，右边的框架占剩下的部分。</p>
<p>2、相对值写法：<code>cols=&quot;30%,*&quot;</code> 其中<code>*</code>代表剩余的。这里其实包含了两个框架：左边的框架占30%，右边的框架占70%。</p>
<p>注：如果你想将框架分成很多列，在属性值里用逗号隔开就行了。</p>
<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_26.png" alt="img"></p>
<p>上图中，如果删掉页面right.html，显示效果如下：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_27.png" alt="img"></p>
<h3 id="lt-frame-gt-：框架"><a href="#lt-frame-gt-：框架" class="headerlink" title="#&lt;frame&gt;：框架"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#frame-%EF%BC%9A%E6%A1%86%E6%9E%B6">#</a><code>&lt;frame&gt;</code>：框架</h3><p>一个框架显示一个页面。</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>scrolling=&quot;no&quot;</code>：是否需要滚动条。默认值是true。</li>
<li><code>noresize</code>：不可以改变框架大小。默认情况下，单个框架的边界是可以拖动的，这样的话，框架大小就不固定了。如果用了这个属性值，框架大小将固定。</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;top.html&quot;</span> <span class="attr">noresize</span>&gt;</span><span class="tag">&lt;/<span class="name">frame</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<ul>
<li><code>bordercolor=&quot;#00FF00&quot;</code>：给框架的边框定义颜色。这个属性在框架集合<code>&lt;frameset&gt;</code>中同样适用。 颜色这个属性在IE浏览器中生效，但是在google浏览器中无效，不知道为啥。</li>
<li><code>frameborder=&quot;0&quot;</code>或<code>frameborder=&quot;1&quot;</code>：隐藏或显示边框（框架线）。</li>
<li><code>name</code>：给框架起一个名字。</li>
</ul>
<p>利用<code>name</code>这个属性，我们可以在框架里进行超链。</p>
<p>举例：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_28.png" alt="img"></p>
<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_gif3.gif" alt="img"></p>
<h2 id="内嵌框架"><a href="#内嵌框架" class="headerlink" title="#内嵌框架"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E5%86%85%E5%B5%8C%E6%A1%86%E6%9E%B6">#</a>内嵌框架</h2><p>内嵌框架用<code>&lt;iframe&gt;</code>表示。<code>&lt;iframe&gt;</code>是<code>&lt;body&gt;</code>的子标记。</p>
<p>内嵌框架inner frame：嵌入在一个页面上的框架(仅仅IE、新版google浏览器支持，可能有其他浏览器也支持，暂时我不清楚)。</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>src=&quot;subframe/the_second.html&quot;</code>：内嵌的那个页面</li>
<li><code>width=800</code>：宽度</li>
<li><code>height=“150</code>：高度</li>
<li><code>scrolling=&quot;no&quot;</code>：是否需要滚动条。默认值是true。</li>
<li><code>name=&quot;mainFrame&quot;</code>：窗口名称。公有属性。</li>
</ul>
<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_29.png" alt="img"></p>
<p>内嵌框架举例：（在内嵌页面中切换显示不同的压面）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;文字页面.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;myframe&quot;</span>&gt;</span>默认显示文字页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;图片页面.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;myframe&quot;</span>&gt;</span>点击进入图片页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;表格页面.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;myframe&quot;</span>&gt;</span>点击进入表格页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;文字页面.html&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myframe&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	嘿嘿</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>效果演示： <img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_GIF.gif" alt="img"></p>
<h2 id="表单标签"><a href="#表单标签" class="headerlink" title="#表单标签"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE">#</a>表单标签</h2><p>表单标签用<code>&lt;form&gt;</code>表示，用于与服务器的交互。表单就是收集用户信息的，就是让用户填写的、选择的。</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>name</code>：表单的名称，用于JS来操作或控制表单时使用；</li>
<li><code>id</code>：表单的名称，用于JS来操作或控制表单时使用；</li>
<li><code>action</code>：指定表单数据的处理程序，一般是PHP，如：action=“login.php”</li>
<li><code>method</code>：表单数据的提交方式，一般取值：get(默认)和post</li>
</ul>
<p>注意：表单和表格嵌套时，是在</p>
<p>标记中套标记。</p>
<p>form标签里面的action属性和method属性，在《Ajax》课程上给大家讲解。稍微说一下：action属性就是表示，表单将提交到哪里。 method属性表示用什么HTTP方法提交，有get、post两种。</p>
<p><strong>get提交和post提交的区别：</strong></p>
<p>GET方式： 将表单数据，以”name=value”形式追加到action指定的处理程序的后面，两者间用”?”隔开，每一个表单的”name=value”间用”&amp;”号隔开。 特点：只适合提交少量信息，并且不太安全(不要提交敏感数据)、提交的数据类型只限于ASCII字符。</p>
<p>POST方式： 将表单数据直接发送(隐藏)到action指定的处理程序。POST发送的数据不可见。Action指定的处理程序可以获取到表单数据。 特点：可以提交海量信息，相对来说安全一些，提交的数据格式是多样的(Word、Excel、rar、img)。</p>
<p><strong>Enctype：</strong> 表单数据的编码方式(加密方式)，取值可以是：application/x-www-form-urlencoded、multipart/form-data。Enctype只能在POST方式下使用。</p>
<ul>
<li>Application/x-www-form-urlencoded：<strong>默认</strong>加密方式，除了上传文件之外的数据都可以</li>
<li>Multipart/form-data：<strong>上传附件时，必须使用这种编码方式</strong>。</li>
</ul>
<h3 id="lt-input-gt-：输入标签（文本框）"><a href="#lt-input-gt-：输入标签（文本框）" class="headerlink" title="#&lt;input&gt;：输入标签（文本框）"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#input-%EF%BC%9A%E8%BE%93%E5%85%A5%E6%A0%87%E7%AD%BE%EF%BC%88%E6%96%87%E6%9C%AC%E6%A1%86%EF%BC%89">#</a><code>&lt;input&gt;</code>：输入标签（文本框）</h3><p>用于接收用户输入。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p><strong>属性：</strong></p>
<ul>
<li>**<code>type=&quot;属性值&quot;</code>**：文本类型。属性值可以是：<ul>
<li><code>text</code>（默认）</li>
<li><code>password</code>：密码类型</li>
<li><code>radio</code>：单选按钮，名字相同的按钮作为一组进行单选（单选按钮，天生是不能互斥的，如果想互斥，必须要有相同的name属性。name就是“名字”。 ）。非常像以前的收音机，按下去一个按钮，其他的就抬起来了。所以叫做radio。</li>
<li><code>checkbox</code>：多选按钮，<strong>name 属性值相同的按钮</strong>作为一组进行选择。</li>
<li><code>checked</code>：将单选按钮或多选按钮默认处于选中状态。当<code>&lt;input&gt;</code>标签设置为<code>type=&quot;radio&quot;</code>或者<code>type=checkbox</code>时，可以用这个属性。属性值也是checked，可以省略。</li>
<li><code>hidden</code>：隐藏框，在表单中包含不希望用户看见的信息</li>
<li><code>button</code>：普通按钮，结合js代码进行使用。</li>
<li><code>submit</code>：提交按钮，传送当前表单的数据给服务器或其他程序处理。这个按钮不需要写value自动就会有“提交”文字。这个按钮真的有提交功能。点击按钮后，这个表单就会被提交到form标签的action属性中指定的那个页面中去。</li>
<li><code>reset</code>：重置按钮，清空当前表单的内容，并设置为最初的默认值</li>
<li><code>image</code>：图片按钮，和提交按钮的功能完全一致，只不过图片按钮可以显示图片。</li>
<li><code>file</code>：文件选择框。 提示：如果要限制上传文件的类型，需要配合JS来实现验证。对上传文件的安全检查：一是扩展名的检查，二是文件数据内容的检查。</li>
</ul>
</li>
<li>**<code>value=&quot;内容&quot;</code>**：文本框里的默认内容（已经被填好了的）</li>
<li><code>size=&quot;50&quot;</code>：表示文本框内可以显示<strong>五十个字符</strong>。一个英文或一个中文都算一个字符。 注意<strong>size属性值的单位不是像素哦</strong>。</li>
<li><code>readonly</code>：文本框只读，不能编辑。因为它的属性值也是readonly，所以属性值可以不写。 用了这个属性之后，在google浏览器中，光标点不进去；在IE浏览器中，光标可以点进去，但是文字不能编辑。</li>
<li><code>disabled</code>：文本框只读，不能编辑，光标点不进去。属性值可以不写。</li>
</ul>
<blockquote>
<p>备注：HTML5中，input的类型又增加了很多（比如date、color，我们会在 html5 中讲到）。</p>
</blockquote>
<p><strong>举例</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;呵呵&quot;</span> &gt;</span>逗比<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	昵称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;哈哈&quot;</span> <span class="attr">readonly</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;name&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">size</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;radio1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;&quot;</span>&gt;</span>男</span><br><span class="line">		  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;radio2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> &gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span>&gt;</span>吃饭</span><br><span class="line">		  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span>&gt;</span>睡觉</span><br><span class="line">		  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bat&quot;</span>&gt;</span>打豆豆</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_33.png" alt="img"></p>
<p>注意，多个个单选框的input标签中，name 的属性值可以相同，但是 <strong>id 的属性值必须是唯一的</strong>。我们知道，html的标签中，id的属性值是唯一的。</p>
<p><strong>四种按钮的举例</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置按钮&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">value</span>=<span class="string">&quot;图片按钮1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">value</span>=<span class="string">&quot;图片按钮2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;文件选择框&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>前端开发工程师，重点关心页面的美、样式、板式、交互。至于数据的提供和比较重的业务逻辑，都是后台工程师做的事情。</strong></p>
<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_35.png" alt="img"></p>
<h3 id="lt-select-gt-：下拉列表标签"><a href="#lt-select-gt-：下拉列表标签" class="headerlink" title="#&lt;select&gt;：下拉列表标签"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#select-%EF%BC%9A%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8%E6%A0%87%E7%AD%BE">#</a><code>&lt;select&gt;</code>：下拉列表标签</h3><p><code>&lt;select&gt;</code>标签里面的每一项用<code>&lt;option&gt;</code>表示。select就是“选择”，option“选项”。</p>
<p>select标签和ul、ol、dl一样，都是组标签。</p>
<p><strong><code>&lt;select&gt;</code>标签的属性：</strong></p>
<ul>
<li><code>multiple</code>：可以对下拉列表中的选项进行多选。属性值为 multiple，也可以没有属性值。也就是说，既可以写成 <code>multiple=&quot;&quot;</code>，也可以写成<code>multiple=&quot;multiple&quot;</code>。</li>
<li><code>size=&quot;3&quot;</code>：如果属性值大于1，则列表为滚动视图。默认属性值为1，即下拉视图。</li>
</ul>
<p><strong><code>&lt;option&gt;</code>标签的属性：</strong></p>
<ul>
<li><code>selected</code>：预选中。没有属性值。</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>小学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>初中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>高中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;&quot;</span>&gt;</span>研究生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>小学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>初中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>高中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>研究生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>小学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>初中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;&quot;</span>&gt;</span>高中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;&quot;</span>&gt;</span>大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span>&gt;</span>研究生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_32.png" alt="img"></p>
<h3 id="lt-textarea-gt-标签：多行文本输入框"><a href="#lt-textarea-gt-标签：多行文本输入框" class="headerlink" title="#&lt;textarea&gt;标签：多行文本输入框"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#textarea-%E6%A0%87%E7%AD%BE%EF%BC%9A%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E8%BE%93%E5%85%A5%E6%A1%86">#</a><code>&lt;textarea&gt;</code>标签：多行文本输入框</h3><p>text 就是“文本”，area 就是“区域”。</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>rows=&quot;4&quot;</code>：指定文本区域的行数。</li>
<li><code>cols=&quot;20&quot;</code>：指定文本区域的列数。</li>
<li><code>readonly</code>：只读。</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;txtInfo&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;4&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span>1、不爱摄影不懂设计的程序猿不是一个好的产品经理。<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_34.png" alt="img"></p>
<p>上图的红框部分表示，我在文本区域进行了换行，所以显示的效果也出现了空白。</p>
<h3 id="表单的语义化"><a href="#表单的语义化" class="headerlink" title="#表单的语义化"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E8%A1%A8%E5%8D%95%E7%9A%84%E8%AF%AD%E4%B9%89%E5%8C%96">#</a>表单的语义化</h3><p>比如，我们在注册一个网站的信息的时候，有一部分是必填信息，有一部分是选填信息，这个时候可以利用表单的语义化。 举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">legend</span>&gt;</span>账号信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">	姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;呵呵&quot;</span> &gt;</span>逗比<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">size</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">legend</span>&gt;</span>其他信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">	性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;&quot;</span>&gt;</span>男</span><br><span class="line">		  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> &gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span>&gt;</span>吃饭</span><br><span class="line">		  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span>&gt;</span>睡觉</span><br><span class="line">		  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bat&quot;</span>&gt;</span>打豆豆</span><br><span class="line">	<span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>效果：</p>
<p><img src="http://img.smyhvae.com/20151002_36.png" alt="img"></p>
<h3 id="lt-label-gt-标签"><a href="#lt-label-gt-标签" class="headerlink" title="#&lt;label&gt;标签"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#label-%E6%A0%87%E7%AD%BE">#</a><code>&lt;label&gt;</code>标签</h3><p>我们先来看下面一段代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span> 男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span> 女</span><br></pre></td></tr></table></figure>


<p>对于上面这样的单选框，我们只有点击那个单选框（小圆圈）才可以选中，点击“男”、“女”这两个文字时是无法选中的；于是，label标签派上了用场。</p>
<p>本质上来讲，“男”、“女”这两个文字和input标签时没有关系的，而label就是解决这个问题的。我们可以通过label把input和汉字包裹起来作为整体。</p>
<p>解决方法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nan&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nan&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nv&quot;</span>  /&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nv&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1<br>2</p>
<p>上方代码中，让label标签的<strong>for 属性值</strong>，和 input 标签的 <strong>id 属性值相同</strong>，那么这个label和input就有绑定关系了。</p>
<p>当然了，复选框也有label：（任何表单元素都有label）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;kk&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;kk&quot;</span>&gt;</span>10天内免登陆<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1<br>2</p>
<h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="#多媒体标签"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E5%A4%9A%E5%AA%92%E4%BD%93%E6%A0%87%E7%AD%BE">#</a>多媒体标签</h2><p><strong>声明：</strong> 多媒体包含：音频、视频、Flash。网页上的多媒体基本都是Flash格式的。 .wmv、.dat、.mob、.rmvb等视频格式，在网页上不能直接播放，需要安装第三方的插件，才可以播放。不同的浏览器，播客上述视频格式，所使用插件参数又不一样。 上述格式视频一般文件较大，不利于网络下载播放。 一般情况下，是将其它的视频格式，转成Flash来在网页上播放。转换软件：格式工厂等。 Flash格式的视频兼容性非常好，Flash格式的文件很小。</p>
<h3 id="lt-bgsound-gt-标签：播放背景音乐"><a href="#lt-bgsound-gt-标签：播放背景音乐" class="headerlink" title="#&lt;bgsound&gt;标签：播放背景音乐"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#bgsound-%E6%A0%87%E7%AD%BE%EF%BC%9A%E6%92%AD%E6%94%BE%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90">#</a><code>&lt;bgsound&gt;</code>标签：播放背景音乐</h3><p><strong>属性：</strong></p>
<ul>
<li><code>src=&quot;音乐文件的路径&quot;</code></li>
<li><code>loop=&quot;-1&quot;</code>：属性值代表播放次数，-1代表循环播放。</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bgsound</span> <span class="attr">src</span>=<span class="string">&quot;王菲 - 清风徐来.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bgsound</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>运行效果： 打开网页后，在IE 8中播放正常，播放时网页上显示一片空白。在google浏览器中无法播放。</p>
<h3 id="lt-embed-gt-标签：播放多媒体文件（音频、视频等）"><a href="#lt-embed-gt-标签：播放多媒体文件（音频、视频等）" class="headerlink" title="#&lt;embed&gt;标签：播放多媒体文件（音频、视频等）"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#embed-%E6%A0%87%E7%AD%BE%EF%BC%9A%E6%92%AD%E6%94%BE%E5%A4%9A%E5%AA%92%E4%BD%93%E6%96%87%E4%BB%B6%EF%BC%88%E9%9F%B3%E9%A2%91%E3%80%81%E8%A7%86%E9%A2%91%E7%AD%89%EF%BC%89">#</a><code>&lt;embed&gt;</code>标签：播放多媒体文件（音频、视频等）</h3><p>主要应用Netscape浏览器，它不是W3C规范。</p>
<blockquote>
<p>备注：视频格式可以支持 mp4、wav等，但不是所有视频格式都支持。</p>
</blockquote>
<p><strong>属性：</strong></p>
<ul>
<li><code>src=&quot;多媒体文件的路径&quot;</code></li>
<li><code>loop=&quot;-1&quot;</code>：属性值代表播放次数，-1代表循环播放。</li>
<li><code>autostart=&quot;false&quot;</code>：打开网页时，禁止自动播放。默认值是true。</li>
<li><code>volume=&quot;100&quot;</code>：设置默认的音量大小，测试发现这个值好像不起作用哦。</li>
<li>width：指Flash文件的宽度</li>
<li>height：指Flash文件的高度</li>
<li>quality：指Flash的播放质量，质量有高有低 hight low</li>
<li>pluginspage：如果指定的Flash插件不存在，则从pluginspage指定的地方进行下载。</li>
<li>type：指定Flash的文件格式类型</li>
<li>wmode：指Flash的背景是否可以透明，取值：transparent是透明的</li>
</ul>
<p><code>&lt;embed&gt;</code>标签播放音频举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;王菲 - 清风徐来.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>IE 8中的运行效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_37.png" alt="img"></p>
<p>google浏览器中的运行效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_38.png" alt="img"></p>
<p>注：在HTML5中新增了<code>&lt;video&gt;</code>标签播放视频。</p>
<h3 id="lt-object-gt-标签：播放多媒体文件（音频、视频等）"><a href="#lt-object-gt-标签：播放多媒体文件（音频、视频等）" class="headerlink" title="#&lt;object&gt;标签：播放多媒体文件（音频、视频等）"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#object-%E6%A0%87%E7%AD%BE%EF%BC%9A%E6%92%AD%E6%94%BE%E5%A4%9A%E5%AA%92%E4%BD%93%E6%96%87%E4%BB%B6%EF%BC%88%E9%9F%B3%E9%A2%91%E3%80%81%E8%A7%86%E9%A2%91%E7%AD%89%EF%BC%89">#</a><code>&lt;object&gt;</code>标签：播放多媒体文件（音频、视频等）</h3><p>主要应用IE浏览器，它是W3C规范。</p>
<p><strong>属性：</strong></p>
<ul>
<li><code>classid</code>：指定Flash插件的ID号，一般存在于注册表中。</li>
<li><code>codebase</code>：如果Flash插件不存在，则从codebase指定的地址下载。</li>
<li><code>&lt;param&gt;</code>标签的主要作用：设置具体的详细参数。</li>
</ul>
<p><strong>总结：在网页中插入Flash时，为了同时兼容多种浏览器，需要将<code>&lt;object&gt;</code>标签和<code>&lt;embed&gt;</code>标签标记一起使用，但使用的顺序是：<code>&lt;object&gt;</code>中嵌套<code>&lt;embed&gt;</code>标记。</strong> 举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">classid</span>=<span class="string">&quot;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&quot;</span> <span class="attr">codebase</span>=<span class="string">&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,29,0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;778&quot;</span> <span class="attr">height</span>=<span class="string">&quot;202&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;movie&quot;</span> <span class="attr">value</span>=<span class="string">&quot;images/banner.swf&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;quality&quot;</span> <span class="attr">value</span>=<span class="string">&quot;high&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;wmode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;transparent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;images/banner.swf&quot;</span> <span class="attr">width</span>=<span class="string">&quot;778&quot;</span> <span class="attr">height</span>=<span class="string">&quot;202&quot;</span> <span class="attr">quality</span>=<span class="string">&quot;high&quot;</span> <span class="attr">pluginspage</span>=<span class="string">&quot;http://www.macromedia.com/go/getflashplayer&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/x-shockwave-flash&quot;</span> <span class="attr">wmode</span>=<span class="string">&quot;transparent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="lt-marquee-gt-：滚动字幕标签"><a href="#lt-marquee-gt-：滚动字幕标签" class="headerlink" title="#&lt;marquee&gt;：滚动字幕标签"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#marquee-%EF%BC%9A%E6%BB%9A%E5%8A%A8%E5%AD%97%E5%B9%95%E6%A0%87%E7%AD%BE">#</a><code>&lt;marquee&gt;</code>：滚动字幕标签</h2><p>如果在这个标签里设置了内容，那么，打开网页时，内容会像弹幕一样自动移动。 <strong>属性：</strong></p>
<ul>
<li><code>direction=&quot;right&quot;</code>：移动的目标方向。属性值可以是：<code>left</code>（从右向左移动，默认值）、<code>right</code>（从左向右移动）、<code>up</code>（从下向上移动）、<code>down</code>（从上向下移动）。</li>
<li><code>behavior=&quot;slide&quot;</code>：行为方式。属性值可以是：<code>slide</code>（只移动一次）、<code>scroll</code>（循环移动，默认值）、<code>alternate</code>（循环移动）、。 <code>alternate</code>和<code>scroll</code>属性值都是循环移动，区别在于：假设在<code>direction=&quot;right&quot;</code>的情况下，<code>behavior=&quot;scroll&quot;</code>表示从左到右、从左到右、从左到右···<code>behavior=&quot;alternate&quot;</code>表示从左到右、从右到左、从左到右···</li>
<li><code>scrollamount=&quot;30&quot;</code>：移动的速度</li>
<li><code>loop=&quot;3&quot;</code>: 循环多少圈。负值表示无限循环</li>
<li><code>scrolldelay=&quot;1000&quot;</code>：移动一次休息多长时间。单位是毫秒。</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">behavior</span>=<span class="string">&quot;alternate&quot;</span> <span class="attr">direction</span>=<span class="string">&quot;down&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;#8c5dc1&quot;</span>&gt;</span>我来了<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>效果：</p>
<p><img src="http://img.smyhvae.com/2015-10-02-cnblogs_html_04.gif" alt="img"></p>
<h2 id="html废弃标签介绍"><a href="#html废弃标签介绍" class="headerlink" title="#html废弃标签介绍"></a><a href="web/base/html/05-HTML%E6%A0%87%E7%AD%BE%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#html%E5%BA%9F%E5%BC%83%E6%A0%87%E7%AD%BE%E4%BB%8B%E7%BB%8D">#</a>html废弃标签介绍</h2><p>HTML现在只负责语义，而不负责样式。但是HTML一开始，连样式也包办了。这些样式的标签，都已经被废弃。</p>
<p>2004年之前的东西：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;9&quot;</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>下面这些标签都是css钩子，而不是原意：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>强调<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>强调<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>这些标签，是有着浓厚的样式的作用，干涉了css的作用，所以HTML抛弃了他们。</p>
<p>类似的还有水平线标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br></pre></td></tr></table></figure>


<p>换行标签：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;br /&gt;</span><br></pre></td></tr></table></figure>


<p>但是，网页中99.9999%需要换行的时候，是因为另起了一个段落，所以要用p，而不要用<code>&lt;br /&gt;</code>。不到万不得已，不要用br标签。</p>
<p>标准的div+css页面，只会用到种类很少的标签：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">div  p  h1  span   a   img   ul   ol    dl    input</span><br></pre></td></tr></table></figure>


<p>知道每个标签的特殊用法、属性。比如a标签，img的属性。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>07-HTML5举例:简单的视频播放器</title>
    <url>/liuqi_blogs/2021/09/25/07-HTML5%E4%B8%BE%E4%BE%8B-%E7%AE%80%E5%8D%95%E7%9A%84%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    <content><![CDATA[<h1 id="07-HTML5举例：简单的视频播放器"><a href="#07-HTML5举例：简单的视频播放器" class="headerlink" title="07-HTML5举例：简单的视频播放器"></a>07-HTML5举例：简单的视频播放器</h1><p>我们采用 Bootstrap 网站的图标字体，作为播放器的按钮图标。</p>
<p>index.html的代码如下：</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入字体图标的文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/font-awesome.min.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*多媒体标题*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">figcaption</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft Yahei&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>:<span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 播放器*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.palyer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">720px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">360px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/loading.gif</span>) center no-repeat <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>:auto <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.palyer</span> <span class="selector-tag">video</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*display: none;*/</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 控制条*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.controls</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">700px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*开关*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.switch</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:yellow;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*进度条*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.progress</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">432px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.4</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>:<span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 当前进度*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.curr-progress</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 时间模块*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.time</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>:<span class="number">510px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>:<span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*全屏*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.extend</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多媒体--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  多媒体标题--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>视频案例<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;palyer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video/fun.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 控制条--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 播放暂停--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;switch  icon-play&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 当前进度--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;curr-progress&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 时间--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;time&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;curr-time&quot;</span>&gt;</span>00:00:00<span class="tag">&lt;/<span class="name">span</span>&gt;</span>/<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;total-time&quot;</span>&gt;</span>00:00:00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 全屏--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;extend  icon-resize-full&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 思路：</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        * 1、点击按钮 实现播放暂停并且切换图标</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        * 2、算出视频的总时显示出出来</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        * 3、当视频播放的时候，进度条同步，当前时间同步</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        * 4、点击实现全屏</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//        获取需要的标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span>  video=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//          播放按钮</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span>  playBtn=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.switch&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//          当前进度条</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span>  currProgress=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.curr-progress&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//          当前时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span>  currTime=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.curr-time&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//          总时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span>  totalTime=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.total-time&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//          全屏</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> extend=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.extend&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> tTime=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//         1、点击按钮 实现播放暂停并且切换图标</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">           playBtn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//               如果视频播放 就暂停，如果暂停 就播放</span></span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">if</span>(video.<span class="property">paused</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//                   播放</span></span></span><br><span class="line"><span class="language-javascript">                   video.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">                   <span class="comment">//切换图标</span></span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;icon-play&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;icon-pause&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">               &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//                   暂停</span></span></span><br><span class="line"><span class="language-javascript">                    video.<span class="title function_">pause</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//                   切换图标</span></span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;icon-pause&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;icon-play&#x27;</span>);&#125;</span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//        2、算出视频的总时显示出出来</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//        当时加载完成后的事件，视频能播放的时候</span></span></span><br><span class="line"><span class="language-javascript">        video.<span class="property">oncanplay</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//             获取视频总时长</span></span></span><br><span class="line"><span class="language-javascript">            tTime=video.<span class="property">duration</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(tTime);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//          将总秒数 转换成 时分秒的格式：00：00:00</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            小时</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> h=<span class="title class_">Math</span>.<span class="title function_">floor</span>(tTime/<span class="number">3600</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            分钟</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> m=<span class="title class_">Math</span>.<span class="title function_">floor</span>(tTime%<span class="number">3600</span>/<span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            秒</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> s=<span class="title class_">Math</span>.<span class="title function_">floor</span>(tTime%<span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            console.log(h);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            console.log(m);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            console.log(s);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            把数据格式转成 00:00：00</span></span></span><br><span class="line"><span class="language-javascript">            h=h&gt;=<span class="number">10</span>?<span class="attr">h</span>:<span class="string">&quot;0&quot;</span>+h;</span></span><br><span class="line"><span class="language-javascript">            m=m&gt;=<span class="number">10</span>?<span class="attr">m</span>:<span class="string">&quot;0&quot;</span>+m;</span></span><br><span class="line"><span class="language-javascript">            s=s&gt;=<span class="number">10</span>?<span class="attr">s</span>:<span class="string">&quot;0&quot;</span>+s;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(h);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            显示出来</span></span></span><br><span class="line"><span class="language-javascript">            totalTime.<span class="property">innerHTML</span>=h+<span class="string">&quot;:&quot;</span>+m+<span class="string">&quot;:&quot;</span>+s;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   * 3、当视频播放的时候，进度条同步，当前时间同步</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//         当时当前时间更新的时候触发</span></span></span><br><span class="line"><span class="language-javascript">        video.<span class="property">ontimeupdate</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            获取视频当前播放的时间</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//           console.log(video.currentTime);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            当前播放时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> cTime=video.<span class="property">currentTime</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//           把格式转成00:00:00</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> h=<span class="title class_">Math</span>.<span class="title function_">floor</span>(cTime/<span class="number">3600</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            分钟</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> m=<span class="title class_">Math</span>.<span class="title function_">floor</span>(cTime%<span class="number">3600</span>/<span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            秒</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> s=<span class="title class_">Math</span>.<span class="title function_">floor</span>(cTime%<span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            把数据格式转成 00:00：00</span></span></span><br><span class="line"><span class="language-javascript">            h=h&gt;=<span class="number">10</span>?<span class="attr">h</span>:<span class="string">&quot;0&quot;</span>+h;</span></span><br><span class="line"><span class="language-javascript">            m=m&gt;=<span class="number">10</span>?<span class="attr">m</span>:<span class="string">&quot;0&quot;</span>+m;</span></span><br><span class="line"><span class="language-javascript">            s=s&gt;=<span class="number">10</span>?<span class="attr">s</span>:<span class="string">&quot;0&quot;</span>+s;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            显示出当前时间</span></span></span><br><span class="line"><span class="language-javascript">            currTime.<span class="property">innerHTML</span>=h+<span class="string">&quot;:&quot;</span>+m+<span class="string">&quot;:&quot;</span>+s;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            改变进度条的宽度： 当前时间/总时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> value=cTime/tTime;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            currProgress.<span class="property">style</span>.<span class="property">width</span>=value*<span class="number">100</span>+<span class="string">&quot;%&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//        全屏</span></span></span><br><span class="line"><span class="language-javascript">        extend.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            全屏的h5代码</span></span></span><br><span class="line"><span class="language-javascript">            video.<span class="title function_">webkitRequestFullScreen</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>06-HTML5详解</title>
    <url>/liuqi_blogs/2021/09/23/06-HTML5%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="HTML5的介绍"><a href="#HTML5的介绍" class="headerlink" title="HTML5的介绍"></a>HTML5的介绍</h2><h3 id="Web-技术发展时间线"><a href="#Web-技术发展时间线" class="headerlink" title="#Web 技术发展时间线"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#web-%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E6%97%B6%E9%97%B4%E7%BA%BF">#</a>Web 技术发展时间线</h3><ul>
<li>1991 HTML</li>
<li>1994 HTML2</li>
<li>1996 CSS1 + JavaScript</li>
<li>1997 HTML4</li>
<li>1998 CSS2</li>
<li>2000 XHTML1（严格的html）</li>
<li>2002 Tableless Web Design（表格布局）</li>
<li>2005 AJAX</li>
<li>2009 HTML5</li>
<li>2014 HTML5 Finalized</li>
</ul>
<span id="more"></span>

<p>2002年的表格布局逐渐被淘汰，是因为：表格是用来承载数据的，并不是用来划分网页结构的。</p>
<p>2009年就已经推出了HTML5的草案，但直到2014年才有定稿，是因为有移动端的推动。</p>
<p>H5草案的前身是叫：Web Application，最早是由<a href="https://baike.baidu.com/item/WHATWG/5803339?fr=aladdin">WHATWG</a>这个组织在2004年提出的。</p>
<p>2007年被 W3C 组织接纳，并在 2008-01-22 发布 HTML5 的第一个草案。</p>
<h3 id="什么是-HTML5"><a href="#什么是-HTML5" class="headerlink" title="#什么是 HTML5"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#%E4%BB%80%E4%B9%88%E6%98%AF-html5">#</a>什么是 HTML5</h3><p>HTML5并不仅仅只是做为HTML标记语言的一个最新版本，更重要的是它<strong>制定了Web应用开发的一系列标准</strong>，成为第一个将Web做为应用开发平台的HTML语言。</p>
<p>HTML5定义了一系列新元素，如新语义标签、智能表单、多媒体标签等，可以帮助开发者创建富互联网应用，还提供了一些Javascript API，如地理定位、重力感应、硬件访问等，可以在浏览器内实现类原生应用。我们甚至可以结合 Canvas 开发网页版游戏。</p>
<p><strong><code>HTML5</code>的广义概念</strong>：HTML5代表浏览器端技术的一个发展阶段。在这个阶段，浏览器的呈现技术得到了飞跃发展和广泛支持，它包括：HTML5、CSS3、Javascript API在内的一套技术组合。</p>
<p><code>HTML5</code>不等于 <code>HTML next version</code>。<code>HTML5</code> 包含： <code>HTML</code>的升级版、<code>CSS</code>的升级版、<code>JavaScript API</code>的升级版。</p>
<p><strong>总结</strong>：<code>HTML5</code>是新一代开发 <strong>Web 富客户端</strong>应用程序整体<strong>解决方案</strong>。包括：HTML5，CSS3，Javascript API在内的一套<strong>技术组合</strong>。</p>
<p><strong>富客户端</strong>：具有很强的<strong>交互性</strong>和体验的客户端程序。比如说，浏览博客，是比较简单的客户端；一个在线听歌的网站、即时聊天网站就是富客户端。</p>
<p><strong>PS：</strong></p>
<p>单纯地从技术的角度讲，兼容性问题只会让开发者徒增烦恼。</p>
<p>如果网页端的程序能做到PC客户端的体验，就会对后者构成威胁。</p>
<h3 id="HTML5-的应用场景"><a href="#HTML5-的应用场景" class="headerlink" title="#HTML5 的应用场景"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#html5-%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">#</a>HTML5 的应用场景</h3><p>列举几个HTML5 的应用场景：</p>
<p>（1）极具表现力的网页：内容简约而不简单。</p>
<p>（2）网页应用程序：</p>
<ul>
<li>代替PC端的软件：iCloud、百度脑图、Office 365等。</li>
<li>APP端的网页：淘宝、京东、美团等。</li>
<li>微信端：公众号、小程序等。</li>
</ul>
<p>（3）混合式本地应用。</p>
<p>（4）简单的游戏。</p>
<h3 id="HTML5-新增的内容"><a href="#HTML5-新增的内容" class="headerlink" title="#HTML5 新增的内容"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#html5-%E6%96%B0%E5%A2%9E%E7%9A%84%E5%86%85%E5%AE%B9">#</a>HTML5 新增的内容</h3><p><img src="http://img.smyhvae.com/20180206_1540.png" alt="img"></p>
<p><img src="http://img.smyhvae.com/20180206_1545.png" alt="img"></p>
<p><img src="http://img.smyhvae.com/20180206_1541.png" alt="img"></p>
<h2 id="语义化的标签"><a href="#语义化的标签" class="headerlink" title="#语义化的标签"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E6%A0%87%E7%AD%BE">#</a>语义化的标签</h2><h3 id="语义化的作用"><a href="#语义化的作用" class="headerlink" title="#语义化的作用"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E4%BD%9C%E7%94%A8">#</a>语义化的作用</h3><p>语义标签对于我们并不陌生，如<code>&lt;p&gt;</code>表示一个段落、<code>&lt;ul&gt;</code>表示一个无序列表。<strong>标签语义化的作用：</strong></p>
<ul>
<li>能够便于开发者阅读和写出更优雅的代码。</li>
<li>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容。</li>
<li>更好地搜索引擎优化。</li>
</ul>
<p>总结：HTML的职责是描述一块内容是什么（或其意义），而不是它长什么样子；它的外观应该由CSS来决定。</p>
<h3 id="H5在语义上的改进"><a href="#H5在语义上的改进" class="headerlink" title="#H5在语义上的改进"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#h5%E5%9C%A8%E8%AF%AD%E4%B9%89%E4%B8%8A%E7%9A%84%E6%94%B9%E8%BF%9B">#</a>H5在语义上的改进</h3><p>在此基础上，HTML5 增加了大量有意义的语义标签，更有利于搜索引擎或辅助设备理解 HTML 页面内容。HTML5会让HTML代码的内容更结构化、标签更语义化。</p>
<p>我们常见的 css+div 布局是：</p>
<p><img src="http://img.smyhvae.com/20180206_1546.png" alt="img"></p>
<p>在html5中，我们可以这样写：</p>
<p><img src="http://img.smyhvae.com/20180206_1550.png" alt="img"></p>
<p>传统的做法中，我们通过增加类名如<code>class=&quot;header&quot;</code>、<code>class=&quot;footer&quot;</code>，使HTML页面具有语义性，但是不具有通用性。</p>
<p>HTML5 则是通过新增语义标签的形式来解决这个问题，例如<code>&lt;header&gt;&lt;/header&gt;</code>、<code>&lt;footer&gt;&lt;/footer&gt;</code>等，这样就可以使其具有通用性。</p>
<p><strong>传统网页布局：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 主体部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文章 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 侧边栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>H5 的经典网页布局：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 主体部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文章 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 侧边栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="H5中新增的语义标签"><a href="#H5中新增的语义标签" class="headerlink" title="#H5中新增的语义标签"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#h5%E4%B8%AD%E6%96%B0%E5%A2%9E%E7%9A%84%E8%AF%AD%E4%B9%89%E6%A0%87%E7%AD%BE">#</a>H5中新增的语义标签</h2><ul>
<li><code>&lt;section&gt;</code> 表示区块</li>
<li><code>&lt;article&gt;</code> 表示文章。如文章、评论、帖子、博客</li>
<li><code>&lt;header&gt;</code> 表示页眉</li>
<li><code>&lt;footer&gt;</code> 表示页脚</li>
<li><code>&lt;nav&gt;</code> 表示导航</li>
<li><code>&lt;aside&gt;</code> 表示侧边栏。如文章的侧栏</li>
<li><code>&lt;figure&gt;</code> 表示媒介内容分组。</li>
<li><code>&lt;mark&gt;</code> 表示标记 (用得少)</li>
<li><code>&lt;progress&gt;</code> 表示进度 (用得少)</li>
<li><code>&lt;time&gt;</code> 表示日期</li>
</ul>
<p>本质上新语义标签与<code>&lt;div&gt;</code>、<code>&lt;span&gt;</code>没有区别，只是其具有表意性，使用时除了在HTML结构上需要注意外，其它和普通标签的使用无任何差别，可以理解成<code>&lt;div class=&quot;nav&quot;&gt;</code> 相当于<code>&lt;nav&gt;</code>。</p>
<p>PS：单标签不用写关闭符号。</p>
<h3 id="新语义标签的兼容性处理"><a href="#新语义标签的兼容性处理" class="headerlink" title="#新语义标签的兼容性处理"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#%E6%96%B0%E8%AF%AD%E4%B9%89%E6%A0%87%E7%AD%BE%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86">#</a>新语义标签的兼容性处理</h3><p>IE8 及以下版本的浏览器不支持 H5 和 CSS3。解决办法：引入<code>html5shiv.js</code>文件。</p>
<p>引入时，需要做if判断，具体代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  条件注释 只有ie能够识别--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if lte ie 8]&gt;</span></span><br><span class="line"><span class="comment">    &lt;script src=&quot;html5shiv.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码是<strong>条件注释</strong>：虽然是注释，但是IE浏览器可以识别出来。解释一下：</p>
<ul>
<li>l：less 更小</li>
<li>t：than 比</li>
<li>e：equal等于</li>
<li>g：great 更大</li>
</ul>
<p>PS:我们在测试 IE 浏览器的兼容的时候，可以使用软件 ietest，模拟IE6-IE11。</p>
<p>在不支持HTML5新标签的浏览器，会将这些新的标签解析成行内元素(inline)对待，所以我们只需要将其转换成块元素(block)即可使用。</p>
<p>但是在IE9版本以下，并不能正常解析这些新标签，但是可以识别通过document.createElement(‘tagName’)创建的自定义标签。于是我们的解决方案就是：将HTML5的新标签全部通过document.createElement(‘tagName’)来创建一遍，这样IE低版本也能正常解析HTML5新标签了。</p>
<p>当然，在实际开发中我们更多采用的办法是：检测IE浏览器的版本，来加载第三方的JS库来解决兼容问题（如上方代码所示）。</p>
<h2 id="H5中的表单"><a href="#H5中的表单" class="headerlink" title="#H5中的表单"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#h5%E4%B8%AD%E7%9A%84%E8%A1%A8%E5%8D%95">#</a>H5中的表单</h2><p>传统的Web表单已经越来越不能满足开发的需求，HTML5 在 Web 表单方向做了很大的改进，如拾色器、日期/时间组件等，使表单处理更加高效。</p>
<h3 id="H5中新增的表单类型"><a href="#H5中新增的表单类型" class="headerlink" title="#H5中新增的表单类型"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#h5%E4%B8%AD%E6%96%B0%E5%A2%9E%E7%9A%84%E8%A1%A8%E5%8D%95%E7%B1%BB%E5%9E%8B">#</a>H5中新增的表单类型</h3><ul>
<li><code>email</code> 只能输入email格式。自动带有验证功能。</li>
<li><code>tel</code> 手机号码。</li>
<li><code>url</code> 只能输入url格式。</li>
<li><code>number</code> 只能输入数字。</li>
<li><code>search</code> 搜索框</li>
<li><code>range</code> 滑动条</li>
<li><code>color</code> 拾色器</li>
<li><code>time</code> 时间</li>
<li><code>date</code> 日期</li>
<li><code>datetime</code> 时间日期</li>
<li><code>month</code> 月份</li>
<li><code>week</code> 星期</li>
</ul>
<p>上面的部分类型是针对移动设备生效的，且具有一定的兼容性，在实际应用当中可选择性的使用。</p>
<p>代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#F7F7F7</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">form</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">32px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>表单类型<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            email: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            color: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            url: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&#x27;url&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            number: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            range: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;range&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            search: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            tel: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            time: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            date: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            datetime: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            week: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span> <span class="attr">name</span>=<span class="string">&quot;month&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            month: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;month&quot;</span> <span class="attr">name</span>=<span class="string">&quot;month&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            datetime-local: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;datetime-local&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码解释：</p>
<p><code>&lt;fieldset&gt;</code> 标签将表单里的内容进行打包，代表一组；而<code>&lt;legend&gt;</code>标签的则是 fieldset 里的元素定义标题。</p>
<h3 id="表单元素（标签）"><a href="#表单元素（标签）" class="headerlink" title="#表单元素（标签）"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0%EF%BC%88%E6%A0%87%E7%AD%BE%EF%BC%89">#</a>表单元素（标签）</h3><p>这里讲两个表单元素。</p>
<p><strong>1、<code>&lt;datalist&gt;</code> 数据列表：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;myData&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;myData&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>本科<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>研究生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>不明<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上方代码中，input里的list属性和 datalist 进行了绑定。</p>
<p>效果：</p>
<p><img src="http://img.smyhvae.com/20180206_1845.gif" alt="img"></p>
<p>上图可以看出，数据列表可以自动提示。</p>
<p>2、<code>&lt;keygen&gt;</code>元素：</p>
<p>keygen 元素的作用是提供一种验证用户的可靠方法。</p>
<p>keygen 元素是密钥对生成器（key-pair generator）。当提交表单时，会生成两个键：一个公钥，一个私钥。</p>
<p>私钥（private key）存储于客户端，公钥（public key）则被发送到服务器。公钥可用于之后验证用户的客户端证书（client certificate）。</p>
<p>3、<code>&lt;meter&gt;</code>元素：度量器</p>
<ul>
<li>low：低于该值后警告</li>
<li>high：高于该值后警告</li>
<li>value：当前值</li>
<li>max：最大值</li>
<li>min：最小值。</li>
</ul>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;meter  value=<span class="string">&quot;81&quot;</span>    min=<span class="string">&quot;0&quot;</span> max=<span class="string">&quot;100&quot;</span>  low=<span class="string">&quot;60&quot;</span>  high=<span class="string">&quot;80&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>1</p>
<h3 id="表单属性"><a href="#表单属性" class="headerlink" title="#表单属性"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#%E8%A1%A8%E5%8D%95%E5%B1%9E%E6%80%A7">#</a>表单属性</h3><ul>
<li><code>placeholder</code> 占位符（提示文字）</li>
<li><code>autofocus</code> 自动获取焦点</li>
<li><code>multiple</code> 文件上传多选或多个邮箱地址</li>
<li><code>autocomplete</code> 自动完成（填充的）。on 开启（默认），off 取消。用于表单元素，也可用于表单自身(on/off)</li>
<li><code>form</code> 指定表单项属于哪个form，处理复杂表单时会需要</li>
<li><code>novalidate</code> 关闭默认的验证功能（只能加给form）</li>
<li><code>required</code> 表示必填项</li>
<li><code>pattern</code> 自定义正则，验证表单。例如</li>
</ul>
<p>代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">form</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 最大宽度*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">640px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 最小宽度*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">min-width</span>: <span class="number">320px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft Yahei&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>表单属性<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;例如：smyhvae&quot;</span> <span class="attr">autofocus</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span> <span class="attr">required</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            电话：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;1\d&#123;10&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            multiple的表单: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 上传文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="表单事件"><a href="#表单事件" class="headerlink" title="#表单事件"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#%E8%A1%A8%E5%8D%95%E4%BA%8B%E4%BB%B6">#</a>表单事件</h3><ul>
<li><code>oninput()</code>：用户输入内容时触发，可用于输入字数统计。</li>
<li><code>oninvalid()</code>：验证不通过时触发。比如，如果验证不通过时，想弹出一段提示文字，就可以用到它。</li>
</ul>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">form</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 最大宽度*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 最小宽度*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">min-width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft Yahei&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>表单事件<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;txt1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            输入的次数统计：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;txt2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> txt1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;txt1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> txt2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;txt2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> num = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    txt1.<span class="property">oninput</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">//用户输入时触发</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        num++;  <span class="comment">//用户每输入一次，num自动加 1</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//将统计数显示在txt2中</span></span></span><br><span class="line"><span class="language-javascript">        txt2.<span class="property">value</span> = num;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    txt1.<span class="property">oninvalid</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">//验证不通过时触发</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">setCustomValidity</span>(<span class="string">&#x27;亲，请输入正确哦&#x27;</span>);  <span class="comment">//设置验证不通过时的提示文字</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="http://img.smyhvae.com/20180206_1920.gif" alt="img"></p>
<h2 id="多媒体"><a href="#多媒体" class="headerlink" title="#多媒体"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#%E5%A4%9A%E5%AA%92%E4%BD%93">#</a>多媒体</h2><p>在HTML5之前，在网页上播放音频/视频的通用方法是利用Flash来播放。但是大多情况下，并非所有用户的浏览器都安装了Flash插件，由此使得音频、视频播放的处理变得非常复杂；并且移动设备的浏览器并不支持Flash插件。</p>
<p>H5里面提供了视频和音频的标签。</p>
<h3 id="音频"><a href="#音频" class="headerlink" title="#音频"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#%E9%9F%B3%E9%A2%91">#</a>音频</h3><p>HTML5通过<code>&lt;audio&gt;</code>标签来解决音频播放的问题。</p>
<p>使用举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;music/yinyue.mp3&quot;</span> <span class="attr">autoplay</span> <span class="attr">controls</span>&gt;</span> <span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>效果如下：</p>
<p><img src="http://img.smyhvae.com/20180206_1958.png" alt="img"></p>
<p>我们可以通过附加属性，来更友好地控制音频的播放，如：</p>
<ul>
<li><code>autoplay</code> 自动播放。写成<code>autoplay</code> 或者 <code>autoplay = &quot;&quot;</code>，都可以。</li>
<li><code>controls</code> 控制条。（建议把这个选项写上，不然都看不到控件在哪里）</li>
<li><code>loop</code> 循环播放。</li>
<li><code>preload</code> 预加载 同时设置 autoplay 时，此属性将失效。</li>
</ul>
<p><strong>处理兼容性问题：</strong></p>
<p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的：</p>
<p><img src="http://img.smyhvae.com/20180206_1945.png" alt="img"></p>
<p>为了做到多浏览器支持，可以采取以下兼容性写法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--推荐的兼容写法：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">loop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;music/yinyue.mp3&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;music/yinyue.ogg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;music/yinyue.wav&quot;</span>/&gt;</span></span><br><span class="line">    抱歉，你的浏览器暂不支持此音频格式</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码解释：如果识别不出音频格式，就弹出那句“抱歉”。</p>
<h3 id="视频"><a href="#视频" class="headerlink" title="#视频"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#%E8%A7%86%E9%A2%91">#</a>视频</h3><p>HTML5通过<code>&lt;video&gt;</code>标签来解决视频播放的问题。</p>
<p>使用举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video/movie.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1</p>
<p>我们可以通过附加属性，来更友好地控制视频的播放，如：</p>
<ul>
<li><code>autoplay</code> 自动播放。写成<code>autoplay</code> 或者 <code>autoplay = &quot;&quot;</code>，都可以。</li>
<li><code>controls</code> 控制条。（建议把这个选项写上，不然都看不到控件在哪里）</li>
<li><code>loop</code> 循环播放。</li>
<li><code>preload</code> 预加载 同时设置 autoplay 时，此属性将失效。</li>
<li><code>width</code>：设置播放窗口宽度。</li>
<li><code>height</code>：设置播放窗口的高度。</li>
</ul>
<p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的：</p>
<p><img src="http://img.smyhvae.com/20180206_2025.png" alt="img"></p>
<p>兼容性写法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;video src=&quot;video/movie.mp4&quot; controls  autoplay &gt;&lt;/video&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  行内块 display:inline-block --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video/movie.mp4&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video/movie.ogg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video/movie.webm&quot;</span>/&gt;</span></span><br><span class="line">    抱歉，不支持此视频</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="#DOM 操作"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#dom-%E6%93%8D%E4%BD%9C">#</a>DOM 操作</h2><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="#获取元素"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0">#</a>获取元素</h3><ul>
<li>document.querySelector(“selector”) 通过CSS选择器获取符合条件的第一个元素。</li>
<li>document.querySelectorAll(“selector”) 通过CSS选择器获取符合条件的所有元素，以类数组形式存在。</li>
</ul>
<h3 id="类名操作"><a href="#类名操作" class="headerlink" title="#类名操作"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#%E7%B1%BB%E5%90%8D%E6%93%8D%E4%BD%9C">#</a>类名操作</h3><ul>
<li>Node.classList.add(“class”) 添加class</li>
<li>Node.classList.remove(“class”) 移除class</li>
<li>Node.classList.toggle(“class”) 切换class，有则移除，无则添加</li>
<li>Node.classList.contains(“class”) 检测是否存在class</li>
</ul>
<h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="#自定义属性"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7">#</a>自定义属性</h3><p>js 里可以通过 <code>box1.index=100;</code> <code>box1.title</code> 来自定义属性和获取属性。</p>
<p>H5可以直接在标签里添加自定义属性，<strong>但必须以 <code>data-</code> 开头</strong>。</p>
<p>举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给标签添加自定义属性 必须以data-开头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">title</span>=<span class="string">&quot;盒子&quot;</span> <span class="attr">data-my-name</span>=<span class="string">&quot;smyhvae&quot;</span> <span class="attr">data-content</span>=<span class="string">&quot;我是一个div&quot;</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//自定义的属性 需要通过 dateset[]方式来获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">dataset</span>[<span class="string">&quot;content&quot;</span>]);  <span class="comment">//打印结果：我是一个div</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">dataset</span>[<span class="string">&quot;myName&quot;</span>]);    <span class="comment">//打印结果：smyhvae</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//设置自定义属性的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> num = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">    num.<span class="property">index</span> = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">index</span> = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">dataset</span>[<span class="string">&quot;content&quot;</span>] = <span class="string">&quot;aaaa&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="举例：鼠标点击时，tab栏切换"><a href="#举例：鼠标点击时，tab栏切换" class="headerlink" title="#举例：鼠标点击时，tab栏切换"></a><a href="blog/web/base/html/06-HTML5%E8%AF%A6%E8%A7%A3.html#%E4%B8%BE%E4%BE%8B%EF%BC%9A%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E6%97%B6%EF%BC%8Ctab%E6%A0%8F%E5%88%87%E6%8D%A2">#</a>举例：鼠标点击时，tab栏切换</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Tab 标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#F7F7F7</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tabs</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#FFF</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#C0DCC0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tabs</span> <span class="selector-tag">nav</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#C0DCC0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#FFF</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-right</span>: <span class="number">0</span> none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#9BAF9B</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.cont</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.cont</span> <span class="selector-tag">ol</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tabs&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">data-cont</span>=<span class="string">&quot;local&quot;</span>&gt;</span>国内新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">data-cont</span>=<span class="string">&quot;global&quot;</span>&gt;</span>国际新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">data-cont</span>=<span class="string">&quot;sports&quot;</span>&gt;</span>体育新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">data-cont</span>=<span class="string">&quot;funny&quot;</span>&gt;</span>娱乐新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;cont&quot;</span> <span class="attr">id</span>=<span class="string">&quot;local&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>国内新闻1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>国内新闻2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>国内新闻3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>国内新闻4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>国内新闻5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>国内新闻6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>国内新闻7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;cont&quot;</span> <span class="attr">id</span>=<span class="string">&quot;global&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>国内新闻1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>国际新闻2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>国际新闻3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>国际新闻4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>国际新闻5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>国际新闻6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;cont&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sports&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>体育新闻1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>体育新闻2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>体育新闻3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>体育新闻4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>体育新闻5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>体育新闻6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>体育新闻7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;cont&quot;</span> <span class="attr">id</span>=<span class="string">&quot;funny&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>娱乐新闻1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>娱乐新闻2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>娱乐新闻3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>娱乐新闻4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>娱乐新闻5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>娱乐新闻6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>娱乐新闻7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 目标： 默认显示一个 当前的样式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 点击导航，实现切换</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// key 表示的当前显示的是第几个</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        (<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取所有的导航</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> navs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;nav a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 遍历 给导航 绑定事件，并且添加当前样式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; navs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 如果是用户指定的当前样式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (key == i) &#123;</span></span><br><span class="line"><span class="language-javascript">                    navs[i].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 拿到要显示内容section的id</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> secId = navs[i].<span class="property">dataset</span>[<span class="string">&#x27;cont&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 获取对应的section标签</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#&#x27;</span> + secId).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 给每一个导航绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">                navs[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 排他</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 之前有active样式的清除, 之前显示的section 隐藏</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> currentNav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 获取对应的内容区域 ，让其隐藏</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> currentId = currentNav.<span class="property">dataset</span>[<span class="string">&#x27;cont&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 去掉导航的active 样式</span></span></span><br><span class="line"><span class="language-javascript">                    currentNav.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 对应的内容区域</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#&#x27;</span> + currentId).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 突出显示自己 导航添加样式  对应的section 显示</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 给自己添加active样式</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 对应的section模块显示出来</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> myId = <span class="variable language_">this</span>.<span class="property">dataset</span>[<span class="string">&#x27;cont&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#&#x27;</span> + myId).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>08-HTML5详解二</title>
    <url>/liuqi_blogs/2021/10/06/08-HTML5%E8%AF%A6%E8%A7%A3%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="08-HTML5详解（二）"><a href="#08-HTML5详解（二）" class="headerlink" title="08-HTML5详解（二）"></a>08-HTML5详解（二）</h1><h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="#本文主要内容"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E6%9C%AC%E6%96%87%E4%B8%BB%E8%A6%81%E5%86%85%E5%AE%B9">#</a>本文主要内容</h2><ul>
<li>拖拽</li>
<li>历史</li>
<li>地理位置</li>
<li>全屏</li>
</ul>
<h2 id="拖拽"><a href="#拖拽" class="headerlink" title="#拖拽"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E6%8B%96%E6%8B%BD">#</a>拖拽</h2><p><img src="http://img.smyhvae.com/20180223_2130.gif" alt="img"></p>
<p>如上图所示，我们可以拖拽博客园网站里的图片和超链接。</p>
<p>在HTML5的规范中，我们可以通过为元素增加 <code>draggable=&quot;true&quot;</code> 来设置此元素是否可以进行拖拽操作，其中图片、链接默认是开启拖拽的。</p>
<span id="more"></span>

<h3 id="1、拖拽元素"><a href="#1、拖拽元素" class="headerlink" title="#1、拖拽元素"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#_1%E3%80%81%E6%8B%96%E6%8B%BD%E5%85%83%E7%B4%A0">#</a>1、拖拽元素</h3><p>页面中设置了 <code>draggable=&quot;true&quot;</code> 属性的元素。</p>
<p>举例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/font-awesome.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--给 box1 增加拖拽的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="http://img.smyhvae.com/20180223_2140.gif" alt="img"></p>
<p>上图中，我们给 box1 增加了<code>draggable=&quot;true&quot;</code> 属性之后，发现 box1 是可以拖拽的。但是拖拽之后要做什么事情呢？这就涉及到<strong>事件监听</strong>。</p>
<p><strong>拖拽元素的事件监听</strong>：（应用于拖拽元素）</p>
<ul>
<li><code>ondragstart</code>当拖拽开始时调用</li>
<li><code>ondragleave</code> 当<strong>鼠标离开拖拽元素时</strong>调用</li>
<li><code>ondragend</code> 当拖拽结束时调用</li>
<li><code>ondrag</code> 整个拖拽过程都会调用</li>
</ul>
<p>代码演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  绑定拖拽事件</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  拖拽开始</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">ondragstart</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拖拽开始.&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  拖拽离开：鼠标拖拽时离开被拖拽的元素时触发</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">ondragleave</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拖拽离开..&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  拖拽结束</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">ondragend</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拖拽结束...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;---------------&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">ondrag</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拖拽&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="http://img.smyhvae.com/20180223_2201.gif" alt="img"></p>
<p>打印结果：</p>
<p><img src="http://img.smyhvae.com/20180223_2213.png" alt="img"></p>
<h3 id="2、目标元素"><a href="#2、目标元素" class="headerlink" title="#2、目标元素"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#_2%E3%80%81%E7%9B%AE%E6%A0%87%E5%85%83%E7%B4%A0">#</a>2、目标元素</h3><p>比如说，你想把元素A拖拽到元素B里，那么元素B就是目标元素。</p>
<p>页面中任何一个元素都可以成为目标元素。</p>
<p><strong>目标元素的事件监听</strong>：（应用于目标元素）</p>
<ul>
<li><code>ondragenter</code> 当拖拽元素进入时调用</li>
<li><code>ondragover</code> 当拖拽元素停留在目标元素上时，就会连续一直触发（不管拖拽元素此时是移动还是不动的状态）</li>
<li><code>ondrop</code> 当在目标元素上松开鼠标时调用</li>
<li><code>ondragleave</code> 当鼠标离开目标元素时调用</li>
</ul>
<p>代码演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> two = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.two&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//目标元素的拖拽事件</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 当被拖拽元素进入时触发</span></span></span><br><span class="line"><span class="language-javascript">    two.<span class="property">ondragenter</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;来了.&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 当被拖拽元素离开时触发</span></span></span><br><span class="line"><span class="language-javascript">    two.<span class="property">ondragleave</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;走了..&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 当拖拽元素在 目标元素上时，连续触发</span></span></span><br><span class="line"><span class="language-javascript">    two.<span class="property">ondragover</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//阻止拖拽事件的默认行为</span></span></span><br><span class="line"><span class="language-javascript">        e.<span class="title function_">preventDefault</span>(); <span class="comment">//【重要】一定要加这一行代码，否则，后面的方法 ondrop() 无法触发。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;over...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 当在目标元素上松开鼠标是触发</span></span></span><br><span class="line"><span class="language-javascript">    two.<span class="property">ondrop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;松开鼠标了....&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>效果演示：</p>
<p><img src="http://img.smyhvae.com/20180223_2240.gif" alt="img"></p>
<p>注意，上方代码中，我们加了<code>event.preventDefault()</code>这个方法。如果没有这个方法，后面ondrop()方法无法触发。如下图所示：</p>
<p><img src="http://img.smyhvae.com/20180223_2245.gif" alt="img"></p>
<p>如上图所示，连光标的形状都提示我们，无法在目标元素里继续操作了。</p>
<p><strong>总结</strong>：如果想让拖拽元素在目标元素里做点事情，就必须要在 <code>ondragover()</code> 里加<code>event.preventDefault()</code>这一行代码。</p>
<p><strong>案例：拖拽练习</strong></p>
<p>完整版代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.one</span> &gt; <span class="selector-tag">div</span>, <span class="selector-class">.two</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">98px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">98px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">98px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> boxs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.one div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//        临时的盒子 用于存放当前拖拽的元素</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> two = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.two&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> temp = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         给8个小盒子分别绑定拖拽事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; boxs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        boxs[i].<span class="property">ondragstart</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//                保持当前拖拽的元素</span></span></span><br><span class="line"><span class="language-javascript">            temp = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(temp);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        boxs[i].<span class="property">ondragend</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//               当拖拽结束 ，清空temp</span></span></span><br><span class="line"><span class="language-javascript">            temp = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(temp);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//        目标元素的拖拽事件</span></span></span><br><span class="line"><span class="language-javascript">    two.<span class="property">ondragover</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            阻止拖拽的默认行为</span></span></span><br><span class="line"><span class="language-javascript">        e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//        当在目标元素上松开鼠标是触发</span></span></span><br><span class="line"><span class="language-javascript">    two.<span class="property">ondrop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            将拖拽的元素追加到 two里面来</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">appendChild</span>(temp);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="http://img.smyhvae.com/20180224_2050.gif" alt="img"></p>
<h2 id="历史"><a href="#历史" class="headerlink" title="#历史"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E5%8E%86%E5%8F%B2">#</a>历史</h2><p>界面上的所有JS操作不会被浏览器记住，就无法回到之前的状态。</p>
<p>在HTML5中可以通过 <code>window.history</code> 操作访问历史状态，让一个页面可以有多个历史状态</p>
<p><code>window.history</code>对象可以让我们管理历史记录，可用于单页面应用，Single Page Application，可以无刷新改变网页内容。</p>
<ol>
<li>window.history.forward(); // 前进</li>
<li>window.history.back(); // 后退</li>
<li>window.history.go(); // 刷新</li>
<li>通过JS可以加入一个访问状态</li>
<li>history.pushState; //放入历史中的状态数据, 设置title(现在浏览器不支持改变历史状态)</li>
</ol>
<h2 id="地理定位"><a href="#地理定位" class="headerlink" title="#地理定位"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E5%9C%B0%E7%90%86%E5%AE%9A%E4%BD%8D">#</a>地理定位</h2><p>在HTML规范中，增加了获取用户地理信息的API，这样使得我们可以基于用户位置开发互联网应用，即<strong>基于位置服务 LBS</strong> (Location Base Service)。</p>
<h3 id="获取地理信息的方式"><a href="#获取地理信息的方式" class="headerlink" title="#获取地理信息的方式"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E8%8E%B7%E5%8F%96%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E7%9A%84%E6%96%B9%E5%BC%8F">#</a>获取地理信息的方式</h3><h4 id="1、IP地址"><a href="#1、IP地址" class="headerlink" title="#1、IP地址"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#_1%E3%80%81ip%E5%9C%B0%E5%9D%80">#</a>1、IP地址</h4><h4 id="2、三维坐标："><a href="#2、三维坐标：" class="headerlink" title="#2、三维坐标："></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#_2%E3%80%81%E4%B8%89%E7%BB%B4%E5%9D%90%E6%A0%87%EF%BC%9A">#</a>2、三维坐标：</h4><p>（1）<strong>GPS</strong>（Global Positioning System，全球定位系统）。</p>
<p>目前世界上在用或在建的第2代全球卫星导航系统（GNSS）有：</p>
<ul>
<li>1.美国 Global Positioning System （全球定位系统） 简称GPS；</li>
<li>2.苏联/俄罗斯 GLOBAL NAVIGATION SATELLITE SYSTEM （全球卫星导航系统）简称GLONASS（格洛纳斯）；</li>
<li>3.欧盟（欧洲是不准确的说法，包括中国在内的诸多国家也参与其中）Galileo satellite navigation system（伽利略卫星导航系统） 简称GALILEO（伽利略）；</li>
<li>4.中国 BeiDou(COMPASS) Navigation Satellite System（北斗卫星导航系统）简称 BDS ；</li>
<li>5.日本 Quasi-Zenith Satellite System （准天顶卫星系统） 简称QZSS ；</li>
<li>6.印度 India Regional Navigation Satellite System（印度区域卫星导航系统）简称IRNSS。</li>
</ul>
<p>以上6个系统中国都能使用。</p>
<p>（2）<strong>Wi-Fi</strong>定位：仅限于室内。</p>
<p>（3）<strong>手机信号</strong>定位：通过运营商的信号塔定位。</p>
<h3 id="3、用户自定义数据："><a href="#3、用户自定义数据：" class="headerlink" title="#3、用户自定义数据："></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#_3%E3%80%81%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%EF%BC%9A">#</a>3、用户自定义数据：</h3><p>对不同获取方式的优缺点进行了比较，浏览器会<strong>自动以最优方式</strong>去获取用户地理信息：</p>
<p><img src="http://img.smyhvae.com/20180224_2110.png" alt="img"></p>
<h3 id="隐私"><a href="#隐私" class="headerlink" title="#隐私"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E9%9A%90%E7%A7%81">#</a>隐私</h3><p>HTML5 Geolocation(地理位置定位) 规范提供了一套保护用户隐私的机制。必须先得到用户明确许可，才能获取用户的位置信息。</p>
<h3 id="API详解"><a href="#API详解" class="headerlink" title="#API详解"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#api%E8%AF%A6%E8%A7%A3">#</a>API详解</h3><ul>
<li>navigator.getCurrentPosition(successCallback, errorCallback, options) 获取当前地理信息</li>
<li>navigator.watchPosition(successCallback, errorCallback, options) 重复获取当前地理信息</li>
</ul>
<p>1、当成功获取地理信息后，会调用succssCallback，并返回一个包含位置信息的对象position：（Coords即坐标）</p>
<ul>
<li>position.coords.latitude纬度</li>
<li>position.coords.longitude经度</li>
</ul>
<p>2、当获取地理信息失败后，会调用errorCallback，并返回错误信息error。</p>
<p>3、可选参数 options 对象可以调整位置信息数据收集方式</p>
<p>地理位置的 api 代码演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*navigator 导航*/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//geolocation: 地理定位</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//        window.navigator.geolocation</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//        兼容处理</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(navigator.<span class="property">geolocation</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       如果支持，获取用户地理信息</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            successCallback 当获取用户位置成功的回调函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            errorCallback 当获取用户位置失败的回调函数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            navigator.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(successCallback,errorCallback);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sorry,你的浏览器不支持地理定位&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取地理位置成功的回调函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">successCallback</span>(<span class="params">position</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            获取用户当前的经纬度</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            coords坐标</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            纬度latitude</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> wd=position.<span class="property">coords</span>.<span class="property">latitude</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            经度longitude</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> jd=position.<span class="property">coords</span>.<span class="property">longitude</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取用户位置成功！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(wd+<span class="string">&#x27;----------------&#x27;</span>+jd);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//          40.05867366972477----------------116.33668634275229</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            谷歌地图：40.0601398850,116.3434224706</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            百度地图：40.0658210000,116.3500430000</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//            腾讯高德：40.0601486487,116.3434373643</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取地理位置失败的回调函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">errorCallback</span>(<span class="params">error</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取用户位置失败！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>百度地图api举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>普通地图&amp;全景图<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;http://c.cnzz.com/core.php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=NsGTBiDpgGQpI7KDmYNAPGuHWGjCh1zk&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>, <span class="selector-tag">html</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">overflow</span>: hidden;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">font-family</span>:<span class="string">&quot;微软雅黑&quot;</span>;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#panorama</span> &#123;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">overflow</span>: hidden;&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://202.102.100.100/35ff706fd57d11c141cdefcd58d6562b.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;gb2312&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">hQGHuMEAyLn</span>(<span class="string">&#x27;[id=&quot;bb9c190068b8405587e5006f905e790c&quot;]&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;panorama&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//全景图展示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  谷歌获取的经纬度      40.05867366972477----------------116.33668634275229</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//            谷歌地图：40.0601398850,116.3434224706</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//            百度地图：40.0658210000,116.3500430000</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//            腾讯高德：40.0601486487,116.3434373643</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    var jd=116.336686;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    var wd=40.058673;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> jd=<span class="number">116.350043</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> wd=<span class="number">40.065821</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> panorama = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Panorama</span>(<span class="string">&#x27;panorama&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    panorama.<span class="title function_">setPosition</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(jd, wd)); <span class="comment">//根据经纬度坐标展示全景图</span></span></span><br><span class="line"><span class="language-javascript">    panorama.<span class="title function_">setPov</span>(&#123;<span class="attr">heading</span>: -<span class="number">40</span>, <span class="attr">pitch</span>: <span class="number">6</span>&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    panorama.<span class="title function_">addEventListener</span>(<span class="string">&#x27;position_changed&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123; <span class="comment">//全景图位置改变后，普通地图中心点也随之改变</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pos = panorama.<span class="title function_">getPosition</span>();</span></span><br><span class="line"><span class="language-javascript">        map.<span class="title function_">setCenter</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(pos.<span class="property">lng</span>, pos.<span class="property">lat</span>));</span></span><br><span class="line"><span class="language-javascript">        marker.<span class="title function_">setPosition</span>(pos);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    //普通地图展示</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    var mapOption = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//        mapType: BMAP_NORMAL_MAP,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//        maxZoom: 18,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//        drawMargin:0,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//        enableFulltimeSpotClick: true,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//        enableHighResolution:true</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    var map = new BMap.Map(&quot;normal_map&quot;, mapOption);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    var testpoint = new BMap.Point(jd, wd);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    map.centerAndZoom(testpoint, 18);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    var marker=new BMap.Marker(testpoint);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    marker.enableDragging();</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    map.addOverlay(marker);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    marker.addEventListener(&#x27;dragend&#x27;,function(e)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//                panorama.setPosition(e.point); //拖动marker后，全景图位置也随着改变</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//                panorama.setPov(&#123;heading: -40, pitch: 6&#125;);&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    );</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="全屏"><a href="#全屏" class="headerlink" title="#全屏"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E5%85%A8%E5%B1%8F">#</a>全屏</h2><blockquote>
<p>HTML5规范允许用户自定义网页上<strong>任一元素</strong>全屏显示。</p>
</blockquote>
<h3 id="开启-关闭全屏显示"><a href="#开启-关闭全屏显示" class="headerlink" title="#开启/关闭全屏显示"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E5%BC%80%E5%90%AF-%E5%85%B3%E9%97%AD%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA">#</a>开启/关闭全屏显示</h3><p>方法如下：（注意 screen 是小写）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">requestFullscreen</span>()   <span class="comment">//让元素开启全屏显示</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">cancleFullscreen</span>()    <span class="comment">//让元素关闭全屏显示</span></span><br></pre></td></tr></table></figure>


<p>为考虑兼容性问题，不同的浏览器需要<strong>在此基础之上</strong>，添加私有前缀，比如：（注意 screen 是大写）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">webkitRequestFullScreen</span><br><span class="line"> webkitCancleFullScreen</span><br><span class="line"></span><br><span class="line">mozRequestFullScreen</span><br><span class="line">mozCancleFullScreen</span><br></pre></td></tr></table></figure>

<h3 id="检测当前是否处于全屏状态"><a href="#检测当前是否处于全屏状态" class="headerlink" title="#检测当前是否处于全屏状态"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E6%A3%80%E6%B5%8B%E5%BD%93%E5%89%8D%E6%98%AF%E5%90%A6%E5%A4%84%E4%BA%8E%E5%85%A8%E5%B1%8F%E7%8A%B6%E6%80%81">#</a>检测当前是否处于全屏状态</h3><p>方法如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">document.fullScreen</span><br></pre></td></tr></table></figure>

<p>不同浏览器需要加私有前缀，比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">webkitIsFullScreen</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">mozFullScreen</span></span><br></pre></td></tr></table></figure>


<h3 id="全屏的伪类"><a href="#全屏的伪类" class="headerlink" title="#全屏的伪类"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E5%85%A8%E5%B1%8F%E7%9A%84%E4%BC%AA%E7%B1%BB">#</a>全屏的伪类</h3><ul>
<li>:full-screen .box {}</li>
<li>:-webkit-full-screen {}</li>
<li>:moz-full-screen {}</li>
</ul>
<p>比如说，当元素处于全屏状态时，改变它的样式。这时就可以用到伪类。</p>
<h3 id="代码举例"><a href="#代码举例" class="headerlink" title="#代码举例"></a><a href="web/base/html/08-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.html#%E4%BB%A3%E7%A0%81%E4%B8%BE%E4%BE%8B">#</a>代码举例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*全屏伪类：当元素处于全屏时，改变元素的背景色*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>:-webkit-full-screen &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// box.requestFullscreen();   //直接这样写是没有效果的。之所以无效，应该是浏览器的机制，必须要点一下才可以实现全屏功能。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 开启全屏显示的兼容写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (box.<span class="property">requestFullscreen</span>) &#123;  <span class="comment">//如果支持全屏，那就让元素全屏</span></span></span><br><span class="line"><span class="language-javascript">            box.<span class="title function_">requestFullscreen</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (box.<span class="property">webkitRequestFullScreen</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            box.<span class="title function_">webkitRequestFullScreen</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (box.<span class="property">mozRequestFullScreen</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            box.<span class="title function_">mozRequestFullScreen</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>效果如下：</p>
<p><img src="http://img.smyhvae.com/20180224_2130.gif" alt="img"></p>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>09-HTML5详解三</title>
    <url>/liuqi_blogs/2021/10/16/09-HTML5%E8%AF%A6%E8%A7%A3%E4%B8%89/</url>
    <content><![CDATA[<h2 id="Web-存储"><a href="#Web-存储" class="headerlink" title="Web 存储"></a>Web 存储</h2><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，传统方式我们以document.cookie来进行存储的，但是由于其存储大小只有4k左右，并且解析也相当的复杂，给开发带来诸多不便，HTML5规范则提出解决方案。</p>
<h3 id="H5-中有两种存储的方式"><a href="#H5-中有两种存储的方式" class="headerlink" title="#H5 中有两种存储的方式"></a><a href="09-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%89%EF%BC%89.html#h5-%E4%B8%AD%E6%9C%89%E4%B8%A4%E7%A7%8D%E5%AD%98%E5%82%A8%E7%9A%84%E6%96%B9%E5%BC%8F">#</a>H5 中有两种存储的方式</h3><p>1、**<code>window.sessionStorage</code> 会话存储：**</p>
<span id="more"></span>

<ul>
<li>保存在内存中。</li>
<li><strong>生命周期</strong>为关闭浏览器窗口。也就是说，当窗口关闭时数据销毁。</li>
<li>在同一个窗口下数据可以共享。</li>
</ul>
<p>2、**<code>window.localStorage</code> 本地存储**：</p>
<ul>
<li>有可能保存在浏览器内存里，有可能在硬盘里。</li>
<li>永久生效，除非手动删除（比如清理垃圾的时候）。</li>
<li>可以多窗口共享。</li>
</ul>
<h3 id="Web-存储的特性"><a href="#Web-存储的特性" class="headerlink" title="#Web 存储的特性"></a><a href="09-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%89%EF%BC%89.html#web-%E5%AD%98%E5%82%A8%E7%9A%84%E7%89%B9%E6%80%A7">#</a>Web 存储的特性</h3><p>（1）设置、读取方便。</p>
<p>（2）容量较大，sessionStorage 约5M、localStorage 约20M。</p>
<p>（3）只能存储字符串，可以将对象 JSON.stringify() 编码后存储。</p>
<h3 id="常见-API"><a href="#常见-API" class="headerlink" title="#常见 API"></a><a href="09-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%89%EF%BC%89.html#%E5%B8%B8%E8%A7%81-api">#</a>常见 API</h3><p>设置存储内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setItem</span>(key, value);</span><br></pre></td></tr></table></figure>

<p>1</p>
<p>PS：可以新增一个 item，也可以更新一个 item。</p>
<p>读取存储内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getItem</span>(key);</span><br></pre></td></tr></table></figure>

<p>1</p>
<p>根据键，删除存储内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">removeItem</span>(key);</span><br></pre></td></tr></table></figure>

<p>1</p>
<p>清空所有存储内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure>

<p>1</p>
<p>根据索引值来获取存储内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">key</span>(n);</span><br></pre></td></tr></table></figure>

<p>1</p>
<p>sessionStorage 的 API 举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage存储<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage获取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage清除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//在h5中提供两种web存储方式</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// sessionStorage  session（会话，会议） 5M  当窗口关闭是数据销毁  内存</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// localStorage    20M 永久生效 ，除非手动删除  清理垃圾  硬盘上</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> txt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//        sessionStorage存储数据</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;userName&#x27;</span>, txt.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;pwd&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//        sessionStorage获取数据</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        txt.<span class="property">value</span> = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;userName&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//        sessionStorage更新数据</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">2</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;userName&#x27;</span>, txt.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//        sessionStorage删除数据</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">3</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;userName&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//        sessionStorage清空数据</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">4</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">clear</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="http://img.smyhvae.com/20180224_2200.gif" alt="img"></p>
<p>如上图所示，我们可以在 Storage 选项卡中查看 Session Storage 和Local Storage。</p>
<p><strong>localStorage 的 API 举例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage存储<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage获取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage清除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    *  localStorage</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    *  数据存在硬盘上</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    *  永久生效</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    *  20M</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    * */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> txt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//        localStorage存储数据</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;userName&#x27;</span>, txt.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//        localStorage存储数据</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        txt.<span class="property">value</span> = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;userName&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//        localStorage删除数据</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">3</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;userName&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="案例：记住用户名和密码"><a href="#案例：记住用户名和密码" class="headerlink" title="#案例：记住用户名和密码"></a><a href="09-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%89%EF%BC%89.html#%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%AE%B0%E4%BD%8F%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81">#</a>案例：记住用户名和密码</h3><p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    密 码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;check&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>/&gt;</span>记住密码</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> userName = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.userName&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> pwd = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.pwd&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> chk = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.check&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//        当点击登录的时候 如果勾选“记住密码”，就存储密码；否则就清除密码</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (chk.<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//                记住数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;userName&#x27;</span>, userName.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;pwd&#x27;</span>, pwd.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//                清除数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;userName&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;pwd&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//        下次登录时，如果记录的有数据，就直接填充</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        userName.<span class="property">value</span> = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;userName&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        pwd.<span class="property">value</span> = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;pwd&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="网络状态"><a href="#网络状态" class="headerlink" title="#网络状态"></a><a href="09-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%89%EF%BC%89.html#%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%81">#</a>网络状态</h2><p>我们可以通过 <code>window.onLine</code> 来检测用户当前的网络状况，返回一个布尔值。另外：</p>
<ul>
<li>window.online：用户网络连接时被调用。</li>
<li>window.offline：用户网络断开时被调用（拔掉网线或者禁用以太网）。</li>
</ul>
<p>网络状态监听的代码举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;online&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;网络连接建立！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;offline&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;网络连接断开！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="应用缓存"><a href="#应用缓存" class="headerlink" title="#应用缓存"></a><a href="09-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%89%EF%BC%89.html#%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98">#</a>应用缓存</h2><p>HTML5中我们可以轻松的构建一个离线（无网络状态）应用，只需要创建一个 <code>cache manifest</code> 缓存清单文件。</p>
<h3 id="优势"><a href="#优势" class="headerlink" title="#优势"></a><a href="09-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%89%EF%BC%89.html#%E4%BC%98%E5%8A%BF">#</a>优势</h3><p>1、可配置需要缓存的资源；</p>
<p>2、网络无连接应用仍可用；</p>
<p>3、本地读取缓存资源，提升访问速度，增强用户体验；</p>
<p>4、减少请求，缓解服务器负担。</p>
<h3 id="cache-manifest-缓存清单文件"><a href="#cache-manifest-缓存清单文件" class="headerlink" title="#cache manifest 缓存清单文件"></a><a href="09-HTML5%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%89%EF%BC%89.html#cache-manifest-%E7%BC%93%E5%AD%98%E6%B8%85%E5%8D%95%E6%96%87%E4%BB%B6">#</a><code>cache manifest</code> 缓存清单文件</h3><p>缓存清单文件中列出了浏览器应缓存，以供离线访问的资源。推荐使用 <code>.appcache</code>作为后缀名，另外还要添加MIME类型。</p>
<p><strong>缓存清单文件里的内容怎样写：</strong></p>
<p>（1）顶行写CACHE MANIFEST。</p>
<p>（2）CACHE: 换行 指定我们需要缓存的静态资源，如.css、image、js等。</p>
<p>（3）NETWORK: 换行 指定需要在线访问的资源，可使用通配符（也就是：不需要缓存的、必须在网络下面才能访问的资源）。</p>
<p>（4）FALLBACK: 换行 当被缓存的文件找不到时的备用资源（当访问不到某个资源时，自动由另外一个资源替换）。</p>
<p>格式举例1：</p>
<p><img src="http://img.smyhvae.com/20180224_2240.png" alt="img"></p>
<p>格式举例2：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line"></span><br><span class="line"><span class="comment">#要缓存的文件</span></span><br><span class="line">CACHE:</span><br><span class="line">    images/img1.jpg</span><br><span class="line">    images/img2.jpg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定必须联网才能访问的文件</span></span><br><span class="line">NETWORK:</span><br><span class="line">     images/img3.jpg</span><br><span class="line">     images/img4.jpg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#当前页面无法访问是回退的页面</span></span><br><span class="line">FALLBACK:</span><br><span class="line">    404.html</span><br></pre></td></tr></table></figure>

<p><strong>缓存清单文件怎么用：</strong></p>
<p>（1）例如我们创建一个名为 <code>demo.appcache</code>的文件。例如：</p>
<p>demo.appcache：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释以#开头</span></span><br><span class="line"><span class="comment">#下面是要缓存的文件</span></span><br><span class="line">CACHE:</span><br><span class="line">    http://img.smyhvae.com/2016040101.jpg</span><br></pre></td></tr></table></figure>

<p>（2）在需要应用缓存在页面的根元素(html)里，添加属性manifest=”demo.appcache”。路径要保证正确。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">&quot;01.appcache&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://img.smyhvae.com/2016040101.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>10-HTML基础回顾</title>
    <url>/liuqi_blogs/2021/10/27/10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul>
<li>html 的常见元素</li>
<li>html 元素的分类</li>
<li>html 元素的嵌套关系</li>
<li>html 元素的默认样式和 CSS Reset</li>
<li>html 常见面试题</li>
</ul>
<span id="more"></span>

<h2 id="html-的常见元素"><a href="#html-的常见元素" class="headerlink" title="#html 的常见元素"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#html-%E7%9A%84%E5%B8%B8%E8%A7%81%E5%85%83%E7%B4%A0">#</a>html 的常见元素</h2><p>html 的常见元素主要分为两类：head 区域的元素、body 区域的元素。下面来分别介绍。</p>
<h3 id="1、head-区域的-html-元素"><a href="#1、head-区域的-html-元素" class="headerlink" title="#1、head 区域的 html 元素"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#_1%E3%80%81head-%E5%8C%BA%E5%9F%9F%E7%9A%84-html-%E5%85%83%E7%B4%A0">#</a>1、head 区域的 html 元素</h3><blockquote>
<p>head 区域的 html 元素，不会在页面上留下直接的内容。</p>
</blockquote>
<ul>
<li>meta</li>
<li>title</li>
<li>style</li>
<li>link</li>
<li>script</li>
<li>base</li>
</ul>
<p><strong>base元素的介绍</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>base 标签用于指定基础的路径。指定之后，所有的 a 链接都是以这个路径为基准。</p>
<h3 id="2、html-元素（body-区域）"><a href="#2、html-元素（body-区域）" class="headerlink" title="#2、html 元素（body 区域）"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#_2%E3%80%81html-%E5%85%83%E7%B4%A0%EF%BC%88body-%E5%8C%BA%E5%9F%9F%EF%BC%89">#</a>2、html 元素（body 区域）</h3><blockquote>
<p>body 区域的 html 元素，会直接出现在页面上。</p>
</blockquote>
<ul>
<li>div、section、article、aside、header、footer</li>
<li>p</li>
<li>span、em、strong</li>
<li>表格元素：table、thead、tbody、tr、td</li>
<li>列表元素：ul、ol、dl、dt、dd</li>
<li>a</li>
<li>表单元素：form、input、select、textarea、button</li>
</ul>
<p>div 是最常见的元素，大多数场景下，都可以用div（实在不行就多包几层div）。可见，<strong>div 是比较通用的元素，这也决定了 div 的的语义并不是很明确</strong>。</p>
<p><strong>常见标签的重要属性</strong>：</p>
<ul>
<li>a[href,target]</li>
<li>img[src,alt]</li>
<li>table td[colspan,rowspan]。设置当前单元格占据几行几列。在合并单元格时，会用到。</li>
<li>form[target,method,enctype]</li>
<li>input[type,value]</li>
<li>button[type]</li>
<li>selection&gt;option[value]</li>
<li>label[for]</li>
</ul>
<h3 id="html-文档的大纲"><a href="#html-文档的大纲" class="headerlink" title="#html 文档的大纲"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#html-%E6%96%87%E6%A1%A3%E7%9A%84%E5%A4%A7%E7%BA%B2">#</a>html 文档的大纲</h3><p>我们平时在写论文或者其他文档的时候，一般会先列出大纲，然后再写具体的内容。</p>
<p>同样，html 网页也可以看成是一种文档，也有属于它的大纲。</p>
<p>一个常见的html文档，它的结构可以是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>广告内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>某某公司出品<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="查看网页大纲的工具"><a href="#查看网页大纲的工具" class="headerlink" title="#查看网页大纲的工具"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#%E6%9F%A5%E7%9C%8B%E7%BD%91%E9%A1%B5%E5%A4%A7%E7%BA%B2%E7%9A%84%E5%B7%A5%E5%85%B7">#</a>查看网页大纲的工具</h3><p>我们可以通过 <a href="http://h5o.github.io/">http://h5o.github.io/</a> 这个工具查看一个网页的大纲。</p>
<p><strong>使用方法</strong>：</p>
<p>（1）将网址 <a href="http://h5o.github.io/">http://h5o.github.io/</a> 保存到书签栏</p>
<p>（2）去目标网页，点击书签栏的网址，即可查看该网页的大纲。</p>
<p>这个工具非常好用，既可以查看网页的大纲，也可以查看 markdown 在线文档的结构。</p>
<h2 id="html-元素的分类"><a href="#html-元素的分类" class="headerlink" title="#html 元素的分类"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#html-%E5%85%83%E7%B4%A0%E7%9A%84%E5%88%86%E7%B1%BB">#</a>html 元素的分类</h2><p>按照样式分类：</p>
<ul>
<li>块级元素</li>
<li>行内元素</li>
<li>inline-block：比如<code>form</code>表单元素。对外的表现是行内元素（不会独占一行），对内的表现是块级元素（可以设置宽高）。</li>
</ul>
<p>按照内容分类：</p>
<p><img src="http://img.smyhvae.com/20191003_1946.png" alt="img"></p>
<p>图片来源：<a href="https://html.spec.whatwg.org/multipage/dom.html#kinds-of-content">https://html.spec.whatwg.org/multipage/dom.html#kinds-of-content</a></p>
<h2 id="html-元素的嵌套关系"><a href="#html-元素的嵌套关系" class="headerlink" title="#html 元素的嵌套关系"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#html-%E5%85%83%E7%B4%A0%E7%9A%84%E5%B5%8C%E5%A5%97%E5%85%B3%E7%B3%BB">#</a>html 元素的嵌套关系</h2><ul>
<li>块级元素可以包含行内元素。</li>
<li>块级元素<strong>不一定</strong>能包含块级元素。比如 div 中可以包含 div，但 p 标签中不能包含 div。</li>
<li>行内元素<strong>一般</strong>不能包含块级元素。比如 span 中不能包含 div。但有个特例：在 HTML5 中， a 标签中可以包含 div。</li>
</ul>
<p><strong>注意</strong>：在 HTML5 中 <code>a &gt; div</code> 是合法的， <code>div &gt; a &gt; div</code>是不合法的 ；但是在 html 4.0.1 中， <code>a &gt; div</code> 仍然是不合法的。</p>
<h2 id="html-元素的默认样式和-CSS-Reset"><a href="#html-元素的默认样式和-CSS-Reset" class="headerlink" title="#html 元素的默认样式和 CSS Reset"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#html-%E5%85%83%E7%B4%A0%E7%9A%84%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F%E5%92%8C-css-reset">#</a>html 元素的默认样式和 CSS Reset</h2><p>比如下拉框这种比较复杂的元素，是自带默认样式的。如果没有这个默认样式，则该元素在页面上不会有任何表现，则必然增加一些工作量。</p>
<p>同时，默认样式也会带来一些问题：比如，有些默认样式我们是不需要的；有些默认样式甚至无法去掉。</p>
<p>如果我们不需要默认的样式，这里就需要引入一个概念：<strong>CSS Reset</strong>。</p>
<h3 id="常见的-CSS-Reset-方案"><a href="#常见的-CSS-Reset-方案" class="headerlink" title="#常见的 CSS Reset 方案"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#%E5%B8%B8%E8%A7%81%E7%9A%84-css-reset-%E6%96%B9%E6%A1%88">#</a>常见的 CSS Reset 方案</h3><p><strong>方案一</strong>：</p>
<p>CSS Tools: Reset CSS。链接：<a href="https://meyerweb.com/eric/tools/css/reset/">https://meyerweb.com/eric/tools/css/reset/</a></p>
<p><strong>方案二</strong>：</p>
<p>雅虎的 CSS Reset。链接：<a href="https://yuilibrary.com/yui/docs/cssreset/">https://yuilibrary.com/yui/docs/cssreset/</a></p>
<p>我们可以直接通过 CDN 的方式引入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>方式三</strong>：（比较有争议）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>上面何种写法，比较简洁，但也有争议。有争议的地方在于，可能会导致 css 选择器的性能问题。</p>
<h3 id="Normalize-css"><a href="#Normalize-css" class="headerlink" title="#Normalize.css"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#normalize-css">#</a>Normalize.css</h3><p>上面的几种 css reset 的解决思路是：将所有的默认样式清零。</p>
<p>但是，<a href="https://necolas.github.io/normalize.css/">Normalize.css</a> 的思路是：既然浏览器提供了这些默认样式，那它就是有意义的。<strong>既然不同浏览器的默认样式不一致，那么，<code>Normalize.css</code>就将这些默认样式设置为一致</strong>。</p>
<h2 id="html-常见面试题"><a href="#html-常见面试题" class="headerlink" title="#html 常见面试题"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#html-%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98">#</a>html 常见面试题</h2><h3 id="doctype-的意义是什么"><a href="#doctype-的意义是什么" class="headerlink" title="#doctype 的意义是什么"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#doctype-%E7%9A%84%E6%84%8F%E4%B9%89%E6%98%AF%E4%BB%80%E4%B9%88">#</a>doctype 的意义是什么</h3><ul>
<li>让浏览器以标准模式渲染</li>
<li>让浏览器知道元素的合法性</li>
</ul>
<h3 id="HTML、XHTML、HTML5的区别"><a href="#HTML、XHTML、HTML5的区别" class="headerlink" title="#HTML、XHTML、HTML5的区别"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#html%E3%80%81xhtml%E3%80%81html5%E7%9A%84%E5%8C%BA%E5%88%AB">#</a>HTML、XHTML、HTML5的区别</h3><ul>
<li>HTML 属于 SGML</li>
<li>XHTML 属于 XML，是 HTML 进行 XML 严格化的结果</li>
<li>HTML5 不属于SGML，也不属于 XML（HTML5有自己独立的一套规范），比 XHTML 宽松。</li>
</ul>
<h3 id="HTML5-有什么新的变化"><a href="#HTML5-有什么新的变化" class="headerlink" title="#HTML5 有什么新的变化"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#html5-%E6%9C%89%E4%BB%80%E4%B9%88%E6%96%B0%E7%9A%84%E5%8F%98%E5%8C%96">#</a>HTML5 有什么新的变化</h3><ul>
<li>新的语义化元素</li>
<li>表单增强</li>
<li>新的API：离线、音视频、图形、实时通信、本地存储、设备能力等。</li>
</ul>
<h3 id="em-和-i-的区别"><a href="#em-和-i-的区别" class="headerlink" title="#em 和 i 的区别"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#em-%E5%92%8C-i-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a>em 和 i 的区别</h3><p>共同点：二者都是表示斜体。</p>
<p>区别：</p>
<ul>
<li>em 是语义化的标签，表示强调。</li>
<li>i 是纯样式的标签，表示斜体。HTML5 中不推荐使用。</li>
</ul>
<h3 id="语义化的意义是什么"><a href="#语义化的意义是什么" class="headerlink" title="#语义化的意义是什么"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E6%84%8F%E4%B9%89%E6%98%AF%E4%BB%80%E4%B9%88">#</a>语义化的意义是什么</h3><ul>
<li>开发者容易理解，便于维护。</li>
<li>机器（搜索引擎、读屏软件等）容易理解结构</li>
<li>有助于 SEO</li>
</ul>
<h3 id="哪些元素可以自闭和"><a href="#哪些元素可以自闭和" class="headerlink" title="#哪些元素可以自闭和"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#%E5%93%AA%E4%BA%9B%E5%85%83%E7%B4%A0%E5%8F%AF%E4%BB%A5%E8%87%AA%E9%97%AD%E5%92%8C">#</a>哪些元素可以自闭和</h3><blockquote>
<p>自闭和的元素中不能再嵌入别的元素。且 HTML5 中要求加斜杠。</p>
</blockquote>
<ul>
<li>表单元素 input</li>
<li>图片 img</li>
<li>br、hr</li>
<li>meta、link</li>
</ul>
<h3 id="form-表单的作用"><a href="#form-表单的作用" class="headerlink" title="#form 表单的作用"></a><a href="10-HTML%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE.html#form-%E8%A1%A8%E5%8D%95%E7%9A%84%E4%BD%9C%E7%94%A8">#</a>form 表单的作用</h3><ul>
<li>直接提交表单</li>
<li>使用 submit / reset 按钮</li>
<li>便于浏览器保存表单</li>
<li>第三方库（比如 jQuery）可以整体获取值</li>
<li>第三方库可以进行表单验证</li>
</ul>
<p>所以，如果我们是通过 Ajax 提交表单数据，也建议加上 form。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>GitSubmodule学习</title>
    <url>/liuqi_blogs/2022/02/24/GitSubmodule%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>项目的版本库在某些情况下需要引用其他版本库中的文件，例如公司积累了一套常用的函数库，被多个项目调用，显然这个函数库的代码不能直接放到某个项目的代码中，而是要独立为一个代码库。</p>
<p>那么其他项目要调用公共函数库该如何处理呢？分别把公共函数库的文件拷贝到各自的项目中会造成冗余，丢弃了公共函数库的维护历史，这显然不是好的方法。</p>
<p>这种情况就可以使用 Git Submodule。</p>
<span id="more"></span>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>其实就是主模块是一个 Git 工程，里面又有好几个 Git 工程（子模块），而主模块与子模块之间的关系是由一个<code>.gitmodules</code> 文件去控制的，这个文件里面包含了子模块路径、子模块的远程仓库、子模块的版本号。</p>
<p>同时，主模块目录下的<code>.git/modules/</code> 目录中会存在一个 <code>git</code> 目录，子模块的仓库目录会存在于主模块的仓库目录中，并且子模块的仓库目录中也会存在一个<code>.git</code> 文件。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h3><ul>
<li>模块 A 的本地目录为：<code>projectA</code></li>
<li>希望引用模块 B 为模块 A 的子模块，其在模块 A 目录下的路径为：<code>projectA/projectB</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd projectA</span><br><span class="line">git submodule add projectB.git projectB</span><br></pre></td></tr></table></figure>

<p>其实这样是在<code>.gitsubmodules</code> 文件中添加了如下几行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[submodule &quot;projectB&quot;]</span><br><span class="line">    path = projectA/projectB</span><br><span class="line">    url = https://github.com/tding/projectB.git</span><br><span class="line">    branch = master</span><br></pre></td></tr></table></figure>

<p>同时主模块下的<code>.git</code> 目录中也会新增 <code>/modules/xxx/</code> 目录，里面的内容对应子模块仓库中原有的<code>.git</code> 目录中的文件，此时虽然子模块目录下的<code>.git</code> 依然存在，但是已经由一个文件夹变成了文件，内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitdir: ../.git/modules/xxx</span><br></pre></td></tr></table></figure>

<p>即指向了主模块的<code>.git/modules/xxx</code> 目录；如果运行 <code>git config --list</code> 查看项目的配置，也会发现多了类似下面两行的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">submodule.xxx.url=git@github.com:yyy/xxx.git</span><br><span class="line">submodule.xxx.active=true</span><br></pre></td></tr></table></figure>

<h3 id="本地拉取子模块"><a href="#本地拉取子模块" class="headerlink" title="本地拉取子模块"></a>本地拉取子模块</h3><p>当使用 git clone 下来的工程中带有 submodule 时，<strong>初始的时候 submodule 的内容并不会自动下载下来的，主模块中的子模块只有一个空文件夹</strong>，此时，只需执行如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>

<p>这样可以将子模块内容下载下来，工程才不会缺少相应的文件。</p>
<p>当然，我们也可以在 <code>git clone</code> 命令最后加上 <code>--recurse-submodules</code> 或者 <code>--recursive</code> 参数，<strong>这样下载下来的时候会包含其子模块的文件</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/yyy/xxx.git --recursive</span><br></pre></td></tr></table></figure>

<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="认证失败"><a href="#认证失败" class="headerlink" title="认证失败"></a>认证失败</h3><p>拉取项目 Submodule 的代码时，一直报 <code>remote: Coding 提示: Authentication failed! 认证失败，请确认您输入了正确的账号密码</code>，后面发现是因为密码保存在<strong>凭据管理器</strong>中（控制面板–&gt; 凭据管理器），然后 Git 的密码其实早就改过了，因此，更新了这个密码后，可以正常拉取了。</p>
<p>更新的办法是删除掉老的这个密码凭据，然后再次拉取的时候会跳出来一个输入密码的弹框，输入后下载成功，同时自动将密码保存成凭据了，下次也就不需要再次输入了。</p>
<h3 id="子模块分支处于-detached-状态"><a href="#子模块分支处于-detached-状态" class="headerlink" title="子模块分支处于 detached 状态"></a>子模块分支处于 detached 状态</h3><p>每次执行 <code>git submodule update --remote</code> 后，子模块会处于 detached 状态，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ./projectB</span><br><span class="line">$ git branch</span><br><span class="line">* (HEAD detached at ac4d1fc)</span><br><span class="line">  master</span><br></pre></td></tr></table></figure>

<p>设计如此，没有太好的解决办法：</p>
<p>It’s also important to realize that a submodule reference within the host repository is not a reference to a specific branch of that submodule’s project, it points directly to a specific commit (or SHA1 reference), it is not a symbolic reference such as a branch or tag. In technical terms, it’s a detached HEAD pointing directly to the latest commit as of the submodule add.</p>
<p>因此在改动子项目代码之前，需要手动切换到 master 分支。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/lsgxeva/p/8540758.html">Git Submodule 使用完整教程</a></li>
<li><a href="http://www.ayqy.net/blog/%E7%90%86%E8%A7%A3git-submodules/">理解 Git Submodules</a></li>
<li><a href="https://knightyun.github.io/2021/03/21/git-submodule">Git submodule 知识总结</a></li>
</ul>
]]></content>
      <categories>
        <category>git版本控制工具</category>
      </categories>
      <tags>
        <tag>git版本控制工具</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML入门笔记</title>
    <url>/liuqi_blogs/2022/01/24/HTML%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="HTML-结构"><a href="#HTML-结构" class="headerlink" title="HTML 结构"></a>HTML 结构</h4><hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sub-Title<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<br/>

<h5 id="body"><a href="#body" class="headerlink" title="body"></a>body</h5><hr>
<p>这个元素中的所有内容都会显示在浏览器的主窗口中。</p>
<br/>

<h5 id="head"><a href="#head" class="headerlink" title="head"></a>head</h5><hr>
<p>body 元素前面，包含这个页面的信息。</p>
<br/>

<h5 id="title"><a href="#title" class="headerlink" title="title"></a>title</h5><hr>
<p>head 元素中的 title 元素，显示在浏览器的顶端。</p>
<p>特性:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p lang=<span class="string">&quot;en-us&quot;</span>&gt;<span class="title class_">Paragraph</span> <span class="keyword">in</span> <span class="title class_">English</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><hr>
<p>标题：<br/><br>六个级别：h1、h2、h3、h4、h5、h6</p>
<br/>

<h5 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h5><hr>
<p>&lt; p &gt;</p>
<br/>

<h5 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h5><hr>
<p>&lt; b &gt;</p>
<br/>

<h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><hr>
<p>&lt; i &gt;</p>
<br/>

<h5 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h5><hr>
<p>&lt; sup &gt;</p>
<br/>

<h5 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h5><hr>
<p>&lt; sub &gt;</p>
<br/>

<h5 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h5><hr>
<p>当浏览器遇到两个或以上的连续空格时，只将其显示为一个空格，这一特性成为白色空间折叠。</p>
<br/>

<h5 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h5><hr>
<p>&lt; br/ &gt;</p>
<br/>

<h5 id="水平符"><a href="#水平符" class="headerlink" title="水平符"></a>水平符</h5><hr>
<p>&lt; hr/ &gt;</p>
<br/>

<h5 id="语义化标记"><a href="#语义化标记" class="headerlink" title="语义化标记"></a>语义化标记</h5><hr>
<p>不影响网页结构，却为所在页面添加了额外信息。</p>
<ul>
<li>&lt; strong &gt; 元素：加粗</li>
<li>&lt; em &gt; 元素：表明重点</li>
<li>&lt; blockquote &gt; 元素：表明引用</li>
</ul>
<br/>

<h5 id="缩写词和首字母缩写词"><a href="#缩写词和首字母缩写词" class="headerlink" title="缩写词和首字母缩写词"></a>缩写词和首字母缩写词</h5><hr>
<ul>
<li>HTML4：缩写词：&lt; abbr &gt;；首字母缩写词：&lt; acronym &gt;</li>
<li>HTML5：均采用 &lt; abbr &gt;</li>
</ul>
<br/>

<h5 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h5><hr>
<p>&lt; cite/ &gt;</p>
<br/>

<h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><hr>
<p>&lt; dfn/ &gt;</p>
<br/>

<h5 id="设计者详细信息"><a href="#设计者详细信息" class="headerlink" title="设计者详细信息"></a>设计者详细信息</h5><hr>
<p>&lt; address/ &gt;</p>
<br/>

<h5 id="内容的修改"><a href="#内容的修改" class="headerlink" title="内容的修改"></a>内容的修改</h5><hr>
<ul>
<li>&lt; ins &gt;：通常带有下划线</li>
<li>&lt; del &gt;：通常带有删除线</li>
</ul>
<br/>

<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><hr>
<h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><hr>
<pre><code>&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</code></pre>
<br/>

<h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><hr>
<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<br/>

<h5 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h5><hr>
<ul>
<li>&lt; dt &gt; 用来包含被定义的术语</li>
<li>&lt; dd &gt; 用来包含定义<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">   &lt;dt&gt;&lt;/dt&gt;</span><br><span class="line">   &lt;dd&gt;&lt;/dd&gt;</span><br><span class="line">   &lt;dt&gt;&lt;/dt&gt;</span><br><span class="line">   &lt;dd&gt;&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;   </span><br></pre></td></tr></table></figure></li>
</ul>
<br/>

<h5 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;Text1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;Text2</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;Text2.1&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;Text2.2&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><hr>
<p>链接是由 &lt; a &gt; 元素建立的，用户可以点击位于起始标签和结束标签之间的任何内容。使用 href 特性来指定要链接到的页面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.imdb.com&quot;&gt;IMDB&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="指向其他网站的链接"><a href="#指向其他网站的链接" class="headerlink" title="指向其他网站的链接"></a>指向其他网站的链接</h5><hr>
<p>采用绝对 URL。</p>
<br/>

<h5 id="指向同一网站中其它页面的链接"><a href="#指向同一网站中其它页面的链接" class="headerlink" title="指向同一网站中其它页面的链接"></a>指向同一网站中其它页面的链接</h5><hr>
<p>采用相对 URL。</p>
<ul>
<li>相同的文件夹：href=”reviews.html”</li>
<li>子文件夹：href=”music/listings.html”</li>
<li>父文件夹：href=”../index.html”</li>
</ul>
<br/>

<h5 id="EMAIL-链接"><a href="#EMAIL-链接" class="headerlink" title="EMAIL 链接"></a>EMAIL 链接</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;mailto:jon@example.org&quot;&gt;Email Jon&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="在新窗口打开链接"><a href="#在新窗口打开链接" class="headerlink" title="在新窗口打开链接"></a>在新窗口打开链接</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.imdb.com&quot; target=&quot;_blank&quot;&gt;Internet Movie Database&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="链接到当前页面的某个特定位置"><a href="#链接到当前页面的某个特定位置" class="headerlink" title="链接到当前页面的某个特定位置"></a>链接到当前页面的某个特定位置</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 id=&quot;top&quot;&gt;&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;a href=&quot;#top&quot;&gt;Top&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="链接到其他页面的某个特定位置"><a href="#链接到其他页面的某个特定位置" class="headerlink" title="链接到其他页面的某个特定位置"></a>链接到其他页面的某个特定位置</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.htmlandcssbook.com/#bottom&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h4 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h4><hr>
<h5 id="添加图像"><a href="#添加图像" class="headerlink" title="添加图像"></a>添加图像</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;images/qukka.jpg&quot; alt=&quot;说明&quot; title=&quot;附加信息&quot; /&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>height：像素为单位指定图像的高度（现在交给 CSS）</li>
<li>width：像素为单位指定图像的宽度（现在交给 CSS）</li>
</ul>
<br/>

<h5 id="图像格式"><a href="#图像格式" class="headerlink" title="图像格式"></a>图像格式</h5><hr>
<ul>
<li>JPEG：当图片包含多种不同的颜色</li>
<li>PNG、GIF：当图像中包含少量的颜色或者大面积的同色区域</li>
</ul>
<br/>

<h5 id="图像大小"><a href="#图像大小" class="headerlink" title="图像大小"></a>图像大小</h5><hr>
<p>在保存网站中所使用的图像时，它的宽度和高度应该与你希望它在页面中显示的大小保持一致。</p>
<br/>

<h5 id="图像的衡量和分辨率"><a href="#图像的衡量和分辨率" class="headerlink" title="图像的衡量和分辨率"></a>图像的衡量和分辨率</h5><hr>
<p>采用像素来衡量，因为显示在计算机屏幕的图像由称为像素的小方块构成。屏幕的分辨率就是每英寸的屏幕上所容纳的像素数，在大多数计算机上，这个数值是可以提高或降低的。</p>
<p>如果一个屏幕的分辨率设置为 640像素<em>480像素，然后将分辨率提高为 1024像素</em>768像素，屏幕上显示的图像和文本将变小，这是因为在同样大小的空间内显示了更多的像素。</p>
<br/>

<h5 id="矢量图像"><a href="#矢量图像" class="headerlink" title="矢量图像"></a>矢量图像</h5><hr>
<ul>
<li>创建：通过在网格上设置关键点并绘制这些点之间的线条来完成，然后就可以在已经创建的线条上填充颜色。</li>
<li>SVG：可伸缩矢量图形</li>
</ul>
<br/>

<h5 id="HTML5：图形和图形说明"><a href="#HTML5：图形和图形说明" class="headerlink" title="HTML5：图形和图形说明"></a>HTML5：图形和图形说明</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;figure&gt;</span><br><span class="line">    &lt;img&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;figcaption&gt;&lt;/figcaption&gt;</span><br><span class="line">&lt;/figure&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>figure：包含图像以及对图像的说明</li>
<li>figcaption：让网页设计人员给图像添加说明</li>
</ul>
<br/>

<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><hr>
<h5 id="表格结构"><a href="#表格结构" class="headerlink" title="表格结构"></a>表格结构</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>tr：每行的起始</li>
<li>td：每个单元格</li>
</ul>
<br/>

<h5 id="表格的标题"><a href="#表格的标题" class="headerlink" title="表格的标题"></a>表格的标题</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th scope=&quot;col&quot;&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th scope=&quot;col&quot;&gt;&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th scope=&quot;row&quot;&gt;&lt;/th&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th scope=&quot;raw&quot;&gt;&lt;/th&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>th：表示列或行的标题（table heading）</li>
<li>scope 特性：表明此元素是列标题还是行标题</li>
</ul>
<br/>

<h5 id="跨列-行"><a href="#跨列-行" class="headerlink" title="跨列 / 行"></a>跨列 / 行</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th scope=&quot;col&quot;&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th scope=&quot;col&quot;&gt;&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th scope=&quot;row&quot;&gt;&lt;/th&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th scope=&quot;raw&quot;&gt;&lt;/th&gt;</span><br><span class="line">        &lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>colspan：跨列</li>
<li>rawspan：跨行</li>
</ul>
<br/>

<h5 id="长表格"><a href="#长表格" class="headerlink" title="长表格"></a>长表格</h5><hr>
<ul>
<li>thead：标题所在元素</li>
<li>tbody：主体部分</li>
<li>tfoot：脚注所在元素</li>
</ul>
<br/>

<h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><hr>
<h5 id="表单结构"><a href="#表单结构" class="headerlink" title="表单结构"></a>表单结构</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.example.com/subscribe.php&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>action：服务器一个页面的 URL，这个页面用来在用户提交表单时接收表单中的信息。</li>
<li>method<ul>
<li>get：表单上的值附加在 action 特性所指定的 URL 末尾，适用于短表单、检索数据</li>
<li>post：表单上的值被放在 HTTP 头部信息进行发送，适用于上传文件、非常长、包含敏感信息、向数据库添加 / 删除信息</li>
</ul>
</li>
</ul>
<br/>

<h5 id="单行文本框"><a href="#单行文本框" class="headerlink" title="单行文本框"></a>单行文本框</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.example.com/subscribe.php&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;p&gt;Username:&lt;input type=&quot;text&quot; name=&quot;username&quot; size=&quot;15&quot; maxlength=&quot;30&quot; /&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>&lt; input &gt; 元素用来创建多种不同的表单控件，其 type 特性的值决定它将要创建哪种控件。</li>
<li>type=”text”：创建一个单行文本框</li>
<li>name：这个特性值对表单控件进行标识</li>
<li>size：指定文本框的宽度</li>
<li>maxlength：限制用户在文本区域输入字符的数量</li>
</ul>
<br/>

<h5 id="密码框"><a href="#密码框" class="headerlink" title="密码框"></a>密码框</h5><hr>
<ul>
<li>type=”password”：类似单行文本框，但是字符被掩盖</li>
</ul>
<h5 id="文本域（多行文本框）"><a href="#文本域（多行文本框）" class="headerlink" title="文本域（多行文本框）"></a>文本域（多行文本框）</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.example.com/subscribe.php&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">    &lt;textarea name=&quot;comments&quot; cols=&quot;20&quot; rows=&quot;4&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>&lt; textarea &gt;：与其他 input 元素不同，&lt; textarea &gt; 元素并非空元素，因此它包含起始标签和结束标签。</li>
<li>cols、rows 现在应该使用 CSS 来控制</li>
</ul>
<br/>

<h5 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;radio&quot; name=&quot;genre&quot; value=&quot;pop&quot; /&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>name：这个问题的所有单选按钮的 name 特性值都应该相同</li>
<li>value：被选中时要发送到服务器的值</li>
</ul>
<br/>

<h5 id="密码框-1"><a href="#密码框-1" class="headerlink" title="密码框"></a>密码框</h5><hr>
<ul>
<li>type=”password”：类似单行文本框，但是字符被掩盖</li>
</ul>
<br/>

<h5 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;service&quot; value=&quot;itunes&quot; checked=&quot;checked&quot;&gt;</span><br></pre></td></tr></table></figure>
<br/>

<h5 id="下拉列表框"><a href="#下拉列表框" class="headerlink" title="下拉列表框"></a>下拉列表框</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">    &lt;option value=&quot;ipod&quot;&gt;iPod&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;radio&quot;&gt;Radio&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="文件上传域"><a href="#文件上传域" class="headerlink" title="文件上传域"></a>文件上传域</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.example.com/subscribe.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;p&gt;Upload your song in MP3 format:&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;user-song&quot; /&gt;&lt;br /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Upload&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>&lt; form &gt; 元素上的 method 特性值必须设置为 post。</li>
<li>type=”file” 这个类型的 input 会创建一个后面附有 Browse 按钮的类似文本框的控件。</li>
<li>type=”submit” 提交按钮用来将表单发送到服务器。value 特性用于控制按钮上显示的文本。</li>
</ul>
<br/>

<h5 id="图像按钮"><a href="#图像按钮" class="headerlink" title="图像按钮"></a>图像按钮</h5><hr>
<p>使用图像作为提交按钮。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.example.com/subscribe.php&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;p&gt;Subscribe to our email list:&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;email&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;image&quot; src=&quot;images/subscribe.jpg&quot;  /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="按钮和隐藏控件"><a href="#按钮和隐藏控件" class="headerlink" title="按钮和隐藏控件"></a>按钮和隐藏控件</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.example.com/subscribe.php&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;button&gt;&lt;img src=&quot;images/add.gif&quot; alt=&quot;add&quot; /&gt; Add&lt;/button&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;bookmark&quot; value=&quot;lyrics&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>引入 &lt; button &gt; 元素是为了让用户更好地控制按钮的显示方式，并且允许其他元素出现在 &lt; button &gt; 元素内。</li>
<li>type=”hidden” 表示隐藏表单控件，这类控件不会显示在页面上。</li>
</ul>
<br/>

<h5 id="标签表单控件"><a href="#标签表单控件" class="headerlink" title="标签表单控件"></a>标签表单控件</h5><hr>
<p>每个表单控件最好使用相应的 <label> 元素来代替简单的文本。</p>
<ul>
<li>用法一：将文本说明和表单输入框全部包围起来<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;label&gt;Age: &lt;input type=&quot;text&quot; name=&quot;age&quot; /&gt;&lt;/label&gt;</span><br></pre></td></tr></table></figure></li>
<li>用法二：与表单控件分开，使用 for 特性来指明 <label> 元素所关联的表单控件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;label for=&quot;female&quot;&gt;Female &lt;/label&gt;</span><br><span class="line">&lt;input id=&quot;female&quot; type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;f&quot; /&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<br/>

<h5 id="组合表单元素"><a href="#组合表单元素" class="headerlink" title="组合表单元素"></a>组合表单元素</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;fieldset&gt;</span><br><span class="line">    &lt;legend&gt;Contact details&lt;/legend&gt;</span><br><span class="line">    &lt;label&gt;Email:&lt;br /&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;email&quot; /&gt;&lt;/label&gt;&lt;br /&gt;</span><br><span class="line">    &lt;label&gt;Mobile:&lt;br /&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;mobile&quot; /&gt;&lt;/label&gt;&lt;br /&gt;</span><br><span class="line">    &lt;label&gt;Telephone:&lt;br /&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;telephone&quot; /&gt;&lt;/label&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>&lt; fieldset &gt;：将置于其中的相关的表单控件分成一组</li>
<li>&lt; legend &gt;：直接跟在起始标签 &lt; fieldset &gt; 后面并且包含一个标题</li>
</ul>
<br/>

<h5 id="HTML5-控件"><a href="#HTML5-控件" class="headerlink" title="HTML5 控件"></a>HTML5 控件</h5><hr>
<ul>
<li>表单验证：增加了一个 required 特性</li>
<li>日期控件：&lt; input type=”date” name=”depart” / &gt;</li>
<li>电子邮件：&lt; input type=”email” name=”email” / &gt;</li>
<li>URL 输入：&lt; input type=”url” name=”website” / &gt;</li>
<li>搜索输入控件：&lt; input type=”search” name=”search” / &gt;</li>
</ul>
<br/>

<h4 id="其他标记"><a href="#其他标记" class="headerlink" title="其他标记"></a>其他标记</h4><hr>
<h5 id="DOCTYPE（文档类型）"><a href="#DOCTYPE（文档类型）" class="headerlink" title="DOCTYPE（文档类型）"></a>DOCTYPE（文档类型）</h5><hr>
<p>因为 HTML 存在多个版本，因此每个网页的开头都应该用一个 DOCTYPE 声明来告诉浏览器此页使用了 HTML 的哪个版本.<br/><br>HTML5：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="HTML-中的注释"><a href="#HTML-中的注释" class="headerlink" title="HTML 中的注释"></a>HTML 中的注释</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- --&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="id-特性"><a href="#id-特性" class="headerlink" title="id 特性"></a>id 特性</h5><hr>
<p>每个 HTML 元素都可以附带 id 特性，id 特性用来从页面中的其他元素中对一个元素进行唯一标识。</p>
<p><b>注意：在一个页面中，没有哪两个元素的 id 特性值是相同的！</b></p>
<br/>

<h5 id="class-特性"><a href="#class-特性" class="headerlink" title="class 特性"></a>class 特性</h5><hr>
<p>每个 HTML 元素都可以附带一个 class 特性，有时候你希望有一种方法可以指定多个元素并将这些元素和页面上的其他元素区分出来。</p>
<br/>

<h5 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h5><hr>
<p>有些元素在浏览器窗口中显示时总是另起一行，这些元素被称为块级元素。<br/><br>块级元素的实例：</p>
<ul>
<li>&lt; h1 &gt;</li>
<li>&lt; p &gt;</li>
<li>&lt; ul &gt;</li>
<li>&lt; li &gt;</li>
</ul>
<br/>

<h5 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h5><hr>
<p>有些元素在显示时总是与它的邻近元素出现在同一行内，这些元素被称为内联元素。</p>
<p>内联元素的实例：</p>
<ul>
<li>&lt; a &gt;</li>
<li>&lt; b &gt;</li>
<li>&lt; em &gt;</li>
<li>&lt; img &gt;</li>
</ul>
<br/>

<h5 id="将文本和元素集中在一个块级元素中"><a href="#将文本和元素集中在一个块级元素中" class="headerlink" title="将文本和元素集中在一个块级元素中"></a>将文本和元素集中在一个块级元素中</h5><hr>
<p>&lt; div &gt; 元素允许你将一组元素集中到一个块级元素内。</p>
<p>在浏览器中，&lt; div &gt; 元素的内容会另起一行显示，但除了这一点，它不会使页面的呈现有什么不同。</p>
<br/>

<h5 id="将文本和元素集中在一个内联元素中"><a href="#将文本和元素集中在一个内联元素中" class="headerlink" title="将文本和元素集中在一个内联元素中"></a>将文本和元素集中在一个内联元素中</h5><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Anish Kapoor won the Turner Prize in 1991 and exhibited at the &lt;span class=&quot;gallery&quot;&gt;Tate Modern&lt;/span&gt; gallery in London in 2003.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>&lt; span &gt; 元素就像是 &lt; div &gt; 元素的内联版本。人们使用 &lt; span &gt; 元素最常见的原因就是可以利用 CSS 来控制 &lt; span &gt; 元素中的内容的外观。</p>
<br/>

<h5 id="内嵌框架"><a href="#内嵌框架" class="headerlink" title="内嵌框架"></a>内嵌框架</h5><hr>
<p>&lt; iframe &gt; 这一术语是 inline frame（内嵌框架）的缩写。在网页中嵌入 Google 地图是内嵌框架的一种常用方式。内嵌框架中的内容可以是任何 html 页面。</p>
<p>&lt; iframe &gt; 的几个特性：</p>
<ul>
<li>src：指定要在框架中显示的页面的 URL</li>
<li>height：指定内嵌框架高度的像素值</li>
<li>width：指定内嵌框架宽度的像素值</li>
<li>scrolling（HTML5 不再支持）：表明是否在内嵌框架上显示滚动条</li>
<li>frameborder（HTML5 不再支持）：表明是否显示框架的边框</li>
<li>seamless（HTML5 的新特性）：应用在不希望出现滚动条的地方</li>
</ul>
<br/>

<h5 id="页面信息"><a href="#页面信息" class="headerlink" title="页面信息"></a>页面信息</h5><hr>
<p>&lt; meta &gt; 元素位于 &lt; head &gt; 元素中并包含着所在页面的相关信息。&lt; meta &gt; 元素是空元素，所以它没有结束标签。它通过特性来携带信息。</p>
<p>最常见的特性：</p>
<ul>
<li>name：你要设定的属性</li>
<li>content：你想给这个属性指定的值</li>
</ul>
<p>下面是 name 特性常见的值：</p>
<ul>
<li>description：页面的描述信息</li>
<li>keywords：一组以逗号分隔的关键词列表</li>
<li>robots：用于指定搜索引擎是否可以将这个页面加入到它们的搜索结果中</li>
</ul>
<p>下面是 http-equiv 特性常见的值：</p>
<ul>
<li>author：定义网页的设计者</li>
<li>pragma：用于防止浏览器对页面的缓存</li>
<li>expires：指定页面的过期时间</li>
</ul>
<p>下面是一个实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;</span><br><span class="line">    &lt;title&gt;算法图解-图书-图灵社区&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<br/>

<h5 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h5><hr>
<p>有一些字符用于编写 HTML 代码并作为 HTML 的保留字符。因此，如果想要在页面中显示这些字符，你就需要使用 “转义” 字符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;:&amp;lt;</span><br><span class="line">&gt;:&amp;gt;</span><br><span class="line">&amp;:&amp;amp;</span><br><span class="line">&quot;:&amp;quot;</span><br><span class="line">&#x27;:&amp;lsquo;</span><br><span class="line">&#x27;:&amp;rsquo;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+next搭建博客</title>
    <url>/liuqi_blogs/2018/02/20/Hexo-next%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<span id="more"></span>

<h2 id="1、Hexo-建站"><a href="#1、Hexo-建站" class="headerlink" title="1、Hexo 建站"></a>1、Hexo 建站</h2><p>首先我们可以在 GitHub Pages 上搭建个人博客。</p>
<p>具体过程见下文：</p>
<ul>
<li><a href="https://tding.top/archives/7f189df5.html">Hexo 建站教程</a></li>
</ul>
<h2 id="2、Hexo-部署到-VPS"><a href="#2、Hexo-部署到-VPS" class="headerlink" title="2、Hexo 部署到 VPS"></a>2、Hexo 部署到 VPS</h2><p>搭建完博客后，我们需要进行搜索引擎优化（SEO）。现在我们的博客是托管在 GitHub Pages 上，但是 GitHub 屏蔽了百度的爬虫，对于中文网站来说，百度带来的流量是非常可观的，因此，我需要一个办法让百度收录我的博客。</p>
<p>这里一个比较简单的办法就是把 Hexo 博客部署到自己的 VPS 上。</p>
<h3 id="第一步：购买个性域名"><a href="#第一步：购买个性域名" class="headerlink" title="第一步：购买个性域名"></a>第一步：购买个性域名</h3><p>这里我推荐 Namesilo 这个平台，价格比较便宜，而且提供免费的域名隐私保护。</p>
<p>具体过程见下文：</p>
<ul>
<li><a href="https://tding.top/archives/b48e2719.html">GitHub Pages 绑定域名</a></li>
</ul>
<h3 id="第二步：部署到-VPS"><a href="#第二步：部署到-VPS" class="headerlink" title="第二步：部署到 VPS"></a>第二步：部署到 VPS</h3><p>我们将 Hexo 在本地通过 <code>hexo generate</code> 生成静态文件，在通过 <code>hexo deploy</code> 部署到 VPS 上面，使用 Nginx 直接做 Web 服务器。</p>
<p>这里我使用的是 <code>Git Hooks</code> 进行自动部署。</p>
<p><strong>部署原理</strong>：我们在本地编辑文本，然后使用 Git 远程部署到 VPS 的 Git 仓库。<code>hexo d</code> 命令实际上只 deploy 了本地的 public 文件夹，<code>Git Hooks</code> 实际上就是当 Git 仓库收到最新的 push 时，将 Git 仓库接受到的内容复制到 VPS 上的网站目录内。相当于完成了手动将 public 文件夹复制到 VPS 的网站根目录里。</p>
<p>具体过程见下文：</p>
<ul>
<li><a href="https://tding.top/archives/12a4e7e6.html">Hexo 博客部署到 VPS</a></li>
</ul>
<p><strong>注意：现在需要我们修改下 DNSPod 的解析地址，把域名解析到 VPS 的 IP 地址而不是 GitHub 的 IP 地址</strong>。</p>
<h3 id="第三步：免费升级-HTTPS"><a href="#第三步：免费升级-HTTPS" class="headerlink" title="第三步：免费升级 HTTPS"></a>第三步：免费升级 HTTPS</h3><p>为了鼓励 https 的普及，EFF 成立了免费证书最大的提供商为 Let’s Encrypt，可以提供免费证书。</p>
<p>具体过程见下文：</p>
<ul>
<li><a href="https://tding.top/archives/21caa4d0.html">Hexo 升级 HTTPS</a></li>
</ul>
<h3 id="第四步：提交搜索引擎收录"><a href="#第四步：提交搜索引擎收录" class="headerlink" title="第四步：提交搜索引擎收录"></a>第四步：提交搜索引擎收录</h3><p>通过上面三步，我们已经完成了 Hexo 在 VPS 上的部署并且开启了 HTTPS，下面我们只需要注册一个百度站长账号，然后提交 sitemap，静等百度收录我们的个人网站。</p>
<p>具体过程见下文：</p>
<ul>
<li><a href="https://tding.top/archives/4ea54752.html">Hexo-NexT 博客提交搜索引擎收录</a></li>
</ul>
<h2 id="3、Hexo-双线部署在-GitHub-Pages-和-Coding-Pages"><a href="#3、Hexo-双线部署在-GitHub-Pages-和-Coding-Pages" class="headerlink" title="3、Hexo 双线部署在 GitHub Pages 和 Coding Pages"></a>3、Hexo 双线部署在 GitHub Pages 和 Coding Pages</h2><p>下面是双线部署的过程：</p>
<ul>
<li><a href="https://tding.top/archives/e09249d2.html">Hexo 博客部署到 Coding</a></li>
</ul>
<p>完成双线部署后，境外访问就会走 GitHub，境内就会走 Coding，大大提升了访问速度。</p>
<h2 id="4、Hexo-博客部署在-GitHub-Pages-上并且配置-CDN-进行加速"><a href="#4、Hexo-博客部署在-GitHub-Pages-上并且配置-CDN-进行加速" class="headerlink" title="4、Hexo 博客部署在 GitHub Pages 上并且配置 CDN 进行加速"></a>4、Hexo 博客部署在 GitHub Pages 上并且配置 CDN 进行加速</h2><p>由于 Coding Pages 的服务并不是那么稳定，近期出现多次不能正常部署或访问 Pages 的问题，所以我现在采用了<strong>博客部署在 GitHub Pages 上并且配置 CDN 进行加速</strong>的方法。</p>
<p>国内的 CDN 服务提供商有不少，但是基本都需要备案，因此我用了 Cloudflare 这个国外的 CDN 服务提供商。</p>
<p>配置 CDN 的过程见：</p>
<ul>
<li><a href="https://tding.top/archives/12c6c559.html">Hexo 配置 Cloudflare 免费 CDN</a></li>
</ul>
<h2 id="5、Hexo-主题选择"><a href="#5、Hexo-主题选择" class="headerlink" title="5、Hexo 主题选择"></a>5、Hexo 主题选择</h2><p>Hexo 有很多简洁美观的主题，大家可以去 <a href="https://hexo.io/themes/">Hexo-Themes</a> 去选择自己喜欢的主题。</p>
<p>我使用过 Yilia 和 NexT 这两款主题，下面是我美化过程的一个记录。</p>
<h3 id="Hexo-NexT-主题美化"><a href="#Hexo-NexT-主题美化" class="headerlink" title="Hexo NexT 主题美化"></a>Hexo NexT 主题美化</h3><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>下面是 NexT 主题的基本配置以及内置的 Tag 插件使用说明：</p>
<ul>
<li><a href="https://tding.top/archives/42c38b10.html">Hexo-NexT (v7.0+) 主题配置</a></li>
<li><a href="https://tding.top/archives/29bfe8c9.html">Hexo-NexT Tag 插件的使用</a></li>
</ul>
<h4 id="自定义子页面"><a href="#自定义子页面" class="headerlink" title="自定义子页面"></a>自定义子页面</h4><p>NexT 主题自带的子页面很少，只有首页、标签、分类、归档、关于等子页面。为了记录更多的内容，我添加了<strong>豆瓣读书、豆瓣电影、画廊、热榜</strong>等子页面，具体过程以及效果见下面：</p>
<ul>
<li>Hexo 加入豆瓣读书页面<ul>
<li>具体效果见：<a href="https://tding.top/books/">小丁的个人博客 - 豆瓣电影</a></li>
</ul>
</li>
<li>Hexo-NexT 实现相册<ul>
<li>具体效果见：<a href="https://tding.top/gallery/">小丁的个人博客 - 画廊</a></li>
</ul>
</li>
<li>Hexo-NexT 新增阅读排行页面<ul>
<li>具体效果见：<a href="https://tding.top/top/">小丁的个人博客 - 热榜</a></li>
</ul>
</li>
<li>Hexo-NexT 新增友链<ul>
<li>具体效果见：<a href="https://tding.top/about/links.html">小丁的个人博客 - 友链</a></li>
</ul>
</li>
</ul>
<h4 id="第三方服务配置"><a href="#第三方服务配置" class="headerlink" title="第三方服务配置"></a>第三方服务配置</h4><p>有一些服务，包括评论、在线聊天、文章评分、分享等功能无法通过静态页面实现，所以我用了第三方服务商提供上述服务，具体配置过程如下：</p>
<ul>
<li><a href="https://tding.top/archives/7696c13f.html">Hexo-NexT 添加第三方服务</a></li>
</ul>
<p>由于 Disqus 这个评论服务需要科学上网才能使用，不利于交流，因此我换用了 Valine，配置过程如下：</p>
<ul>
<li><a href="https://tding.top/archives/ed8b904f.html">Hexo-NexT 配置 Valine</a></li>
</ul>
<p>有时候，我们想要在个人博客的 <a href="https://tding.top/about/">“关于”</a> 栏目下展示自己的 GitHub Chart，如下图所示：</p>
<p><a href="https://ghchart.rshah.org/dta0502"><img src="https://ghchart.rshah.org/dta0502" alt="img"></a></p>
<p>具体设置过程可以见：</p>
<ul>
<li><a href="https://tding.top/archives/90b9ba07.html">Hexo 博客展示 GitHub Chart</a></li>
</ul>
<p>更多第三方服务配置：</p>
<ul>
<li><a href="https://tding.top/archives/567debe0.html">本博客当前使用的插件总结</a></li>
</ul>
<h4 id="页面加载性能优化"><a href="#页面加载性能优化" class="headerlink" title="页面加载性能优化"></a>页面加载性能优化</h4><ul>
<li><a href="https://tding.top/archives/7e5b094d.html">Hexo-NexT 加载性能优化</a></li>
</ul>
<h4 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h4><p>下面是一些自定义样式美化：</p>
<ul>
<li><a href="https://tding.top/archives/761b6f4d.html">Hexo-NexT 设置博客背景图片</a></li>
<li><a href="https://tding.top/archives/dd68b70.html">Hexo-NexT 增加 canvas 粒子时钟</a></li>
<li><a href="https://tding.top/archives/58cff12b.html">Hexo-NexT 添加打字特效、鼠标点击特效</a></li>
<li><a href="https://tding.top/archives/bd4d996d.html">Hexo-NexT 代码块折叠</a></li>
<li><a href="https://tding.top/archives/dfac1e9c.html">Hexo-NexT 主题样式美化 - 动画设置</a></li>
</ul>
<p>字体设置：</p>
<ul>
<li><a href="https://tding.top/archives/3cdfe265.html">Hexo-NexT 支持简体繁体一键切换</a></li>
</ul>
<h4 id="NexT-版本更新记录"><a href="#NexT-版本更新记录" class="headerlink" title="NexT 版本更新记录"></a>NexT 版本更新记录</h4><ul>
<li><a href="https://tding.top/archives/2bd6d82.html">Hexo-NexT 版本更新记录</a></li>
</ul>
<h3 id="Hexo-Yilia-主题美化"><a href="#Hexo-Yilia-主题美化" class="headerlink" title="Hexo Yilia 主题美化"></a>Hexo Yilia 主题美化</h3><ul>
<li><a href="https://tding.top/archives/9a232bbe.html">Hexo-Yilia 进阶笔记</a></li>
</ul>
<blockquote>
<p>我的个人博客地址：<a href="https://tding.top/">小丁的个人博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JS判断浏览器版本</title>
    <url>/liuqi_blogs/2021/07/21/JS%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>JS 判断浏览器版本的方法。</p>
<h2 id="主流浏览器的-navigator-userAgent"><a href="#主流浏览器的-navigator-userAgent" class="headerlink" title="主流浏览器的 navigator.userAgent"></a>主流浏览器的 <code>navigator.userAgent</code></h2><span id="more"></span>

<table>
<thead>
<tr>
<th align="left">浏览器</th>
<th align="left">userAgent 信息</th>
</tr>
</thead>
<tbody><tr>
<td align="left">IE 7</td>
<td align="left">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64;Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</td>
</tr>
<tr>
<td align="left">IE 8</td>
<td align="left">Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729;Media Center PC 6.0; .NET4.0C; .NET4.0E)</td>
</tr>
<tr>
<td align="left">IE 9</td>
<td align="left">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729;Media Center PC 6.0; .NET4.0C; .NET4.0E)</td>
</tr>
<tr>
<td align="left">IE 10</td>
<td align="left">Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</td>
</tr>
<tr>
<td align="left">IE 11</td>
<td align="left">Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko</td>
</tr>
<tr>
<td align="left">Edge 17</td>
<td align="left">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17134</td>
</tr>
<tr>
<td align="left">Chrome 69</td>
<td align="left">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 Safari/537.36</td>
</tr>
<tr>
<td align="left">Firefox 62</td>
<td align="left">Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0</td>
</tr>
<tr>
<td align="left">Safari 60</td>
<td align="left">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.1 Safari/605.1.15</td>
</tr>
<tr>
<td align="left">Opera 56</td>
<td align="left">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36 OPR/56.0.3051.88</td>
</tr>
</tbody></table>
<p><code>navigator.userAgent</code> 主要包含浏览器版本，型号，内核，甚至安装的插件等等。</p>
<p><strong>网页排版引擎</strong>大致有 2 个系列：</p>
<ul>
<li>Internet Explorer 核心（Trident）</li>
<li>Mozilla Firefox 核心（Gecko）</li>
</ul>
<p>之所以有 Gecko 标识，跟 HTML5 规定有关：<code>navigator.appName</code> 值为 <code>Netscape</code>，<code>navigator.product</code> 值为 <code>Gecko</code>。</p>
<p>在 HTML5 中要求这两个属性必须返回上述对应的值，这是一个很奇怪的规定的。IE 系列中只有 Internet Explorer 11 遵守了这个规定。我测试了上面列表的浏览器，发现其他主流浏览器（Edge，Chrome，Firefox，Safari，Opera）都遵守了这个规定。</p>
<h2 id="区分-IE-和其他主流浏览器方法"><a href="#区分-IE-和其他主流浏览器方法" class="headerlink" title="区分 IE 和其他主流浏览器方法"></a>区分 IE 和其他主流浏览器方法</h2><ol>
<li>根据 userAgent 包含网页排版引擎区分：Internet Explorer 核心（Trident）及 Mozilla Firefox 核心（Gecko）。代码如下：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isIE() &#123;</span><br><span class="line">    return navigator.userAgent.toLowerCase().indexOf(&#x27;trident&#x27;)&gt;-1?true:false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>如果仅仅是区分 IE 和其他主流浏览器，其实除了 userAgent 字段外，也可以使用 ActiveXObject 对象来进行判断。代码如下：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isIE()&#123;</span><br><span class="line">    if(!!window.ActiveXObject || &quot;ActiveXObject&quot; in window)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>IE 早些版本时，IE10 及以下，<code>window.ActiveXObject</code> 返回一个对象，<code>!window.ActiveXObject</code> 则变为 false，<code>!!window.ActiveXObject</code> 则为 true，因为是或 || 符号后续无需再判断，返回 true。</li>
<li>IE11 中，<code>window.ActiveXObject</code> 返回 undefine，<code>!window.ActiveXObject</code> 则变成了 true，<code>!!window.ActiveXObject</code> 则变成了 false，进入 <code>&quot;window.ActiveXObject&quot; in window</code> 判断，该判断条件在 IE11 下返回 true。</li>
<li>其他非 IE 浏览器，如 chrome，firefox，<code>window.ActiveXObject</code> 都是 undefine，<code>!!window.ActiveXObject</code> 都是返回的 false，而 <code>&quot;window.ActiveXObject&quot; in window</code> 也是返回 false，因此上述判断函数在非 IE 浏览器中返回的都是 false。</li>
</ul>
<h2 id="判断是否是-IE-浏览器且给出-IE-版本"><a href="#判断是否是-IE-浏览器且给出-IE-版本" class="headerlink" title="判断是否是 IE 浏览器且给出 IE 版本"></a>判断是否是 IE 浏览器且给出 IE 版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function IEVersion() &#123;</span><br><span class="line">    var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串</span><br><span class="line">    var isIE = userAgent.indexOf(&quot;compatible&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;MSIE&quot;) &gt; -1; //判断是否IE&lt;11浏览器</span><br><span class="line">    var isEdge = userAgent.indexOf(&quot;Edge&quot;) &gt; -1 &amp;&amp; !isIE; //判断是否IE的Edge浏览器</span><br><span class="line">    var isIE11 = userAgent.indexOf(&#x27;Trident&#x27;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;rv:11.0&quot;) &gt; -1;</span><br><span class="line">    if(isIE) &#123;</span><br><span class="line">        var reIE = new RegExp(&quot;MSIE (\\d+\\.\\d+);&quot;);</span><br><span class="line">        reIE.test(userAgent);</span><br><span class="line">        var fIEVersion = parseFloat(RegExp[&quot;$1&quot;]);</span><br><span class="line">        if(fIEVersion == 7) &#123;</span><br><span class="line">            return 7;</span><br><span class="line">        &#125; else if(fIEVersion == 8) &#123;</span><br><span class="line">            return 8;</span><br><span class="line">        &#125; else if(fIEVersion == 9) &#123;</span><br><span class="line">            return 9;</span><br><span class="line">        &#125; else if(fIEVersion == 10) &#123;</span><br><span class="line">            return 10;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return 6;//IE版本&lt;=7</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if(isEdge) &#123;</span><br><span class="line">        return &#x27;edge&#x27;;//edge</span><br><span class="line">    &#125; else if(isIE11) &#123;</span><br><span class="line">        return 11; //IE11</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return -1;//不是ie浏览器</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断主流浏览器版本"><a href="#判断主流浏览器版本" class="headerlink" title="判断主流浏览器版本"></a>判断主流浏览器版本</h2><p>判断非 IE 类浏览器时，Chrome 浏览器不能直接用 <code>navigator.userAgent.indexOf(&#39;Chrome&#39;)&gt;-1</code> 直接判断，因为 Edge 和 Opera 的浏览器信息都含有 Chrome 字符。代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function browserVersion() &#123;</span><br><span class="line">    var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串</span><br><span class="line">    var isIE = userAgent.indexOf(&quot;compatible&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;MSIE&quot;) &gt; -1; //判断是否IE&lt;11浏览器</span><br><span class="line">    var isIE11 = userAgent.indexOf(&#x27;Trident&#x27;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;rv:11.0&quot;) &gt; -1;</span><br><span class="line">    var isEdge = userAgent.indexOf(&quot;Edge&quot;) &gt; -1 &amp;&amp; !isIE; //Edge浏览器</span><br><span class="line">    var isFirefox = userAgent.indexOf(&quot;Firefox&quot;) &gt; -1; //Firefox浏览器</span><br><span class="line">    var isOpera = userAgent.indexOf(&quot;Opera&quot;)&gt;-1 || userAgent.indexOf(&quot;OPR&quot;)&gt;-1 ; //Opera浏览器</span><br><span class="line">    var isChrome = userAgent.indexOf(&quot;Chrome&quot;)&gt;-1 &amp;&amp; userAgent.indexOf(&quot;Safari&quot;)&gt;-1 &amp;&amp; userAgent.indexOf(&quot;Edge&quot;)==-1 &amp;&amp; userAgent.indexOf(&quot;OPR&quot;)==-1; //Chrome浏览器</span><br><span class="line">    var isSafari = userAgent.indexOf(&quot;Safari&quot;)&gt;-1 &amp;&amp; userAgent.indexOf(&quot;Chrome&quot;)==-1 &amp;&amp; userAgent.indexOf(&quot;Edge&quot;)==-1 &amp;&amp; userAgent.indexOf(&quot;OPR&quot;)==-1; //Safari浏览器</span><br><span class="line">    if(isIE) &#123;</span><br><span class="line">        var reIE = new RegExp(&quot;MSIE (\\d+\\.\\d+);&quot;);</span><br><span class="line">        reIE.test(userAgent);</span><br><span class="line">        var fIEVersion = parseFloat(RegExp[&quot;$1&quot;]);</span><br><span class="line">        if(fIEVersion == 7) &#123;</span><br><span class="line">            return &#x27;IE7&#x27;;</span><br><span class="line">        &#125; else if(fIEVersion == 8) &#123;</span><br><span class="line">            return &#x27;IE8&#x27;;</span><br><span class="line">        &#125; else if(fIEVersion == 9) &#123;</span><br><span class="line">            return &#x27;IE9&#x27;;</span><br><span class="line">        &#125; else if(fIEVersion == 10) &#123;</span><br><span class="line">            return &#x27;IE10&#x27;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &#x27;IE6&#x27;;//IE版本&lt;7</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if(isIE11) &#123;</span><br><span class="line">        return &#x27;IE11&#x27;;</span><br><span class="line">    &#125; else if(isEdge) &#123;</span><br><span class="line">        return &#x27;Edge&#x27;+userAgent.split(&#x27;Edge/&#x27;)[1].split(&#x27;.&#x27;)[0];</span><br><span class="line">    &#125; else if(isFirefox) &#123;</span><br><span class="line">        return &#x27;Firefox&#x27;+userAgent.split(&#x27;Firefox/&#x27;)[1].split(&#x27;.&#x27;)[0];</span><br><span class="line">    &#125; else if(isOpera) &#123;</span><br><span class="line">        return &#x27;Opera&#x27;+userAgent.split(&#x27;OPR/&#x27;)[1].split(&#x27;.&#x27;)[0];</span><br><span class="line">    &#125; else if(isChrome) &#123;</span><br><span class="line">        return &#x27;Chrome&#x27;+userAgent.split(&#x27;Chrome/&#x27;)[1].split(&#x27;.&#x27;)[0];</span><br><span class="line">    &#125; else if(isSafari) &#123;</span><br><span class="line">        return &#x27;Safari&#x27;;+userAgent.split(&#x27;Safari/&#x27;)[1].split(&#x27;.&#x27;)[0];</span><br><span class="line">    &#125; else&#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS时间格式化方法</title>
    <url>/liuqi_blogs/2021/03/20/JS%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>日常开发中经常会有各种时间格式化的需求，这里记录一下常用的方法。</p>
<h2 id="Moment"><a href="#Moment" class="headerlink" title="Moment"></a>Moment</h2><p>Moment.js 是一个轻量级的 JavaScript 时间库，它方便了日常开发中对时间的操作，提高了开发效率。</p>
<p>安装：</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install moment --save</span><br></pre></td></tr></table></figure>

<p>引入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import moment from &#x27;moment&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="格式化时间用法"><a href="#格式化时间用法" class="headerlink" title="格式化时间用法"></a>格式化时间用法</h3><table>
<thead>
<tr>
<th align="left">格式代码</th>
<th align="left">说明</th>
<th align="left">返回值例子</th>
</tr>
</thead>
<tbody><tr>
<td align="left">M</td>
<td align="left">数字表示的月份，没有前导零</td>
<td align="left">1 到 12</td>
</tr>
<tr>
<td align="left">MM</td>
<td align="left">数字表示的月份，有前导零</td>
<td align="left">01 到 12</td>
</tr>
<tr>
<td align="left">MMM</td>
<td align="left">三个字母缩写表示的月份</td>
<td align="left">Jan 到 Dec</td>
</tr>
<tr>
<td align="left">MMMM</td>
<td align="left">月份，完整的文本格式</td>
<td align="left">January 到 December</td>
</tr>
<tr>
<td align="left">Q</td>
<td align="left">季度</td>
<td align="left">1 到 4</td>
</tr>
<tr>
<td align="left">D</td>
<td align="left">月份中的第几天，没有前导零</td>
<td align="left">1 到 31</td>
</tr>
<tr>
<td align="left">DD</td>
<td align="left">月份中的第几天，有前导零</td>
<td align="left">01 到 31</td>
</tr>
<tr>
<td align="left">d</td>
<td align="left">星期中的第几天，数字表示</td>
<td align="left">0 到 6，0 表示周日，6 表示周六</td>
</tr>
<tr>
<td align="left">ddd</td>
<td align="left">三个字母表示星期中的第几天</td>
<td align="left">Sun 到 Sat</td>
</tr>
<tr>
<td align="left">dddd</td>
<td align="left">星期几，完整的星期文本</td>
<td align="left">从 Sunday 到 Saturday</td>
</tr>
<tr>
<td align="left">w</td>
<td align="left">年份中的第几周</td>
<td align="left">如 42：表示第 42 周</td>
</tr>
<tr>
<td align="left">YYYY</td>
<td align="left">四位数字完整表示的年份</td>
<td align="left">如：2014 或 2000</td>
</tr>
<tr>
<td align="left">YY</td>
<td align="left">两位数字表示的年份</td>
<td align="left">如：14 或 98</td>
</tr>
<tr>
<td align="left">A</td>
<td align="left">大写的 AM PM</td>
<td align="left">AM PM</td>
</tr>
<tr>
<td align="left">a</td>
<td align="left">小写的 am pm</td>
<td align="left">am pm</td>
</tr>
<tr>
<td align="left">HH</td>
<td align="left">小时，24 小时制，有前导零</td>
<td align="left">00 到 23</td>
</tr>
<tr>
<td align="left">H</td>
<td align="left">小时，24 小时制，无前导零</td>
<td align="left">0 到 23</td>
</tr>
<tr>
<td align="left">hh</td>
<td align="left">小时，12 小时制，有前导零</td>
<td align="left">00 到 12</td>
</tr>
<tr>
<td align="left">h</td>
<td align="left">小时，12 小时制，无前导零</td>
<td align="left">0 到 12</td>
</tr>
<tr>
<td align="left">m</td>
<td align="left">没有前导零的分钟数</td>
<td align="left">0 到 59</td>
</tr>
<tr>
<td align="left">mm</td>
<td align="left">有前导零的分钟数</td>
<td align="left">00 到 59</td>
</tr>
<tr>
<td align="left">s</td>
<td align="left">没有前导零的秒数</td>
<td align="left">1 到 59</td>
</tr>
<tr>
<td align="left">ss</td>
<td align="left">有前导零的描述</td>
<td align="left">01 到 59</td>
</tr>
<tr>
<td align="left">X</td>
<td align="left">Unix 时间戳</td>
<td align="left">1411572969</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">moment().format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)</span><br></pre></td></tr></table></figure>

<h3 id="Moment-与-JS-原生-Date-互相转换"><a href="#Moment-与-JS-原生-Date-互相转换" class="headerlink" title="Moment 与 JS 原生 Date 互相转换"></a>Moment 与 JS 原生 Date 互相转换</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">moment().toDate()</span><br><span class="line">new Date(moment())</span><br></pre></td></tr></table></figure>

<h2 id="Vue-Date-原型挂载方法"><a href="#Vue-Date-原型挂载方法" class="headerlink" title="Vue Date 原型挂载方法"></a>Vue Date 原型挂载方法</h2><p>Date 原型挂载 format 属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Date.prototype.format = function (format) &#123;</span><br><span class="line">    var o = &#123;</span><br><span class="line">        &quot;M+&quot;: this.getMonth() + 1, //month</span><br><span class="line">        &quot;d+&quot;: this.getDate(), //day</span><br><span class="line">        &quot;H+&quot;: this.getHours(), //hour</span><br><span class="line">        &quot;m+&quot;: this.getMinutes(), //minute</span><br><span class="line">        &quot;s+&quot;: this.getSeconds(), //second</span><br><span class="line">        &quot;q+&quot;: Math.floor((this.getMonth() + 3) / 3), //quarter</span><br><span class="line">        &quot;S&quot;: this.getMilliseconds() //millisecond</span><br><span class="line">    &#125;</span><br><span class="line">    if (/(y+)/.test(format)) &#123;</span><br><span class="line">        format = format.replace(RegExp.$1, (this.getFullYear() + &quot;&quot;).substr(4 - RegExp.$1.length));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (var k in o) &#123;</span><br><span class="line">        if (new RegExp(&quot;(&quot; + k + &quot;)&quot;).test(format)) &#123;</span><br><span class="line">            format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (&quot;00&quot; + o[k]).substr((&quot;&quot; + o[k]).length));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return format;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var today = new Date().format(&#x27;yyyy-MM-dd&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/Jimc/p/10591580.html">moment.js 使用方法总结</a></li>
<li><a href="https://blog.csdn.net/m0_46309087/article/details/106846893">vue 项目给 Date 原型挂载方法（解决 Date ().fromat 无效问题）</a></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS的Object.defineProperty用法</title>
    <url>/liuqi_blogs/2021/08/06/JS%E7%9A%84Object-defineProperty%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p><code>Object.defineProperty</code> 用于在一个对象上定义一个新的属性，或者修改一个对象现有的属性，并返回这个对象。</p>
<h2 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h2><span id="more"></span>

<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">默认值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">configurable</td>
<td align="left">false</td>
<td align="left">描述属性是否可以被删除，默认为 false</td>
</tr>
<tr>
<td align="left">enumerable</td>
<td align="left">false</td>
<td align="left">描述属性是否可以被 for…in 或 Object.keys 枚举，默认为 false</td>
</tr>
<tr>
<td align="left">writable</td>
<td align="left">false</td>
<td align="left">描述属性是否可以修改，默认为 false</td>
</tr>
<tr>
<td align="left">get</td>
<td align="left">undefined</td>
<td align="left">当访问属性时触发该方法，默认为 undefined</td>
</tr>
<tr>
<td align="left">set</td>
<td align="left">undefined</td>
<td align="left">当属性被修改时触发该方法，默认为 undefined</td>
</tr>
<tr>
<td align="left">value</td>
<td align="left">undefined</td>
<td align="left">属性值，默认为 undefined</td>
</tr>
</tbody></table>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="Object-defineProperty-默认定义"><a href="#Object-defineProperty-默认定义" class="headerlink" title="Object.defineProperty() 默认定义"></a><code>Object.defineProperty()</code> 默认定义</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line">console.log(&#x27;obj:&#x27;, obj);</span><br><span class="line"></span><br><span class="line">// 默认不可删除，不可枚举，不可修改</span><br><span class="line">Object.defineProperty(obj, &#x27;name&#x27;, &#123;</span><br><span class="line">  value: &#x27;Jameswain&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(&#x27;obj默认值:&#x27;, obj);</span><br><span class="line">delete obj.name;</span><br><span class="line">console.log(&#x27;obj删除后:&#x27;, obj);</span><br><span class="line">console.log(&#x27;obj枚举:&#x27;, Object.keys(obj));</span><br><span class="line">obj.name = &#x27;詹姆斯，韦恩&#x27;;</span><br><span class="line">console.log(&#x27;obj修改后:&#x27;, obj);</span><br><span class="line">// 不能重新定义，会报重复定义错误: Uncaught TypeError: Cannot redefine property: name</span><br><span class="line">Object.defineProperty(obj, &#x27;name&#x27;, &#123;</span><br><span class="line">  value: &#x27;詹姆斯，韦恩&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">obj: &#123;&#125;</span><br><span class="line">obj默认值: &#123;name: &#x27;Jameswain&#x27;&#125;</span><br><span class="line">obj删除后: &#123;name: &#x27;Jameswain&#x27;&#125;</span><br><span class="line">obj枚举: []</span><br><span class="line">obj修改后: &#123;name: &#x27;Jameswain&#x27;&#125;</span><br><span class="line">Uncaught TypeError: Cannot redefine property: name</span><br><span class="line">    at Function.defineProperty (&lt;anonymous&gt;)</span><br><span class="line">    at &lt;anonymous&gt;:15:8</span><br></pre></td></tr></table></figure>

<p><strong>从运行结果可以发现，使用 <code>Object.defineProperty()</code> 定义的属性，默认是不可以被修改，不可以被枚举，不可以被删除的。</strong></p>
<h3 id="set-和-get-用法"><a href="#set-和-get-用法" class="headerlink" title="set 和 get 用法"></a>set 和 get 用法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const o = &#123;</span><br><span class="line">  __name: &#x27;&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">Object.defineProperty(o, &#x27;name&#x27;, &#123;</span><br><span class="line">  enumerable: true,</span><br><span class="line">  configurable: true,</span><br><span class="line">  // writable: true,    // 如果设置了get或者set，writable和value属性必须注释掉</span><br><span class="line">  // value: &#x27;&#x27;,         // writable和value无法与set和get共存</span><br><span class="line">  get: function () &#123;    // 如果设置了get或者set就不能设置writable和value</span><br><span class="line">    console.log(&#x27;get&#x27;, this);</span><br><span class="line">    return &#x27;My name is &#x27; + this.__name;</span><br><span class="line">  &#125;,</span><br><span class="line">  set: function (newVal) &#123;</span><br><span class="line">    localStorage.setItem(&#x27;name&#x27;, newVal);</span><br><span class="line">    console.log(&#x27;set&#x27;, newVal);</span><br><span class="line">    this.__name = newVal;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(o);</span><br><span class="line">o.name = &#x27;Jameswain&#x27;;</span><br><span class="line">o.name;</span><br><span class="line">console.log(o);</span><br><span class="line">o.name = &#x27;詹姆斯-韦恩&#x27;;</span><br><span class="line">console.log(o);</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;__name: &#x27;&#x27;&#125;</span><br><span class="line">set Jameswain</span><br><span class="line">get &#123;__name: &#x27;Jameswain&#x27;&#125;</span><br><span class="line">&#123;__name: &#x27;Jameswain&#x27;&#125;</span><br><span class="line">set 詹姆斯-韦恩</span><br><span class="line">&#123;__name: &#x27;詹姆斯-韦恩&#x27;&#125;</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure>

<p><strong>注意：设置 set 或者 get，就不能在设置 value 和 writable，否则会报错</strong></p>
<h2 id="实际应用-Fetch-拦截"><a href="#实际应用-Fetch-拦截" class="headerlink" title="实际应用 - Fetch 拦截"></a>实际应用 - Fetch 拦截</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 保存一份旧的引用地址</span><br><span class="line">const originFetch = window.fetch;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(window, &quot;fetch&quot;, &#123; </span><br><span class="line">    configurable: true, </span><br><span class="line">    enumerable: true, </span><br><span class="line">    get() &#123; </span><br><span class="line">        return (url: string, options: any = &#123;&#125;) =&gt; &#123; </span><br><span class="line">            return originFetch(url, options)</span><br><span class="line">                .then((res) =&gt; &#123; </span><br><span class="line">                    // 自定义操作，比如计算接口耗时</span><br><span class="line">                    // ...</span><br><span class="line">                    return res</span><br><span class="line">                &#125;) </span><br><span class="line">        &#125;; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://segmentfault.com/a/1190000019446677">Object.defineProperty()</a></li>
<li><a href="https://juejin.cn/post/6921525039569305614">前端监控平台系列：微信小程序监控和 Web 监控</a></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 将本地文件上传Linux服务器, 即ssh 命令上传本地文件</title>
    <url>/liuqi_blogs/2019/02/23/Linux-%E5%B0%86%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%8D%B3ssh-%E5%91%BD%E4%BB%A4%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>scp -P 端口 c://xxxx.txt user@ip:/home/root<br>注意：</p>
<p>-P 大写</p>
<p>-i 公钥</p>
<p>1、从服务器上下载文件<br>scp username@servername:/path/filename /var/www/local_dir（本地目录）</p>
<span id="more"></span>

<p> 例如scp <a href="mailto:&#x72;&#x6f;&#111;&#x74;&#64;&#49;&#x39;&#50;&#46;&#49;&#x36;&#x38;&#x2e;&#x30;&#x2e;&#49;&#48;&#x31;">&#x72;&#x6f;&#111;&#x74;&#64;&#49;&#x39;&#50;&#46;&#49;&#x36;&#x38;&#x2e;&#x30;&#x2e;&#49;&#48;&#x31;</a>:/var/www/test.txt  把192.168.0.101上的/var/www/test.txt 的文件下载到/var/www/local_dir（本地目录）</p>
<p>2、上传本地文件到服务器<br>scp /path/filename username@servername:/path   </p>
<p>例如scp /var/www/test.php  <a href="mailto:&#x72;&#x6f;&#x6f;&#116;&#x40;&#49;&#x39;&#x32;&#x2e;&#x31;&#x36;&#x38;&#46;&#48;&#x2e;&#x31;&#48;&#x31;">&#x72;&#x6f;&#x6f;&#116;&#x40;&#49;&#x39;&#x32;&#x2e;&#x31;&#x36;&#x38;&#46;&#48;&#x2e;&#x31;&#48;&#x31;</a>:/var/www/  把本机/var/www/目录下的test.php文件上传到192.168.0.101这台服务器上的/var/www/目录中</p>
<p>3、从服务器下载整个目录<br>scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）</p>
<p>例如:scp -r <a href="mailto:&#x72;&#x6f;&#111;&#x74;&#64;&#49;&#x39;&#x32;&#46;&#x31;&#54;&#x38;&#x2e;&#48;&#x2e;&#x31;&#x30;&#x31;">&#x72;&#x6f;&#111;&#x74;&#64;&#49;&#x39;&#x32;&#46;&#x31;&#54;&#x38;&#x2e;&#48;&#x2e;&#x31;&#x30;&#x31;</a>:/var/www/test  /var/www/  </p>
<p>4、上传目录到服务器<br>scp  -r local_dir username@servername:remote_dir<br>例如：scp -r test  <a href="mailto:&#114;&#111;&#111;&#116;&#64;&#x31;&#57;&#x32;&#46;&#x31;&#x36;&#x38;&#x2e;&#48;&#46;&#49;&#x30;&#49;">&#114;&#111;&#111;&#116;&#64;&#x31;&#57;&#x32;&#46;&#x31;&#x36;&#x38;&#x2e;&#48;&#46;&#49;&#x30;&#49;</a>:/var/www/   把当前目录下的test目录上传到服务器的/var/www/ 目录</p>
<hr>
<p>本文介绍几种常见的方法，把文件上传到Linux服务器中！</p>
<p>常见有使用：scp命令、xshell软件里的xftp程序、U盘挂载、服务器自带的lrzsz程序。</p>
<p>一、scp使用说明：</p>
<p>&emsp;1、把本机的文件传给目的服务器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scp get66.<span class="property">pcap</span> root@<span class="number">192.168</span><span class="number">.1</span><span class="number">.147</span>:/<span class="variable language_">super</span></span><br></pre></td></tr></table></figure>
<p>&emsp;备注：把本机get66.pcap拷贝到147这台服务器的super目录下，需要提供147的密码<br><br/><br/><br>&emsp;2、在本机上执行scp，把远端的服务器文件拷贝到本机上：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scp root@<span class="number">192.168</span><span class="number">.1</span><span class="number">.147</span>:<span class="regexp">/super/</span>dns.<span class="property">pcap</span> /</span><br></pre></td></tr></table></figure>
<p>&emsp;备注：在本机上执行scp，把远端服务器的dns.pcap文件拷贝到本机的根目录下<br><br/><br><br/><br>&emsp;3、拷贝目录下的所有文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scp -r /<span class="variable language_">super</span>/ root@<span class="number">192.168</span><span class="number">.1</span><span class="number">.145</span>:/</span><br></pre></td></tr></table></figure>
<p>&emsp;备注：把/super/目录下的所有文件，拷贝到145服务器根目录下</p>
<p><br/><br/><br>二、xshell软件里的xftp程序：</p>
<p>xshell这个软件很好，强烈推荐哦！！！</p>
<p>里面有个xftp小插件，可以支持文件在笔记本和服务器互传，这个小插件需要单独在网上下载，直接百度搜xftp，很方便。</p>
<p><br/><br/><br>三、U盘挂载</p>
<p>文件在U盘，那好办，直接插到服务器上，然后挂载上，就能把U盘上的文件拷贝到服务器上了</p>
<p>1、执行fdisk -l查看：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.51cto.com/wyfs02/M02/9A/5F/wKiom1lU0n2TnhuFAABDrviioDE238.png-wh_500x0-wm_3-wmp_4-s_3569858331.png" alt="alt 属性"></p>
<p>备注：插上U盘后，fdisk -l查看服务器识别到了，/dev/sdc是我的U盘，16G的</p>
<p>2、挂载到自定义目录下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mkdir /upan</span><br></pre></td></tr></table></figure>
<p>新建一个目录</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mount /dev/sdc1 /upan/</span><br></pre></td></tr></table></figure>

<p>把U盘挂载到刚新建的目录下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd /upan/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<p>就能看到U盘里所有的文件了</p>
<p>3、把文件拷到服务器home下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cp autorun.<span class="property">inf</span> /home/</span><br></pre></td></tr></table></figure>
<p>把U盘里的autorun.inf拷贝到服务器的home目录下</p>
<br/>
4、卸载U盘<br/>
文件拷到服务器后，建议先手动执行命令，然后再拔U盘，防止U盘损坏！！！

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd /</span><br><span class="line">umount /dev/sdc1</span><br></pre></td></tr></table></figure>
<p>好了，拔出U盘吧（按照上面的来，先退回到根目录下，再执行umount命令，不然会报错提示U盘在使用，无法卸载）</p>
<p><img src="https://s6.51cto.com/wyfs02/M01/9A/60/wKioL1lU1TODfo5-AABc6cc7EEI556.png-wh_500x0-wm_3-wmp_4-s_3197153899.png"></p>
<p>四、服务器自带的lrzsz程序</p>
<p>现在大多数Linux服务器都带有lrzsz程序，方便上传下载文件，如果没有，可以直接下载rpm包安装下就好。</p>
<p> <a href="http://down.51cto.com/data/2322755">lrzsz安装包链接!</a></p>
<p>1、rz（笔记本上传给服务器）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure>
<p>选择笔记本上文件传给服务器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sz test.<span class="property">tar</span></span><br></pre></td></tr></table></figure>

<p>把服务器的test.tar拷贝给笔记本。</p>
<p>总结：以上的几种方法在常见的场景应该是足够用了，若其他同志有好的方法，也可以推荐推荐，谢谢！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Material-UI</title>
    <url>/liuqi_blogs/2021/01/02/Material%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Material-UI"><a href="#Material-UI" class="headerlink" title="Material-UI"></a>Material-UI</h1><p>下载对应的库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @material-ui/core axios redux react-router-dom @material-ui/icons -S</span><br></pre></td></tr></table></figure>

<p>导入字体</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--字体库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;display=swap&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--图标库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://material-ui.com/zh">https://material-ui.com/zh</a></p>
<h3 id="hooks的语法理解"><a href="#hooks的语法理解" class="headerlink" title="hooks的语法理解"></a>hooks的语法理解</h3><blockquote>
<p>函数式组件 如果想使用state name遇到用到hooks的api 具体如下  </p>
</blockquote>
<p>遇到</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state中 value 的默认值是female  setValue是一个函数 用来改变value的值</span></span><br><span class="line"><span class="keyword">const</span> [value, setValue] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="title function_">setValue</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br></pre></td></tr></table></figure>

<p>转换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">  <span class="attr">value</span>:<span class="string">&#x27;female&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">value</span>:event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>react.js</category>
      </categories>
      <tags>
        <tag>react.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx反向代理配置总结</title>
    <url>/liuqi_blogs/2022/02/21/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>在前后端分离项目中，可以通过前端配置 Nginx 来解决跨域问题。</p>
<blockquote>
<p>前端页面 <code>mysite.com</code>，后台接口是在 <code>myserver.com</code> 域下的 <code>myserver.com/querytags</code> 接口，当在页面里直接请求，浏览器会报跨域的错误。为了绕开浏览器的跨域安全限制，现在需要将请求的域名改成 <code>mysite.com</code>，同时约定一个 URL 规则来表明代理请求的身份，然后 Nginx 通过匹配该规则，将请求代理回原来的域。</p>
</blockquote>
<span id="more"></span>

<p>本文总结一下 Nginx 反向代理匹配规则。</p>
<h2 id="location-匹配规则"><a href="#location-匹配规则" class="headerlink" title="location 匹配规则"></a>location 匹配规则</h2><p>Nginx 官方文档给出 location 语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location [=|~|~*|^~] uri &#123; … &#125;</span><br></pre></td></tr></table></figure>

<p>其中，方括号中的四种标识符是可选项，用来改变请求字符串和 uri 的匹配方式。uri 是待匹配的请求字符串，可以是不包含正则的字符串，这种模式被称为 “标准的 uri”；也可以包含正则，这种模式被称为” 正则 uri”。</p>
<h3 id="可选标识符"><a href="#可选标识符" class="headerlink" title="可选标识符"></a>可选标识符</h3><table>
<thead>
<tr>
<th align="left">标识符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>=</code></td>
<td align="left">精确匹配；用于标准 uri 前，要求请求字符串和 uri 严格匹配。如果匹配成功，就停止匹配，立即执行该 location 里面的请求。</td>
</tr>
<tr>
<td align="left"><code>~</code></td>
<td align="left">正则匹配；用于正则 uri 前，表示 uri 里面包含正则，并且区分大小写。</td>
</tr>
<tr>
<td align="left"><code>~*</code></td>
<td align="left">正则匹配；用于正则 uri 前，表示 uri 里面包含正则，不区分大小写。</td>
</tr>
<tr>
<td align="left"><code>^~</code></td>
<td align="left">非正则匹配；用于标准 uri 前，Nginx 服务器匹配到前缀最多的 uri 后就结束，该模式匹配成功后，不会使用正则匹配。</td>
</tr>
<tr>
<td align="left">无</td>
<td align="left">普通匹配（最长字符匹配）；与 location 顺序无关，是按照匹配的长短来取匹配结果。若完全匹配，就停止匹配。</td>
</tr>
</tbody></table>
<h3 id="location-匹配顺序"><a href="#location-匹配顺序" class="headerlink" title="location 匹配顺序"></a>location 匹配顺序</h3><p><strong>总原则：先前缀字符串，再正则表达式</strong>。</p>
<p><strong>不管配置文件中的 location 顺序怎么写，在匹配时，都会先将所有前缀字符串拎出来，放在第一位；然后再去找所有正则表达式，作为第二位</strong>。</p>
<ol>
<li>首先匹配前缀字符串。前缀字符串有以下几种形式（举例）：<ul>
<li>a、<code>location = /data/ &#123;&#125;</code></li>
<li>b、<code>location ^~ /data/ &#123;&#125;</code></li>
<li>c、<code>location /data/ &#123;&#125;</code></li>
</ul>
</li>
<li>然后匹配正则表达式。正则表达式的几种形式（举例）：<ul>
<li>d、<code>location ~ \.html? &#123;&#125;</code></li>
<li>e、<code>location ~* \.html? &#123;&#125;</code></li>
</ul>
</li>
</ol>
<p>匹配顺序：</p>
<ul>
<li>a 的权限最大，一旦匹配到，立即停止，直接使用对应的 location。</li>
<li>b 的权限次之，一旦匹配到，就不再检查正则表达式。相当于打断了后续。</li>
<li>c 如果匹配到了，不会立即停止，而是会先将它存储起来，然后继续往下匹配。</li>
<li>d 如果匹配到了，立即停止，直接使用对应的 location；</li>
<li>d 如果没有匹配，继续往下找。</li>
<li>e 如果匹配到了，立即停止，直接使用对应的 location；</li>
<li>e 如果没有匹配，就使用先前存储的那个前缀字符串。</li>
</ul>
<p>也就是说，<code>location /data/ &#123;&#125;</code> 这种模式是等级最低的。实在匹配不到了，才勉强使用它。</p>
<h3 id="最长匹配"><a href="#最长匹配" class="headerlink" title="最长匹配"></a>最长匹配</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location /images/ &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个请求为：<code>http://www.example.com/images/a.png</code></p>
<p>对于 <code>/images/a.png</code> 这个 URI 来说，上面的 2 个 location 中，<code>location /images/</code> 是最长匹配。虽然 <code>location /</code> 也能匹配，但不是最长的。</p>
<p>由于不是精确匹配，Nginx 此时会先将这个最长匹配保存起来。</p>
<ul>
<li>如果后面配置了正则表达式，那么 Nginx 会继续向下匹配正则表达式。</li>
<li>如果后面没有配置正则表达式，Nginx 就会使用刚才保存的最长的那个前缀匹配，也就是 <code>location /images/</code> 对应的地方。</li>
</ul>
<h2 id="proxy-pass-使用"><a href="#proxy-pass-使用" class="headerlink" title="proxy_pass 使用"></a><code>proxy_pass</code> 使用</h2><p>下面是几个例子。</p>
<h3 id="proxy-pass-直接映射到主机，没有其他路径"><a href="#proxy-pass-直接映射到主机，没有其他路径" class="headerlink" title="proxy_pass 直接映射到主机，没有其他路径"></a><code>proxy_pass</code> 直接映射到主机，没有其他路径</h3><table>
<thead>
<tr>
<th align="left">location</th>
<th align="left"><code>proxy_pass</code></th>
<th align="left">实际访问目标</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>/nginx_location/</code></td>
<td align="left"><code>http://server</code></td>
<td align="left"><code>http://server/nginx_location/some/path</code></td>
</tr>
<tr>
<td align="left"><code>/nginx_location/</code></td>
<td align="left"><code>http://server/</code></td>
<td align="left"><code>http://server/some/path</code></td>
</tr>
<tr>
<td align="left"><code>/nginx_location</code></td>
<td align="left"><code>http://server</code></td>
<td align="left"><code>http://server/nginx_location/some/path</code></td>
</tr>
<tr>
<td align="left"><code>/nginx_location</code></td>
<td align="left"><code>http://server/</code></td>
<td align="left"><code>http://server//some/path</code></td>
</tr>
</tbody></table>
<h3 id="proxy-pass-直接映射到主机的-test"><a href="#proxy-pass-直接映射到主机的-test" class="headerlink" title="proxy_pass 直接映射到主机的 /test"></a><code>proxy_pass</code> 直接映射到主机的 /test</h3><table>
<thead>
<tr>
<th align="left">location</th>
<th align="left"><code>proxy_pass</code></th>
<th align="left">实际访问目标</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>/nginx_location/</code></td>
<td align="left"><code>http://server/test</code></td>
<td align="left"><code>http://server/testsome/path</code></td>
</tr>
<tr>
<td align="left"><code>/nginx_location/</code></td>
<td align="left"><code>http://server/test/</code></td>
<td align="left"><code>http://server/test/some/path</code></td>
</tr>
<tr>
<td align="left"><code>/nginx_location</code></td>
<td align="left"><code>http://server/test</code></td>
<td align="left"><code>http://server/test/some/path</code></td>
</tr>
<tr>
<td align="left"><code>/nginx_location</code></td>
<td align="left"><code>http://server/test/</code></td>
<td align="left"><code>http://server/test//some/path</code></td>
</tr>
</tbody></table>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实根本没这么复杂，只有两种情况：</p>
<ul>
<li>目标地址中不带 uri。即 <code>proxy_pass</code> 的参数形如 <code>http://127.0.0.1:8090</code>。此时新的目标 url 中，<strong>匹配的 uri 部分不做修改，原来是什么样就是什么样</strong>。</li>
<li>目标地址中带 uri。即 <code>proxy_pass</code> 的参数形如 <code>http://127.0.0.1:8090/dir1/dir2</code>。此时新的目标 url 中，<strong>匹配的 uri 部分将会被修改为该参数中的 uri</strong>，如 <code>http://127.0.0.1:8888/dir1/dir2</code>。</li>
</ul>
<p>有人说，你没有讨论 ip 和端口后带不带 <code>/</code> 的区别。其实是不需要的，因为 <code>/</code> 本身就是一个 uri，很明显属于上面的第二种情况。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jianshu.com/p/73e2cd39722c">Nginx 反向代理中 / 符号的一些坑</a></li>
<li><a href="https://pureage.info/2013/10/31/130.html">关于 proxy_pass 的参数路径问题</a></li>
<li><a href="https://www.cnblogs.com/t-road/p/13055355.html">nginx 的 location 匹配顺序</a></li>
<li><a href="https://blog.csdn.net/youcijibi/article/details/88201629">nginx 配置中 location 匹配规则详解</a></li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloudGateway解决前端请求跨域问题</title>
    <url>/liuqi_blogs/2022/02/03/SpringCloudGateway%E8%A7%A3%E5%86%B3%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在前后端分离的项目中，一般都会碰到跨域问题，对于直接请求后端应用的情况，可以直接参考：<a href="https://tding.top/archives/17a727e7.html">Spring Boot 解决前端请求跨域问题</a>。</p>
<p>而随着微服务架构概念的提出，API 网关成为了微服务架构的一个标配组件。所有的客户端都通过统一的网关接入微服务，在网关层处理所有非业务功能。</p>
<p>因此，需要在网关这边处理跨域问题。</p>
<span id="more"></span>


<h2 id="Spring-Cloud-Gateway-解决跨域问题"><a href="#Spring-Cloud-Gateway-解决跨域问题" class="headerlink" title="Spring Cloud Gateway 解决跨域问题"></a>Spring Cloud Gateway 解决跨域问题</h2><p>在网关代码中增加配置类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.cors.CorsConfiguration;</span><br><span class="line">import org.springframework.web.cors.reactive.CorsWebFilter;</span><br><span class="line">import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;</span><br><span class="line">import org.springframework.web.util.pattern.PathPatternParser;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class GwCorsFilter &#123;</span><br><span class="line">  @Bean</span><br><span class="line">  public CorsWebFilter corsFilter() &#123;</span><br><span class="line">    CorsConfiguration config = new CorsConfiguration();</span><br><span class="line">	  // 允许cookies跨域</span><br><span class="line">    config.setAllowCredentials(true); </span><br><span class="line">    // 允许向该服务器提交请求的URI，*表示全部允许，在SpringMVC中，如果设成*，会自动转成当前请求头中的Origin</span><br><span class="line">    config.addAllowedOrigin(&quot;*&quot;);</span><br><span class="line">    // 允许访问的头信息 *表示全部</span><br><span class="line">    config.addAllowedHeader(&quot;*&quot;);</span><br><span class="line">    // 预检请求的缓存时间（秒），即在这个时间段里，对于相同的跨域请求不会再预检了</span><br><span class="line">    config.setMaxAge(18000L);</span><br><span class="line">    // 允许的方法 可设置* 即允许全部http请求方法类型</span><br><span class="line">    config.addAllowedMethod(&quot;OPTIONS&quot;);</span><br><span class="line">    config.addAllowedMethod(&quot;HEAD&quot;);</span><br><span class="line">    config.addAllowedMethod(&quot;GET&quot;);</span><br><span class="line">    config.addAllowedMethod(&quot;PUT&quot;);</span><br><span class="line">    config.addAllowedMethod(&quot;POST&quot;);</span><br><span class="line">    config.addAllowedMethod(&quot;DELETE&quot;);</span><br><span class="line">    config.addAllowedMethod(&quot;PATCH&quot;);</span><br><span class="line">    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(new PathPatternParser());</span><br><span class="line">    source.registerCorsConfiguration(&quot;/**&quot;, config);</span><br><span class="line">    return new CorsWebFilter(source);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果出现以下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The ‘Access-Control-Allow-Origin’ header contains multiple values “*, *”, but only one is allowed.</span><br></pre></td></tr></table></figure>

<p>这是因为后台接口也配置了跨域，重复配置导致的，一个比较简单的办法就是把后台接口的跨域配置去掉。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/leilei1366615/article/details/109171478">spring-cloud（十三）GateWay 跨域、HTTP 超时配置</a></li>
</ul>
]]></content>
      <categories>
        <category>前端，性能优化</category>
      </categories>
      <tags>
        <tag>前端，性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中chunk-vendors.js文件过大问题</title>
    <url>/liuqi_blogs/2022/02/03/Vue%E4%B8%ADchunk-vendors-js%E6%96%87%E4%BB%B6%E8%BF%87%E5%A4%A7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在 Vue 前端项目开发中，发现每次都会有一个很大的 <code>chunk-vendors.js</code> 文件要载入，这也使得页面加载时间变长。</p>
<span id="more"></span>

<h2 id="chunk-vendors-js-是什么"><a href="#chunk-vendors-js-是什么" class="headerlink" title="chunk-vendors.js 是什么"></a><code>chunk-vendors.js</code> 是什么</h2><p>顾名思义，<code>chunk-vendors.js</code> 文件其实包含的是除了自己项目模块外的第三方的依赖，也就是 <code>node_modules</code> 文件夹里边的内容。</p>
<h2 id="chunk-vendors-js-分析"><a href="#chunk-vendors-js-分析" class="headerlink" title="chunk-vendors.js 分析"></a><code>chunk-vendors.js</code> 分析</h2><p>我们可以通过插件 <code>webpack-bundle-analyzer</code> 来可视化地查看 <code>chunk-vendors.js</code> 文件的内容。</p>
<p>安装插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack-bundle-analyzer</span><br></pre></td></tr></table></figure>

<p>在 <code>vue.config.js</code> 中引入这插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const BundleAnalyzerPlugin = require(&#x27;webpack-bundle-analyzer&#x27;).BundleAnalyzerPlugin;</span><br><span class="line">module.exports=&#123;</span><br><span class="line">    configureWebpack:config =&gt;&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            plugins:[</span><br><span class="line">                // 使用默认配置</span><br><span class="line">                new BundleAnalyzerPlugin()</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>未完待续…</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://stackoverflow.com/questions/55054444/what-is-the-chunk-vendors-js-file-and-how-is-it-created-webpack/56272461">What is the chunk-vendors.js file and how is it created? (Webpack)</a></li>
<li><a href="https://juejin.cn/post/6844904190083350542">『Webpack 系列』—— externals 用法详解</a></li>
</ul>
]]></content>
      <categories>
        <category>前端，性能优化</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中style下scope的使用和坑</title>
    <url>/liuqi_blogs/2022/02/24/Vue%E4%B8%ADstyle%E4%B8%8Bscope%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%9D%91/</url>
    <content><![CDATA[<p>在 Vue 组件中，为了使样式私有化（模块化），不对全局造成污染，可以在 style 标签上添加 scoped 属性来表示它只属于当下的模块。</p>
<p>这是一个非常好的举措，但是为什么要慎用呢？因为在我们需要修改公共组件样式的时候，scoped 往往会造成更多的困难，需要增加额外的复杂度。</p>
<span id="more"></span>

<h2 id="scoped-实现私有化样式的原理"><a href="#scoped-实现私有化样式的原理" class="headerlink" title="scoped 实现私有化样式的原理"></a>scoped 实现私有化样式的原理</h2><p>为什么会说，会增加复杂度？那么我们先从的实现模块的原理说起。为了方便称呼，我们假设把这种组件叫做模块私有组件，其他的未加 scoped 的叫做模块一般组件。</p>
<p>通过查看 DOM 结构发现：<strong>Vue 通过在 DOM 结构以及 css 样式上加唯一不重复的标记，以保证唯一，达到样式私有化模块化的目的。</strong></p>
<p>具体的渲染结果是怎样的，通过一个例子来说明。</p>
<h3 id="公共组件-button-组件"><a href="#公共组件-button-组件" class="headerlink" title="公共组件 button 组件"></a>公共组件 button 组件</h3><p>一个公共组件 button，为了样式模块化，给其加上 scoped 属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//button.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;button-warp&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;button&quot;&gt;text&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .button-warp&#123;</span><br><span class="line">    display:inline-block;</span><br><span class="line">  &#125;</span><br><span class="line">  .button&#123;</span><br><span class="line">    padding: 5px 10px;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    border-radus: 2px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="浏览器渲染-button-组件"><a href="#浏览器渲染-button-组件" class="headerlink" title="浏览器渲染 button 组件"></a>浏览器渲染 button 组件</h3><p>button 组件在浏览器渲染出的 HTML 部分和 CSS 部分分别为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div data-v-2311c06a class=&quot;button-warp&quot;&gt;</span><br><span class="line">  &lt;button data-v-2311c06a class=&quot;button&quot;&gt;text&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.button-warp[data-v-2311c06a]&#123;</span><br><span class="line">  display:inline-block;</span><br><span class="line">&#125;</span><br><span class="line">.button[data-v-2311c06a]&#123;</span><br><span class="line">  padding: 5px 10px;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  border-radus: 2px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的字可以看出，添加了 scoped 属性的组件，为了达到组件样式模块化，做了这样的处理：</p>
<p><strong>给 HTML 的 DOM 节点加一个不重复 data 属性 (形如：<code>data-v-2311c06a</code>) 来表示他的唯一性，会在每句 css 选择器的末尾（编译后的生成的 css 语句）加一个当前组件的 data 属性选择器（如 <code>[data-v-2311c06a]</code>）来私有化样式。</strong></p>
<p>大家都知道 css 样式有一个优先级的说法，scoped 的这一操作，虽然达到了组件样式模块化的目的，但是会造成一种后果：<strong>每个样式的权重加重了</strong>。理论上我们要去修改这个样式，需要更高的权重去覆盖这个样式。这是增加复杂度的其中一个维度。</p>
<h3 id="其他组件引用-button-组件"><a href="#其他组件引用-button-组件" class="headerlink" title="其他组件引用 button 组件"></a>其他组件引用 button 组件</h3><p>上面分析了单个组件渲染后的结果，那么组件互相调用之后会出现什么样的结果呢？，具体分两种情况：</p>
<ul>
<li>模块一般组件引用模块私有组件（本质和模块私有组件引用模块一般组件一样）</li>
<li>模块私有组件引用模块私有组件</li>
</ul>
<p>举个例子：在组件 <code>content.vue</code> 中使用了 button 组件，那么 <code>content.vue</code> 组件是否添加 scoped 属性渲染出来的结果有什么区别呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//content.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;p class=&quot;title&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;!-- v-button假设是上面定义的组件 --&gt;</span><br><span class="line">    &lt;v-button&gt;&lt;/v-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .content&#123;</span><br><span class="line">    width: 1200px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line">  .content .button&#123;</span><br><span class="line">    border-raduis: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="模块一般组件（未添加-scoped）引用模块私有组件"><a href="#模块一般组件（未添加-scoped）引用模块私有组件" class="headerlink" title="模块一般组件（未添加 scoped）引用模块私有组件"></a>模块一般组件（未添加 scoped）引用模块私有组件</h4><p>如果 style 上没有加 scoped 属性，那么渲染出来 HTML 和 CSS 分别就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">  &lt;p class=&quot;title&quot;&gt;&lt;/p&gt;</span><br><span class="line">  &lt;!-- v-button假设是上面定义的组件 --&gt;</span><br><span class="line">  &lt;div data-v-2311c06a class=&quot;button-warp&quot;&gt;</span><br><span class="line">    &lt;button data-v-2311c06a class=&quot;button&quot;&gt;text&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">/*button.vue渲染出来的css*/</span><br><span class="line">.button-warp[data-v-2311c06a]&#123;</span><br><span class="line">  display:inline-block;</span><br><span class="line">&#125;</span><br><span class="line">.button[data-v-2311c06a]&#123;</span><br><span class="line">  padding: 5px 10px;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  border-radus: 2px;</span><br><span class="line">&#125;</span><br><span class="line">/*content.vue渲染出来的css*/</span><br><span class="line">.content&#123;</span><br><span class="line">  width: 1200px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">.content .button&#123;</span><br><span class="line">  border-raduis: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，<strong>虽然在 content 组件中，修改了 button 的 border-raduis 属性，但是由于权重关系，生效的依然是组件内部的样式（此时是外部的样式被覆盖）</strong>。</p>
<p>因此，如果要达到修改样式的目的，就必须加重我们要修改样式的权重（增加选择器层级，ID 选择器，并列选择器，impotant 等）。</p>
<h4 id="模块私有组件（添加-scoped）引用模块私有组件"><a href="#模块私有组件（添加-scoped）引用模块私有组件" class="headerlink" title="模块私有组件（添加 scoped）引用模块私有组件"></a>模块私有组件（添加 scoped）引用模块私有组件</h4><p>如果加了 scoped 属性呢？按照开始分析出来的规则：</p>
<ul>
<li>首先是在所有的 DOM 节点加上 data 属性</li>
<li>然后在 CSS 选择器尾部加上 data 属性选择器</li>
</ul>
<p>那么渲染出来 HTML 和 CSS 分别就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div data-v-57bc25a0 class=&quot;content&quot;&gt;</span><br><span class="line">  &lt;p data-v-57bc25a0 class=&quot;title&quot;&gt;&lt;/p&gt;</span><br><span class="line">  &lt;!-- v-button假设是上面定义的组件 --&gt;</span><br><span class="line">  &lt;div data-v-57bc25a0 data-v-2311c06a class=&quot;button-warp&quot;&gt;</span><br><span class="line">    &lt;button data-v-2311c06a class=&quot;button&quot;&gt;text&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">/*button.vue渲染出来的css*/</span><br><span class="line">.button-warp[data-v-2311c06a]&#123;</span><br><span class="line">  display:inline-block;</span><br><span class="line">&#125;</span><br><span class="line">.button[data-v-2311c06a]&#123;</span><br><span class="line">  padding: 5px 10px;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  border-radus: 2px;</span><br><span class="line">&#125;</span><br><span class="line">/*content.vue渲染出来的css*/</span><br><span class="line">.content[data-v-57bc25a0]&#123;</span><br><span class="line">  width: 1200px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">.content .button[data-v-57bc25a0]&#123;</span><br><span class="line">  border-raduis: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于上面的两种情况，可以明显看出来渲染后的结果大不相同。</p>
<p>虽然我们在 content 添加了想要修改 button 组件的样式的代码，但是仔细看，由于<code>.content .button</code> 这句在末尾加的是 content 组件的 scoped 标记，最后这句其实根本作用不到我们想要的 DOM 节点上，所以这种情况我们在 content 内部写的任何样式都不会影响到 <code>button.vue</code> 组件。</p>
<p>当然这个问题也是可以解决的，就是直接加全局样式可以修改到，但这势必会影响全部地方的组件；所以需要另外一种方法在 <code>content.vue</code> 组件内再加一个不带 scoped 属性的 style 标签，也就意味着要加两个 style，一个用于私有样式，一个用于共有样式。这肯定是有点 shit 的，并且这两种解决方案都回避不了一个问题：权重！！！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//content.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;p class=&quot;title&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;!-- v-button假设是上面定义的组件 --&gt;</span><br><span class="line">    &lt;v-button&gt;&lt;/v-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">...</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .content&#123;</span><br><span class="line">    width: 1200px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .content .button&#123;</span><br><span class="line">    border-raduis: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="总结-scoped-的渲染规则"><a href="#总结-scoped-的渲染规则" class="headerlink" title="总结 scoped 的渲染规则"></a>总结 scoped 的渲染规则</h2><p>总结一下 scoped 三条渲染规则：</p>
<ol>
<li>给 HTML 的 DOM 节点加一个不重复 data 属性 (形如：<code>data-v-2311c06a</code>) 来表示他的唯一性</li>
<li>在每句 CSS 选择器的末尾（编译后的生成的 CSS 语句）加一个当前组件的 data 属性选择器（如 <code>[data-v-2311c06a]</code>）来私有化样式</li>
<li>如果组件内部包含有其他组件，只会给其他组件的最外层标签加上当前组件的 data 属性</li>
</ol>
<p>解决方案</p>
<ol>
<li>对于引用的三方库，如果对方使用了 scoped，我们无力改变什么，如果确实需要修改他的样式只能在不加 scoped 的组件中修改样式，或者全局样式直接修改，这很粗暴！</li>
<li>对于自己维护的组件，一定要想清楚，组件的样式能否满足所有的情况。如果确实需要加，无疑会增加使用这个组件的开发同学的工作！</li>
</ol>
<blockquote>
<p>本文转载于：<a href="https://www.cnblogs.com/makai/p/11415156.html">vue 中 style 下 scope 的使用和坑</a></p>
</blockquote>
]]></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目优化-代码压缩</title>
    <url>/liuqi_blogs/2022/01/21/Vue%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96-%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<p>网站应用的性能优化对于提高用户留存、转化率等都有积极影响。而减少传输大小是提高加载性能的一个常见方法。</p>
<p>本文介绍下 Vue 项目开启 gzip 压缩的方法。</p>
<h2 id="Vue-项目开启-gzip-压缩"><a href="#Vue-项目开启-gzip-压缩" class="headerlink" title="Vue 项目开启 gzip 压缩"></a>Vue 项目开启 gzip 压缩</h2><h3 id="安装-compression-webpack-plugin"><a href="#安装-compression-webpack-plugin" class="headerlink" title="安装 compression-webpack-plugin"></a>安装 <code>compression-webpack-plugin</code></h3><span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev compression-webpack-plugin</span><br></pre></td></tr></table></figure>

<p>这里有可能会碰到这个错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cannot read property &#x27;tapPromise&#x27; of undefined</span><br></pre></td></tr></table></figure>

<p>这是因为 <code>compression-webpack-plugin</code> 这个版本高了，需要降低版本，因此，我们可以先卸载掉之前安装的版本，然后指定低版本安装。经过试验，6.1.1 版本是可以正常运行的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev compression-webpack-plugin@6.1.1</span><br></pre></td></tr></table></figure>

<h3 id="vue-config-js-配置-configureWebpack"><a href="#vue-config-js-配置-configureWebpack" class="headerlink" title="vue.config.js 配置 configureWebpack"></a><code>vue.config.js</code> 配置 configureWebpack</h3><blockquote>
<p><code>vue.config.js</code> 是 vue-cli3 之后新增的一个功能，再这个版本里面如果要配置 webpack 相关的属性，就需要自己在项目根目录新建 <code>vue.config.js</code> 这个文件，然后在该文件里面去写入你需要的配置等等。（**配置 vue-cli3 项目，可以说是 all in <code>vue.config.js</code>**）</p>
</blockquote>
<p>当然，封装、就一定会留个口给用户，去对底层进行自定义操作。<code>vue.config.js</code> 的配置项中，有两个口，configureWebpack 和 chainWebpack。</p>
<p>configureWebpack 是调整 webpack 配置最简单的一种方式，可以新增也可以覆盖 cli 中的配置。</p>
<blockquote>
<p>Type: Object | Function</p>
<ul>
<li>如果这个值是一个对象，则会通过 webpack-merge 合并到最终的配置中。</li>
<li>如果这个值是一个函数，则会接收被解析的配置作为参数。该函数及可以修改配置并不返回任何东西，也可以返回一个被克隆或合并过的配置版本。</li>
</ul>
</blockquote>
<p><strong>这个属性特别之处就是，他有两种类型形态，但是又不能重复使用，而在某些情况既需要对象类型的配置，也需要函数类型的配置</strong>。</p>
<p>这里我使用函数类型的配置，这样可以基于环境有条件地配置行为，进行一些逻辑处理，直接修改或新增配置。</p>
<p>具体例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入compression-webpack-plugin</span><br><span class="line">const CompressionPlugin = require(&#x27;compression-webpack-plugin&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  configureWebpack:config =&gt;&#123;</span><br><span class="line">    // 仅在生产环境打包时对JS\CSS文件进行压缩</span><br><span class="line">    if(process.env.NODE_ENV === &#x27;production&#x27;)&#123;</span><br><span class="line">      config.plugins.push(</span><br><span class="line">        new CompressionPlugin(&#123;</span><br><span class="line">          /* [file]被替换为原始资产文件名。</span><br><span class="line">            [path]替换为原始资产的路径。</span><br><span class="line">            [dir]替换为原始资产的目录。</span><br><span class="line">            [name]被替换为原始资产的文件名。</span><br><span class="line">            [ext]替换为原始资产的扩展名。</span><br><span class="line">            [query]被查询替换。*/</span><br><span class="line">          filename: &#x27;[path].gz[query]&#x27;,</span><br><span class="line">          // 压缩算法</span><br><span class="line">          algorithm: &#x27;gzip&#x27;,</span><br><span class="line">          // 匹配文件</span><br><span class="line">          test: /\.js$|\.css$|\.html$/,</span><br><span class="line">          // 压缩超过此大小的文件，以字节为单位</span><br><span class="line">          threshold: 10240,</span><br><span class="line">          minRatio: 0.8,</span><br><span class="line">          // 是否删除原始文件只保留压缩后的文件</span><br><span class="line">          deleteOriginalAssets: false</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置了这个之后，打包可能会出现警告：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Conflict: Multiple assets emit different content to the same filename assets/js/.gz</span><br></pre></td></tr></table></figure>

<p><strong>这是因为打包之后命名都是空</strong>。</p>
<p>问题在于 <code>filename: &#39;[path].gz[query]&#39;</code> 这个配置，<strong>这个版本下（<code>&quot;compression-webpack-plugin&quot;: &quot;^6.1.1&quot;</code>）的配置应该修改为：<code>filename: &#39;[path][base].gz&#39;</code>。</strong></p>
</blockquote>
<p>在打包后的静态文件中，可以看到有<strong>很多<code>.gz</code> 的同名文件</strong>，这个就是 gzip 压缩后的文件，基本上可以压缩 3-5 倍左右。</p>
<h3 id="nginx-开启-gzip"><a href="#nginx-开启-gzip" class="headerlink" title="nginx 开启 gzip"></a>nginx 开启 gzip</h3><p>核心配置代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip on; #开启或关闭gzip on off</span><br><span class="line">    gzip_disable &quot;msie6&quot;; #不使用gzip IE6</span><br><span class="line">    gzip_min_length 100k; #gzip压缩最小文件大小，超出进行压缩（自行调节）</span><br><span class="line">    gzip_buffers 4 16k; #buffer 不用修改</span><br><span class="line">    gzip_comp_level 8; #压缩级别:1-10，数字越大压缩的越好，时间也越长</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; #  压缩文件类型</span><br><span class="line">    gzip_static on; # nginx 会优先匹配你的 gzip 文件来返回，如果没有就寻找相应资源进行 gzip 压缩再返回</span><br></pre></td></tr></table></figure>

<p><code>gzip on</code> 这个配置作用是，当 nginx 服务器返回 <code>gzip_types</code> 中列出的内容类型时，先使用 gzip 进行压缩（当然，前提是请求方支持 gzip）。<strong>但是存在一个问题，返回内容是在请求服务器的时候使用 gzip 进行压缩的。对于同一个资源的不同请求，反复压缩，这无疑会增加服务器的 CPU 和内存消耗。</strong></p>
<p>因此，一个更好的办法就是在 Vue 工程打包的时候就进行 gzip 压缩，也就是我们前面讲的通过 <code>compression-webpack-plugin</code> 插件配置在打包时进行 gzip 压缩，<strong>然后我们把 <code>gzip_static</code> 设置为 on，这样在访问资源的时候，如果存在<code>资源路径.gz</code> 的文件，则会直接返回该文件，其优先级高于动态的 gzip。</strong></p>
<h2 id="查看是否已开启-gzip-压缩"><a href="#查看是否已开启-gzip-压缩" class="headerlink" title="查看是否已开启 gzip 压缩"></a>查看是否已开启 gzip 压缩</h2><p>Chrome 浏览器 F12 打开控制台，进入 Network 调试界面，在表头单击鼠标右键，勾选 <code>Response Headers -&gt; Content-Encoding</code> 后，在表头会多出 <code>Content-Encoding</code> 这一列，用于判断是否开启 gzip（如已开启 Gzip，Content-Encoding 会显示 gzip）。</p>
<p>我们把鼠标移到这些请求的 Size 上会显示：<code>xxx transferred over network, resource size: xxx</code>。<strong>这里 <code>transferred over network</code> 是网络加载的资源大小，而 <code>resource size</code> 则是资源经过解压后的大小</strong>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://juejin.cn/post/7023931548952952846">【vue 深入】项目打包之 gzip 压缩，减少体积，提升响应速度</a></li>
<li><a href="https://blog.csdn.net/u014678583/article/details/112249324">vue TypeError: Cannot read property ‘tapPromise‘ of undefined</a></li>
<li><a href="https://blog.csdn.net/weixin_41240940/article/details/113880492">vue-cli4 开发项目中开启 gzip 压缩，优化打包体积，提升加载速度</a></li>
<li><a href="https://blog.csdn.net/weixin_42164539/article/details/110389256">vue 打包出现警告：Conflict: Multiple assets emit different content to the same filename assets/js/.gz</a></li>
<li><a href="https://blog.csdn.net/playboyanta123/article/details/103528594">vue.config.js 配置之 configureWebpack (两种用法)</a></li>
<li><a href="https://www.cnblogs.com/mark21/p/14118676.html">Vue 项目打包压缩：让页面更快响应</a></li>
<li><a href="https://blog.csdn.net/weixin_44388523/article/details/106957280">Vue 项目优化 —— 如何查看是否已开启 Gzip 压缩</a></li>
<li><a href="https://stackoverflow.com/posts/56043891/edit">What is the difference between “transferred” and “resources” in Chrome DevTools Network tab?</a></li>
</ul>
]]></content>
      <categories>
        <category>前端，性能优化</category>
      </categories>
      <tags>
        <tag>前端，性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 基础开发环境包管理工具chocolatey</title>
    <url>/liuqi_blogs/2021/02/22/chocolatey/</url>
    <content><![CDATA[<p>Windows 基础开发环境包管理工具chocolatey。</p>
<p>安装chocolatey<br>以管理员权限运行cmd.exe或powershell.exe</p>
<span id="more"></span>

<p>cmd运行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="string">&quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&quot;</span> -<span class="title class_">NoProfile</span> -<span class="title class_">InputFormat</span> <span class="title class_">None</span> -<span class="title class_">ExecutionPolicy</span> <span class="title class_">Bypass</span> -<span class="title class_">Command</span> <span class="string">&quot;iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))&quot;</span> &amp;&amp; <span class="variable constant_">SET</span> <span class="string">&quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;</span></span><br></pre></td></tr></table></figure>
<p>powershell运行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>@<span class="string">&quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&quot;</span> -<span class="title class_">NoProfile</span> -<span class="title class_">InputFormat</span> <span class="title class_">None</span> -<span class="title class_">ExecutionPolicy</span> <span class="title class_">Bypass</span> -<span class="title class_">Command</span> <span class="string">&quot;iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))&quot;</span> &amp;&amp; <span class="variable constant_">SET</span> <span class="string">&quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;</span></span><br></pre></td></tr></table></figure>
<p>安装完成，运行choco 或 choco -?检查一下是否安装正确</p>
<p>chocolatey安装位置：C:\ProgramData\Chocolatey。无法配置包安装位置。<br>参考文章Windows 神器 Cmder Scoop Chocolatey Listary Seer，可安装的应用程序默认安装在 C:\Program Files\，实际待考究。</p>
<p>用法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">search - 搜索包 choco search somethinglist - 列出包 choco list -lo 或者 choco list --local-onlyinstall - 安装 choco install baretailpin - 固定包的版本，防止包被升级 choco pin windirstatupgrade - 安装包的升级 choco upgrade baretailuninstall - 安装包的卸载 choco uninstall baretail安装<span class="title class_">Ruby</span> <span class="title class_">Gem</span> - choco install compass -source ruby安装<span class="title class_">Python</span> <span class="title class_">Egg</span> - choco install sphynx -source python安装<span class="variable constant_">IIS</span>服务器特性 - choco install <span class="variable constant_">IIS</span> -source windowsfeatures安装<span class="title class_">Webpi</span>特性 - choco install <span class="title class_">IIS7</span>.5Express -source webpi列出<span class="title class_">Windows</span>系统已安装的软件 - choco list -li 或者 choco list -lai升级所有已安装的包 - choco upgrade all -y</span><br></pre></td></tr></table></figure>

<p>window 下开发常用的开发环境应用</p>
<pre><code>choco install autohotkey.portable #安装 AutoHotkey (Portable)choco install nodejs.install #安装 nodechoco install git.install #安装 gitchoco install ruby #安装 rubychoco install python #安装 pythonchoco install jdk8 #安装 JDK8choco install googlechrome #安装 Chromechoco install google-chrome-x64 #Google Chrome (64-bit only)choco install firefox #安装 firefoxchoco install notepadplusplus.install #安装 notepad++choco install Atom #安装 Atomchoco install SublimeText3 #安装 SublimeText3
</code></pre>
]]></content>
      <categories>
        <category>windows工具</category>
      </categories>
      <tags>
        <tag>windows包管理工具</tag>
      </tags>
  </entry>
  <entry>
    <title>项目实现计划</title>
    <url>/liuqi_blogs/2021/01/02/day20200717/</url>
    <content><![CDATA[<h1 id="完善后台管理-小程序-M站"><a href="#完善后台管理-小程序-M站" class="headerlink" title="完善后台管理 小程序 M站"></a>完善后台管理 小程序 M站</h1><p>M站 : mobile 网站  运行在 qq浏览器 / 微信浏览器 / 手机浏览器</p>
<p>webapp : 嵌套在app中的 </p>
<span id="more"></span>

<h2 id="添加学生账号"><a href="#添加学生账号" class="headerlink" title="添加学生账号"></a>添加学生账号</h2><ul>
<li>姓名</li>
<li>头像</li>
<li>用户名</li>
<li>密码</li>
<li>电话号</li>
</ul>
<h2 id="按需加载-element-ui"><a href="#按需加载-element-ui" class="headerlink" title="按需加载 element-ui"></a>按需加载 element-ui</h2><h2 id="完善后台"><a href="#完善后台" class="headerlink" title="完善后台"></a>完善后台</h2>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT 实现相册</title>
    <url>/liuqi_blogs/2018/02/19/home/</url>
    <content><![CDATA[<h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><hr>
<ul>
<li>本节内容是基于实现本地保存图片功能前提记录的笔记，如果是用图床外链，可以跳过所有涉及到 img 文件夹以及 img/s 文件夹的步骤。</li>
<li>本相册的所有功能均仅测试了在 hexo-theme-next 下实现的效果，使用其它主题时部分布局尺寸数据可能会出现偏差，需要自行根据主题设置修改。</li>
</ul>
<span id="more"></span>

<br/>

<h5 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h5><hr>
<ul>
<li>在 git bash 中输入命令 hexo new page gallery；</li>
<li>在 hexo/sourse/gallery 目录下建立你需要的分类相册文件夹；</li>
<li>进入 hexo/sourse/gallery 目录，新建 img 文件夹用来存放相册封面；</li>
<li>在每个相册文件夹中创建 img 文件夹用来存放大图，以及 img/s 文件夹用来存放缩略图。<br/></li>
</ul>
<p>注意：img/s 文件夹可以省略不建，用文件名-s.jpg 的格式重命名缩略图即可。</p>
<br/>

<h5 id="原图处理"><a href="#原图处理" class="headerlink" title="原图处理"></a>原图处理</h5><hr>
<ul>
<li>将需要上传的图片放入 gallery/相册名/img 文件夹中，为了加载速度建议压缩至 1mb 以下，使用 jpg 格式保存；</li>
<li>除了文件大小以外没有其它要求，但是为了方便后续页面编辑，建议将文件以容易辨识的方式重命名，例如日期-图片名.jpg。</li>
</ul>
<h5 id="缩略图处理"><a href="#缩略图处理" class="headerlink" title="缩略图处理"></a>缩略图处理</h5><hr>
<ul>
<li>将 gallery/相册名/img 下的所有图片复制到 gallery/相册名/img/s 文件夹中，使用 PS 等其它处理工具压缩图片大小；</li>
<li>建议宽度为 300px，最终输出文件大小在 30kb 左右，高度无要求。</li>
</ul>
<br/>

<h5 id="封面图处理"><a href="#封面图处理" class="headerlink" title="封面图处理"></a>封面图处理</h5><hr>
<ul>
<li>从每个相册的缩略图中挑选需要的封面，复制到 gallery/img 文件夹中；</li>
<li>建议重命名为相册名.jpg。</li>
</ul>
<br/>

<h5 id="相册主界面"><a href="#相册主界面" class="headerlink" title="相册主界面"></a>相册主界面</h5><hr>
<ul>
<li>打开 gallery/index.md，将 title 设置成你需要的相册页面名称；</li>
<li>（可选）在日期下方加上 comments: false 关闭评论；</li>
<li>复制以下代码粘贴至正文，并按需求修改相册描述、相册名、相册文件夹名以及封面图文件名：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;center&gt;！相册描述【此行可删除】&lt;/center&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span>自定义分隔符【此行可删除】<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line">&lt;div class=&quot;gallery-page&quot;&gt;</span><br><span class="line">	&lt;div class=&quot;gallery-list&quot;&gt;</span><br><span class="line">		&lt;div class=&quot;gallery-column&quot;&gt;</span><br><span class="line">			&lt;div class=&quot;gallery-item&quot;&gt;</span><br><span class="line">				&lt;a href=&quot;【！相册文件夹名】&quot;&gt;&lt;img src=&quot;img/【！封面图文件名】.jpg&quot;&gt;</span><br><span class="line">				&lt;/a&gt;</span><br><span class="line">				&lt;p&gt;- ！相册1 -&lt;/p&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">			&lt;div class=&quot;gallery-item&quot;&gt;</span><br><span class="line">				&lt;a href=&quot;【！相册文件夹名】&quot;&gt;&lt;img src=&quot;img/【！封面图文件名】.jpg&quot;&gt;</span><br><span class="line">				&lt;/a&gt;</span><br><span class="line">				&lt;p&gt;- ！相册2 -&lt;/p&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		&lt;div class=&quot;gallery-column&quot;&gt;</span><br><span class="line">			&lt;div class=&quot;gallery-item&quot;&gt;</span><br><span class="line">				&lt;a href=&quot;sample&quot;&gt;&lt;img src=&quot;img/sample.jpg&quot;&gt;</span><br><span class="line">				&lt;/a&gt;</span><br><span class="line">				&lt;p&gt;- 相册名 -&lt;/p&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		&lt;div class=&quot;gallery-column&quot;&gt;</span><br><span class="line">			&lt;div class=&quot;gallery-item&quot;&gt;</span><br><span class="line">				&lt;a href=&quot;sample&quot;&gt;&lt;img src=&quot;img/sample.jpg&quot;&gt;</span><br><span class="line">				&lt;/a&gt;</span><br><span class="line">				&lt;p&gt;- 相册名 -&lt;/p&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;center&gt;自定义分割线【此行可删除】&lt;/center&gt;</span><br></pre></td></tr></table></figure>

<p>1.需要使用外链的场合，将 &lt; img src=”img/【封面图文件名】.jpg” &gt; 中的内容替换为图床外链地址即可；<br/><br>2.代码中 &lt; div class=”gallery-column” &gt; 元素为分列显示相册的列数，可按需要增减；<br/><br>3.新增相册时请确认代码添加在 &lt; div class=”gallery-column” &gt; 元素内部，否则会造成显示错误。</p>
<br/>

<h5 id="分类相册界面"><a href="#分类相册界面" class="headerlink" title="分类相册界面"></a>分类相册界面</h5><hr>
<ul>
<li>打开 gallery/相册名/index.md，将 title 设置成你需要的相册页面名称；</li>
<li>（可选）在日期下方加上 comments: false 关闭评论；</li>
<li>复制以下代码粘贴至正文，并按需求修改相册描述、图片名以及缩略图文件名：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;center&gt;！相册描述【此行可删除】&lt;/center&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span>自定义分隔符【此行可删除】<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line">&lt;div class=&quot;gallery-page&quot;&gt;</span><br><span class="line">	&lt;div class=&quot;img-list&quot;&gt;</span><br><span class="line">		&lt;div class=&quot;img-column&quot;&gt;</span><br><span class="line">			&lt;a href=&quot;img/【！图片名1】.jpg&quot; target=&quot;_Blank&quot;&gt;&lt;img src=&quot;img/s/【！缩略图文件名1】.jpg&quot;&gt;&lt;/a&gt;</span><br><span class="line">			&lt;a href=&quot;img/【！图片名2】.jpg&quot; target=&quot;_Blank&quot;&gt;&lt;img src=&quot;img/s/【！缩略图文件名2】.jpg&quot;&gt;&lt;/a&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		&lt;div class=&quot;img-column&quot;&gt;</span><br><span class="line">			&lt;a href=&quot;img/sample.jpg&quot; target=&quot;_Blank&quot;&gt;&lt;img src=&quot;img/s/sample.jpg&quot;&gt;&lt;/a&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		&lt;div class=&quot;img-column&quot;&gt;</span><br><span class="line">			&lt;a href=&quot;img/sample.jpg&quot; target=&quot;_Blank&quot;&gt;&lt;img src=&quot;img/s/sample.jpg&quot;&gt;&lt;/a&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;center&gt;自定义分割线【此行可删除】&lt;/center&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>需要使用外链的场合，将 &lt; img src=”img/【图片名】.jpg” &gt; 中的内容替换为图床外链地址即可，如果图床加载速度够快可以用同一个链接填充缩略图部分；</li>
<li>代码中 &lt; div class=”img-column” &gt; 元素为分列显示图片的列数，可按需要增减；</li>
<li>添加图片时请确认代码添加在 &lt; div class=”img-column” &gt; 元素内部，否则会造成显示错误。</li>
</ol>
<br/>

<h5 id="CSS-样式"><a href="#CSS-样式" class="headerlink" title="CSS 样式"></a>CSS 样式</h5><hr>
<p>在 custom.styl 中加入如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*gallery*/</span></span><br><span class="line"></span><br><span class="line">.<span class="property">gallery</span>-page &#123;</span><br><span class="line">	margin-<span class="attr">top</span>: -50px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">img</span>-list,</span><br><span class="line">.<span class="property">gallery</span>-list &#123;</span><br><span class="line">	<span class="attr">display</span>: flex;</span><br><span class="line">	flex-<span class="attr">direction</span>: row;</span><br><span class="line">	flex-<span class="attr">wrap</span>: nowrap;</span><br><span class="line">	align-<span class="attr">items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">img</span>-column &#123;</span><br><span class="line">	<span class="attr">display</span>: flex;</span><br><span class="line">	flex-<span class="attr">direction</span>: column-reverse;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">img</span>-column a,</span><br><span class="line">.<span class="property">gallery</span>-column a &#123;</span><br><span class="line">	border-<span class="attr">bottom</span>: 0px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">gallery</span>-item &#123;</span><br><span class="line">	margin-<span class="attr">bottom</span>: -50px</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">gallery</span>-item p &#123;</span><br><span class="line">	<span class="attr">margin</span>: -25px auto -10px;</span><br><span class="line">	max-<span class="attr">width</span>: <span class="number">50</span>%;</span><br><span class="line">	text-<span class="attr">align</span>: center;</span><br><span class="line">	font-<span class="attr">size</span>: 15px;</span><br><span class="line">	<span class="attr">color</span>: $black-deep;</span><br><span class="line">	<span class="attr">background</span>: <span class="title function_">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">.3</span>);</span><br><span class="line">	border-<span class="attr">radius</span>: 7px;</span><br><span class="line">	<span class="attr">border</span>: 1px solid $black-deep;</span><br><span class="line">	box-<span class="attr">shadow</span>: <span class="number">0</span> 8px 20px -8px <span class="title function_">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">.3</span>);</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">posts</span>-expand .<span class="property">post</span>-body .<span class="property">gallery</span>-column a img &#123;</span><br><span class="line">	<span class="attr">height</span>: 250px;</span><br><span class="line">	<span class="attr">width</span>: 300px;</span><br><span class="line">	object-<span class="attr">fit</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line">@media (max-<span class="attr">width</span>: 767px)&#123;</span><br><span class="line">	.<span class="property">gallery</span>-item p &#123;</span><br><span class="line">		min-<span class="attr">width</span>: 75px;</span><br><span class="line">		font-<span class="attr">size</span>: 13px;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>@media 标签内的样式是防止移动端浏览时相册名被强制换行的，建议保留；</li>
<li>其余样式除了 flex 相关行与 object-fit 样式以外，均可根据需要自行更改，在此不作赘述。</li>
</ol>
<br/>

<h5 id="模板文档"><a href="#模板文档" class="headerlink" title="模板文档"></a>模板文档</h5><hr>
<p><a href="https://drive.google.com/open?id=1Ghcvxm29TnwKAveiE9uZLQAQIEbW-SvR">为了更好地普及本相册做了一个模板文档，用的是 google Drive 链接。</a></p>
<blockquote>
<p>本文转载于： <a href="https://co5.me/2018/181112-gallerry2.html">css+markdown 实现 hexo 相册【进阶篇】</a></p>
</blockquote>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>hexo-next主题配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Jekyll + Github Pages 搭建个人免费博客</title>
    <url>/liuqi_blogs/2019/02/19/jekyll/</url>
    <content><![CDATA[<p>​<br>今天亲手通过 Jekyll 搭建了一套免费博客，搭建步骤其实超级简单。你不需要购买域名，也不需要购买服务器，就可以轻松拥有你自己的博客。<br>Jekyll 的核心是一个文本转换引擎。它的方便之处在于支持多种文本标记语言：Markdown，Textile，HTML，然后 Jekyll 就会帮你加入你选择主题的样式的布局中。最终生成你自己的静态博客网站。</p>
<span id="more"></span>

<p>博客搭建步骤</p>
<p>1.安装环境<br>1.1 安装Ruby<br>官网地址：<a href="https://rubyinstaller.org/downloads/">https://rubyinstaller.org/downloads/</a><br>根据自己的需要下载不同版本，直接点击“下一步”就可轻松安装成功。</p>
<p>1.2 安装RubyGems<br>官网地址：<a href="https://rubygems.org/pages/download">https://rubygems.org/pages/download</a><br>据自己的需要下载不同版本。解压压缩文件到本地。在 CMD 命令窗口执行如下命令：</p>
<p>cd D:\下载\rubygems-3.0.6\rubygems-3.0.6    #切换文件目录<br>ruby setup.rb        #安装<br>rubygems ruby -v     #查看rubygems版本号</p>
<p>1.3 安装Jekyll<br>以上两个步骤操作完成后，在 CMD 窗口执行如下命令安装Jekyll：</p>
<p>gem install jekyll   #安装jekyll<br>jekyll -v    #查看jekyll版本号</p>
<p>2.本地搭建博客<br>2.1 项目启动</p>
<p>jekyll new restlessManBlog   #新建博客<br>cd restlessManBlog           #切换目录<br>jekyll server                #启动项目</p>
<p>项目启动日志如下：</p>
<p>在浏览器访问：<a href="http://localhost:4000/">http://localhost:4000/</a></p>
<p>2.2 添加 MarkDown 文档<br>在项目根目录下的 _posts 目录创建 markdown 文档。这里注意 md 文档命名要添加 “yyyy-mm-dd”的前缀。<br>例如：2019-10-11-5分钟搭建博客.md</p>
<p>2.3 部署代码到 Github<br>2.3.1 创建 Github 账号<br>注：这里我使用的 Github 托管静态博客的，你也可以选择把代码托管到 码云 或者其他平台上。<br>没有 Github 账号的朋友可以注册一个账号，有账号的朋友可跳过。</p>
<p>2.3.2 创建代码仓库<br>创建一个名称为 ‘账号名称.<a href="http://github.io’。例如：我的账号名是helloRestlessMan，仓库名就是">http://github.io’。例如：我的账号名是helloRestlessMan，仓库名就是</a> helloRestlessMan.github.io</p>
<p>2.3.3 部署代码到Github<br>在我们创建的博客的目录找到 _site 目录，将 _site 目录下的所有文件都提交到Github上。</p>
<p>操作步骤：</p>
<p>git clone <a href="https://github.com/helloRestlessMan/helloRestlessMan.github.io.git">https://github.com/helloRestlessMan/helloRestlessMan.github.io.git</a><br>#克隆远程代码到本地<br>拷贝_site 文件到 helloRestlessMan.github.io cd helloRestlessMan.github.io<br>git add .   #git 命令添加所有文件<br>git commit -m “创建 Jekyll 个人博客”      #git 提交文件<br>git push    #git 推送代码到远程</p>
<p>2.4部署代码到码云（Gitee）<br>创建与账号名相同的仓库，如下图：</p>
<p>提交代码到 Gitee 上，再开启 Gitee Pages 服务即可。</p>
<p>最后就可以访问了。<a href="http://huaairen.gitee.io/">http://huaairen.gitee.io/</a></p>
<p>2.5 访问自己的博客网站<br>效果如下图：</p>
<p>2.6 切换主题<br>我这里下载的主题是 mundana-jekyll-theme,</p>
<p>主题下载地址：<a href="http://jekyllthemes.org/themes/mundana-jekyll-theme/">http://jekyllthemes.org/themes/mundana-jekyll-theme/</a><br>注：可能存在兼容性问题，使用下面的命令</p>
<p>cd mundana-jekyll-theme bundle install    #安装依赖<br>bundle exec jekyll serve   #运行项目</p>
<p>我的博客地址：<a href="https://hellorestlessman.github.io/">https://hellorestlessman.github.io/</a><br>项目运行效果：</p>
<p>丰富的主题自由选择</p>
<p>这里推荐两款 Jekyll 主题的网站：<br>1.官方主题网站：<a href="http://jekyllthemes.org/">http://jekyllthemes.org/</a><br>2.Github 上的博客模板：<a href="https://github.com/jekyll/jekyll/wiki/Sites">https://github.com/jekyll/jekyll/wiki/Sites</a></p>
<p>文章推荐</p>
<ol>
<li>Github + hexo matery 主题搭建免费博客</li>
<li>5分钟搭建私人Java博客系统</li>
<li>手把手博客搭建</li>
</ol>
<p>参考资料<br>1.使用 github + jekyll 搭建个人博客</p>
<p>2.Github + Jekyll 搭建个人博客</p>
<p>3.Jekyll主题收藏</p>
<p>4.Gitee + Jekyll 搭建博客</p>
]]></content>
      <categories>
        <category>jekyll</category>
      </categories>
      <tags>
        <tag>搭建blog教程</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown图片</title>
    <url>/liuqi_blogs/2020/07/13/markdown%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>Markdown 图片语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址 <span class="string">&quot;可选标题&quot;</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ul>
<li>开头一个感叹号 !</li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li>
</ul>
<p>使用实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">![RUNOOB 图标](http:<span class="comment">//static.runoob.com/images/runoob-logo.png)</span></span><br><span class="line"></span><br><span class="line">![RUNOOB 图标](http:<span class="comment">//static.runoob.com/images/runoob-logo.png &quot;RUNOOB&quot;)</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/03/A042DF30-C232-46F3-8436-7D6C35351BBD.jpg"></p>
<p>当然，你也可以像网址那样对图片网址使用变量:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">这个链接用 <span class="number">1</span> 作为网址变量 [RUNOOB][<span class="number">1</span>].</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>]: http:<span class="comment">//static.runoob.com/images/runoob-logo.png</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<img src="https://www.runoob.com/wp-content/uploads/2019/03/75AA6EBF-CC57-44A6-A585-5EE3DD94E42A.jpg" width="100%"/>

<br/>
Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 < img > 标签。

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;http://static.runoob.com/images/runoob-logo.png&quot;</span> width=<span class="string">&quot;50%&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<img src="//www.runoob.com/wp-content/uploads/2019/03/55F2A67D-F4BD-4960-AC55-DC690A415878.jpg" width="100%"/>]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdowm</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown常用命令总结——空格符的使用</title>
    <url>/liuqi_blogs/2020/05/21/markdown%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>如何在Markdown文档中插入空格?<br/></p>
<h5 id="简单说"><a href="#简单说" class="headerlink" title="简单说"></a>简单说<br/></h5><p>　&ensp;在 Markdown 文档中，可以直接采用 HTML 标记插入空格（blank space），而且无需任何其他前缀或分隔符。具体如下所示：</p>
<span id="more"></span>

<ul>
<li><p>插入一个空格 (non-breaking space)<br/></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&amp;nbsp;    或    &amp;#<span class="number">160</span>;     或      &amp;#xA0;</span><br></pre></td></tr></table></figure></li>
<li><p>插入两个空格 (en space)<br/></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&amp;ensp;     或    &amp;#<span class="number">8194</span>;   或      &amp;#x2002;</span><br></pre></td></tr></table></figure></li>
<li><p>插入四个空格 (em space)<br/></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&amp;emsp;    或    &amp;#<span class="number">8195</span>;   或      &amp;#x2003;</span><br></pre></td></tr></table></figure></li>
<li><p>插入细空格 (thin space)<br/></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&amp;thinsp;   或     &amp;#<span class="number">8201</span>;  或      &amp;#x2009;</span><br></pre></td></tr></table></figure>

<p> &ensp; &ensp;注意：不要漏掉分号。</p>
<hr>
<h5 id="更多解释"><a href="#更多解释" class="headerlink" title="更多解释 "></a>更多解释 <br/></h5><p>　　在SGML(Standard Generalized Markup Language, 标准的通用标记语言), HTML(Hyper Text Markup Language, 超文本标记语言）和XML（Extensible Markup Language, 扩展标记语言）中，被称为字符数据（character data）和属性值 (attribute values) 的逻辑结构 (logical construct) 是由字符序列组成的。字符序列中的每个字符可以直接由自身表示，也可以由称为字符引用（character reference）的一系列字符表示。<br/></p>
<p>　　字符引用可以分为字符值引用（numeric character reference）和字符实体引用 (character entity reference)。&#160; &#xA0; 等属于字符值引用。&nbsp; &ensp; &emsp; &thinsp; 属于字符实体引用。<br/></p>
<p>　　字符值引用是指由通用字符集编码（Universal Character Set）/Unicode表示代码点（code point），使用格式如下：<br/><br>　　　　&#nnnn;<br/><br>　　　　　　或<br/><br>　　　　&#xhhhh;</p>
<p>　　其中，nnnn 是十进制形式的代码点，hhhh 是十六进制形式的代码点。在 XML 文档中，x 必须是小写的。nnnn 或 hhhh 可能是任何数量的数字，也可能包含前导0。hhhh 可以大小写混合使用，但大写是通常的风格。</p>
<p>　　字符实体引用是指由实体名表示字符。实体必须是预定义的（编译进标记语言），或者在 Document Type Definition(DTD) 中明确声明。使用格式如下：</p>
<p>　　　　&name;<br/><br>　　其中 name 是大小写敏感的实体名。分号是必须的。</p>
<p>　　对于不同宽度的空格的字符实体引用表示中，en 和 em 两者均为排版单位 (typographic unit), en 的宽度是 em 宽度的一半。在排印（typography）中，细空格(thin space)通常是宽度为 em 的 1/5 或 1/6 的空格字符。它用于添加一个狭窄的空格，例如在嵌套的引号之间或分隔相互干扰的标志符号。普通空格，即是不换行空格（Non-breaking space）。</p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>本示例为展示不同宽度的空格的 Markdown 文档。在每行文本开头，采用不同的方式，插入文本所描述的空格，具体内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Spaces   </span><br><span class="line">## character entity reference</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:Violet;&quot;</span>&gt; thin space&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:DodgerBlue;&quot;</span>&gt; one space&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:Tomato;&quot;</span>&gt; two spaces&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:MediumSeaGreen;&quot;</span>&gt; four spaces&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">## numeric character reference in decimal form</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:Violet;&quot;</span>&gt; thin space&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:DodgerBlue;&quot;</span>&gt; one space&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:Tomato;&quot;</span>&gt; two spaces&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:MediumSeaGreen;&quot;</span>&gt; four spaces&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">## numeric character reference in hexadecimal form</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:Violet;&quot;</span>&gt;&amp;#x2009;thin space&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:DodgerBlue;&quot;</span>&gt;&amp;#xA0;one space&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:Tomato;&quot;</span>&gt;&amp;#x2002;two spaces&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:MediumSeaGreen;&quot;</span>&gt;&amp;#x2003;four spaces&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>在 Spaces_Display.ipynb (Jupyter notebook) 中的展示结果，如下图所示</p>
<p><img src="https://img2018.cnblogs.com/blog/757205/201812/757205-20181231212556801-678306317.png"></p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdowm</tag>
      </tags>
  </entry>
  <entry>
    <title>markdowm高级技巧</title>
    <url>/liuqi_blogs/2020/07/09/markdown%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>支持的 HTML 元素<br>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>
<p>目前支持的 HTML 元素有：</p>
<span id="more"></span>

<pre><code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;
</code></pre>
<p>等 ，如：</p>
<pre><code>使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑
</code></pre>
<p>输出结果为：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/03/81999271-F914-428D-B7BF-164BDC67CAAC.jpg"></p>
<br/>

<h5 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h5><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p>
<pre><code>**文本加粗** 
\*\* 正常显示星号 \*\*
</code></pre>
<p>输出结果为：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/03/CA0E0162-0C48-41CD-B57A-CB32A4287C02.jpg"></p>
<br/>

<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure>

<h5 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h5><p>Markdown Preview Enhanced 使用 KaTeX 或者 MathJax 来渲染数学表达式。</p>
<p>KaTeX 拥有比 MathJax 更快的性能，但是它却少了很多 MathJax 拥有的特性。你可以查看 KaTeX supported functions/symbols 来了解 KaTeX 支持那些符号和函数。</p>
<h6 id="默认下的分隔符："><a href="#默认下的分隔符：" class="headerlink" title="默认下的分隔符："></a>默认下的分隔符：</h6><ul>
<li>$…$ 或者 (…) 中的数学表达式将会在行内显示。</li>
<li>$$…$$ 或者 […] 或者 ```math 中的数学表达式将会在块内显示。</li>
</ul>
<img src="https://www.runoob.com/wp-content/uploads/2019/03/0e408954-fda8-11e5-9eb4-562d7c0ca431.gif" width="100%">


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;Bmatrix&#125;</span><br><span class="line">   a &amp; b \\</span><br><span class="line">   c &amp; d</span><br><span class="line">\end&#123;Bmatrix&#125;</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">\begin&#123;CD&#125;</span><br><span class="line">   A @&gt;a&gt;&gt; B \\</span><br><span class="line"><span class="meta">@VbVV</span> <span class="meta">@AAcA</span> \\</span><br><span class="line">   C @= D</span><br><span class="line">\end&#123;CD&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>输出结果为：<br><img src="https://www.runoob.com/wp-content/uploads/2019/03/A9031CEB-04DB-4822-9C98-2E99489D3662.jpeg" width="100%"></p>
<br/>

<hr>
<p>以下几个实例效果图如下：</p>
<p>1、横向流程图源码格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure>
<p>2、竖向流程图源码格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a=1| D[结果1]</span><br><span class="line">    C --&gt; |a=2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure>
<p>3、标准流程图源码格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>
<p>4、标准流程图源码格式（横向）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>
<p>5、UML时序图源码样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure>
<p>6、UML时序图源码复杂样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure>
<p>7、UML标准时序图样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure>
<p>8、甘特图样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/03/md-flow.png"></p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdowm</tag>
      </tags>
  </entry>
  <entry>
    <title>next8.0添加动漫人物</title>
    <url>/liuqi_blogs/2019/02/22/next8-0%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/</url>
    <content><![CDATA[<p>添加卡通人物（看板娘）<br/><br>我在逛别人博客的时候偶然发现右下角居然有一个萌萌的卡通人物，还能根据你鼠标位置摇头，瞬间被吸引到了，赶紧也给自己博客添加一个吧！点击此处进入该项目地址</p>
<span id="more"></span>

<p>输入如下命令获取 live2d ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
<br/>
输入以下命令，下载相应的模型，将 packagename 更换成模型名称即可，
<br/>
更多模型选择请点击https://github.com/xiazeyu/live2d-widget-models，各个模型的预览请访问原作者的博客https://huaji8.top/post/live2d-plugin-2.0/

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ npm install packagename</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">use npm install &#123;packagename&#125; The <span class="keyword">package</span> name is the folder name in packages/ We have:</span><br><span class="line"></span><br><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/<span class="number">01</span> (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/<span class="number">02</span> (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure>
<br/>
打开站点目录下的 _config.yml 文件，添加如下代码：

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">    enable: <span class="literal">true</span></span><br><span class="line">    scriptFrom: local</span><br><span class="line">    model: </span><br><span class="line">        use: live2d-widget-model-haruto #模型选择</span><br><span class="line">    display: </span><br><span class="line">        position: right  #模型位置</span><br><span class="line">        width: <span class="number">150</span>       #模型宽度</span><br><span class="line">        height: <span class="number">300</span>      #模型高度</span><br><span class="line">    mobile: </span><br><span class="line">        show: <span class="literal">false</span>      #是否在手机端显示</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>live2d动漫动态</category>
      </categories>
      <tags>
        <tag>hexo-next主题配置</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题添加老板娘</title>
    <url>/liuqi_blogs/2019/02/21/next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%80%81%E6%9D%BF%E5%A8%98/</url>
    <content><![CDATA[<p>有时候在逛别人的博客界面的时候，会在页面左下角或者右下角等界面看到这样的画面,还是非常好看的<br><img src="https://img-blog.csdnimg.cn/20200714162808591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F3dF9GdURvbmdMYWk=,size_16,color_FFFFFF,t_70" alt="(老板娘)"></p>
<p>今天这篇博客总结下，怎么把萌萌哒的看板娘放到自己的博客页面中。</p>
<span id="more"></span>

<p>我采用的hexo的next主题。</p>
<p>1.下载live2D文件。</p>
<p>2.将其解压后，放置在下面目录：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">博客主目录\themes\next\source\</span><br><span class="line"></span><br><span class="line">[root@D-<span class="title class_">Centos7</span> live2d-widget]# pwd</span><br><span class="line">/www/wwwroot/my_blog_2_hexo/themes/next/source/live2d-widget</span><br></pre></td></tr></table></figure>


<p>3 更改live2d-widget下的autoload.js文件。里面的内容已经写好了，注释第二行，取消第三行的注释就行了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：live2d_path 参数应使用绝对路径</span></span><br><span class="line"><span class="comment">//const live2d_path = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;;</span></span><br><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;/live2d-widget/&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>4 修改/themes/next/layout/下的_layout.swing或者_layout.swig文件，在head标签中添加一行代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;/live2d-widget/autoload.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>5 在theme/next/_config.yml中,新增如下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>6 然后在博客根目录重新生成即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd 博客目录</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>然后就可以看到效果了。<br><img src="https://img-blog.csdnimg.cn/20200714171310758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F3dF9GdURvbmdMYWk=,size_16,color_FFFFFF,t_70" alt="然后就可以看到效果了。"></p>
<p>4.个性化设置<br>想修改看板娘大小、位置、格式、文本内容等，可查看并修改 waifu-tips.js 、 waifu-tips.json 和 waifu.css</p>
<p>参考文章<br><a href="https://www.jianshu.com/p/89440678ee3c">https://www.jianshu.com/p/89440678ee3c</a><br><a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a></p>
]]></content>
      <categories>
        <category>live2d动漫动态</category>
      </categories>
      <tags>
        <tag>hexo-next主题配置</tag>
      </tags>
  </entry>
  <entry>
    <title>软件包管理工具scoop</title>
    <url>/liuqi_blogs/2020/02/22/scoop/</url>
    <content><![CDATA[<p>软件包管理工具scoop，类似chocolatey,chocolatey很多软件安装位置不固定, 会污染Path，推荐能用scoop安装。scoop会统一安装到一个路径下。chocolatey权限要求高, scoop 使用-g安装才需要管理员权限, 默认普通用户权限.</p>
<span id="more"></span>

<p>scoop 安装<br>设置powershell</p>
<pre><code>1set-executionpolicy remotesigned -s currentuser
</code></pre>
<p>默认安装(安装到C:\Users\scoop), 在powershell里面运行:</p>
<pre><code>iex (new-object net.webclient).downloadstring(&#39;https://get.scoop.sh&#39;)
</code></pre>
<p>安装到指定目录(D:\tool\scoop)</p>
<pre><code>[environment]::setEnvironmentVariable(&#39;SCOOP&#39;,&#39;D:\tool\scoop&#39;,&#39;User&#39;)$env:SCOOP=&#39;D:\tool\scoop&#39;iex (new-object net.webclient).downloadstring(&#39;https://get.scoop.sh&#39;)
</code></pre>
<p>指定-g安装目录(D:\tool\scoop_global)</p>
<pre><code>[environment]::setEnvironmentVariable(&#39;SCOOP_GLOBAL&#39;,&#39;D:\tool\scoop_global&#39;,&#39;Machine&#39;)$env:SCOOP_GLOBAL=&#39;D:\tool\scoop_global&#39;
</code></pre>
<p>常用命令</p>
<pre><code>1234567891011scoop help #帮助scoop list #查看当前已安装软件scoop info app #查看软件信息scoop install app #安装软件scoop search app #搜索软件scoop uninstall app #卸载软件scoop update app #更新指定软件scoop update * #更新安装的软件和scoop# 设置代理(http)scoop config proxy 127.0.0.1:4412
</code></pre>
<p>shims 目录<br>scoop安装程序后会在scoop安装目录下的shims里生成一个对应程序的shim.exe(不知道为啥不用快捷方式).</p>
<p>安装scoop后 会自动把shims目录加到用户的Path里.</p>
<p>persist 目录<br>这个目录下面放的是已安装软件的配置文件, 后续更新软件的时候这部分内容不会修改.</p>
<p>scoop 添加 extras 源 (默认的软件有点少)</p>
<pre><code>1scoop bucket add extras
</code></pre>
<p>一个源：</p>
<pre><code>scoop bucket add extras https://github.com/lukesampson/scoop-extras.git  
</code></pre>
<hr>
<p>scoop 使用问题<br>安装某些 gui 程序后, 运行对应的 shim.exe 会出现 cmd 窗口 (nvim-qt cmd窗口一直显示, cmder cmd窗口一闪而过 )  </p>
<p>解决办法:把ScoopApps目录加到path里,目录在</p>
<pre><code>C:\Users\fcying\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Scoop Apps
</code></pre>
<hr>
<p>常用软件git,curl,7zip安装；有些需要管理员权限的软件就需要先安装sudo，就是Linux中的那个sudo；</p>
<pre><code>12scoop install sudoscoop install git curl 7zip
</code></pre>
]]></content>
      <categories>
        <category>windows工具</category>
      </categories>
      <tags>
        <tag>windows包管理工具</tag>
      </tags>
  </entry>
  <entry>
    <title>lorem ipsum</title>
    <url>/liuqi_blogs/2020/01/02/sitemap/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hexo-NexT Tag 插件的使用</title>
    <url>/liuqi_blogs/2021/02/22/tagPlugin/</url>
    <content><![CDATA[<p>Tag Plugin 是一种使 Hexo 支持特殊样式内容的方法。例如，我们无法在标准 Markdown 中显示具有自定义尺寸的图像。然后我们可以使用标签插件来解决它。 Hexo 有很多可以帮助用户的标签。 Hexo 还具有主题接口，使主题能够创建自己的标签。</p>
<span id="more"></span>

<p>文本居中引用 - Centered Quote<br>使用方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;世间所有的相遇，都是久别重逢&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>

<p>提示块 - Note<br>使用方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% note <span class="keyword">default</span> %&#125;</span><br><span class="line"><span class="keyword">default</span> 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<br/>

<p>主题配置文件中可以修改风格：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Note</span> tag (bs-callout).</span><br><span class="line"><span class="attr">note</span>:</span><br><span class="line">  # <span class="title class_">Note</span> tag style <span class="attr">values</span>:</span><br><span class="line">  #  - simple    bs-callout old alert style. <span class="title class_">Default</span>.</span><br><span class="line">  #  - modern    bs-callout <span class="keyword">new</span> (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style <span class="keyword">with</span> background, like on <span class="title class_">Mozilla</span> or <span class="title class_">StackOverflow</span>.</span><br><span class="line">  #  - disabled  disable all <span class="variable constant_">CSS</span> styles <span class="keyword">import</span> <span class="keyword">of</span> note tag.</span><br><span class="line">  # 风格</span><br><span class="line">  <span class="attr">style</span>: flat</span><br><span class="line">  # 要不要图标</span><br><span class="line">  <span class="attr">icons</span>: <span class="literal">true</span></span><br><span class="line">  # 圆角矩形</span><br><span class="line">  <span class="attr">border_radius</span>: <span class="number">3</span></span><br><span class="line">  # <span class="title class_">Offset</span> lighter <span class="keyword">of</span> background <span class="keyword">in</span> % <span class="keyword">for</span> modern and flat styles (<span class="attr">modern</span>: -<span class="number">12</span> | <span class="number">12</span>; <span class="attr">flat</span>: -<span class="number">18</span> | <span class="number">6</span>).</span><br><span class="line">  # <span class="title class_">Offset</span> also applied to label tag variables. <span class="title class_">This</span> option can work <span class="keyword">with</span> disabled note tag.</span><br><span class="line">  <span class="attr">light_bg_offset</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><u>标签 - Label</u><br/><br>使用方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% label <span class="keyword">default</span>@默认 %&#125; &#123;% label primary@主要 %&#125; &#123;% label success@成功 %&#125; &#123;% label info@信息 %&#125; &#123;% label warning@警告 %&#125; &#123;% label danger@危险 %&#125; </span><br><span class="line">&#123;% label success@这是成功的信息%&#125;</span><br></pre></td></tr></table></figure>
<br/>
<u>选项卡 - Tabs</u>
<br/>
使用方法:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% tabs tab,<span class="number">1</span> %&#125; 名字为tab，默认在第<span class="number">1</span>个选项卡，如果是-<span class="number">1</span>则隐藏</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**选项卡 <span class="number">1</span>** </span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**选项卡 <span class="number">2</span>**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab A --&gt;</span><br><span class="line">**选项卡 <span class="number">3</span>** 名字为A</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<p>主题配置文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Tabs</span> tag</span><br><span class="line"><span class="attr">tabs</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">transition</span>:</span><br><span class="line">    <span class="attr">tabs</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">labels</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">border_radius</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<br/>
<u>按钮 - Button</u>
<br/>
使用方法:

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% button url, text, icon [<span class="keyword">class</span>], [title] %&#125;</span><br></pre></td></tr></table></figure>

<p>url : 绝对或相对 URL<br>text : 按钮文字，如果未指定图标则为必须<br>icon : FontAwesome 图标名称（开头没有’fa-‘）。如果未指定文本，则为必需<br>[class] : FontAwesome 类：fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5X ，可选参数。<br>[title] : 鼠标悬停时的工具提示，可选参数。</p>
<p>注意：最好添加 div标签，测试时没加 div，下面显示不完全，加上非常美观。</p>
<p>一个示例：</p>
<pre><code>&lt;div&gt;&#123;% button https://tding.top/ ,首页,home fa-fw,这是小丁的个人博客首页%&#125;&lt;/div&gt;
</code></pre>
<br/>
多个按钮居中显示：

<pre><code>&lt;div class=&quot;text-center&quot;&gt;&lt;div&gt;&#123;% button https://tding.top/ ,首页,home fa-fw,这是小丁的个人博客首页%&#125; &#123;% button https://tding.top/movies/ ,观影,film fa-fw,豆瓣电影%&#125; &#123;% button https://tding.top/books/ ,阅读,book fa-fw,豆瓣读书%&#125;&lt;/div&gt;&lt;/div&gt;
</code></pre>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>hexo-next主题配置</tag>
      </tags>
  </entry>
  <entry>
    <title>token的使用</title>
    <url>/liuqi_blogs/2022/02/19/token%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="token"><a href="#token" class="headerlink" title="token"></a>token</h1><p>尚方宝剑 : 令牌</p>
<ul>
<li><p>体积小（一串字符串），因而传输速度快</p>
</li>
<li><p>传输方式多样，可以通过HTTP 头部（推荐）、 URL、POST 参数等方式传输严谨的结构化。它自身（在 payload 中）就包含了所有与用户相关的验证消息，如用户可访问路由、访问有效期等信息，服务器无需再去连接数据库验证信息的有效性，并且 payload 支持为应用定制化支持跨域验证，多应用于单点登录 充分依赖无状态 API ，契合 RESTful 设计原则（无状态的 HTTP）</p>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>用户登录之后，服务器会返回一串 token 并保存在本地也就是客户端，在这之后的对服务器的访问都要带上这串 token，来获得访问服务器相关路由、服务及资源的权限。 易于实现 CDN，将静态资源分布式管理</p>
</li>
<li><p>在传统的 session 验证中，服务端必须保存 session ID，用于与用户传过来的 cookie 验证。而一开始 sessionID 只会保存在一台服务器上，所以只能由一台 server 应答，就算其他服务器有空闲也无法应答，无法充分利用到分布式服务器的优点。 JWT 依赖的是在客户端本地保存验证信息，不需要利用服务器保存的信息来验证，所以任意一台服务器都可以应答，服务器的资源也被较好地利用。</p>
</li>
<li><p>对原生的移动端应用支持较好 原生的移动应用对 cookie 与 session 的支持不够好，而对 token 的方式支持较好。</p>
</li>
</ul>
<p>总结:</p>
<ul>
<li>不依赖更复杂的系统  不依赖数据库  不依赖session/cookie </li>
<li>对移动端支持友好</li>
<li>为什么 : 为了授权</li>
</ul>
<h2 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h2><p>express + 前端/小程序</p>
<p>express :  </p>
<ol>
<li>生成token  哪个接口可以得到token  ‘/login’</li>
<li>验证token</li>
</ol>
<p>前端 : </p>
<ol>
<li>每次请求的时候都携带上token</li>
</ol>
<p>登录–&gt;返回一个token–&gt;前端每次请求的时候都携带上–&gt;后端判断–&gt;如果token是有效的–&gt;给前端返回数据</p>
<h3 id="1-1-使用"><a href="#1-1-使用" class="headerlink" title="1.1 使用"></a>1.1 使用</h3><p>express-jwt : </p>
<p>jsonwebtoken : 校验和生成token</p>
<p><img src="image/2.png" alt="token解析"></p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>express</p>
<ul>
<li>第一步 : 在登录接口中生成token</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;username,</span><br><span class="line">    password&#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (username === <span class="string">&#x27;小傲&#x27;</span> &amp;&amp; password === <span class="string">&#x27;123456&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="comment">// 单向加密 md5加密</span></span><br><span class="line">      username</span><br><span class="line">    &#125;,<span class="string">&quot;bingyu&quot;</span>,&#123;</span><br><span class="line">      <span class="attr">expiresIn</span>: <span class="string">&quot;1d&quot;</span> <span class="comment">// 彩虹表 md5暴力破解</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;登录成功&#x27;</span>,</span><br><span class="line">      token <span class="comment">// 出生了 要有身份证</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">      <span class="attr">error</span>: <span class="string">&#x27;登录失败&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>第二步 : 前端登录成功之后得到token 存起来</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">     <span class="comment">//http://localhost:3000</span></span><br><span class="line">     <span class="attr">url</span>: app.<span class="property">globalData</span>.<span class="property">BASE_URL</span>+<span class="string">&#x27;/student/login&#x27;</span>,</span><br><span class="line">     <span class="attr">method</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">     <span class="attr">data</span>:&#123;</span><br><span class="line">       username,password</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">success</span>:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">       <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">1</span>)&#123;</span><br><span class="line">         <span class="comment">//存储token </span></span><br><span class="line">         wx.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">           <span class="attr">data</span>: res.<span class="property">data</span>.<span class="property">token</span>,</span><br><span class="line">           <span class="attr">key</span>: <span class="string">&#x27;token&#x27;</span>,</span><br><span class="line">         &#125;)</span><br><span class="line">         <span class="comment">// 在app.json 注册 tabBar的时候 如果包含要跳转的路径 只能使用wx.switchTab</span></span><br><span class="line">         wx.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">           <span class="attr">url</span>: <span class="string">&#x27;/pages/question/question&#x27;</span>,</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">           <span class="attr">icon</span>:<span class="string">&quot;none&quot;</span>,</span><br><span class="line">           <span class="attr">title</span>: <span class="string">&#x27;登录失败&#x27;</span>,</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>



<ul>
<li>第三步 : 在前端每次请求的时候都携带上token</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">      <span class="attr">header</span>:&#123;</span><br><span class="line">        <span class="attr">token</span>:wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>) <span class="comment">// 去网吧 掏出身份证</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">url</span>: app.<span class="property">globalData</span>.<span class="property">BASE_URL</span>+<span class="string">&#x27;/question/list?course=&#x27;</span>+options.<span class="property">courseName</span>,</span><br><span class="line">      <span class="attr">success</span>:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">questionList</span>:res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>第四步: 验证token</li>
</ul>
<p>express中间件 : 每次请求之前都会先走中间件的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">//不论什么请求 都要校验 token 是否合法</span></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">headers</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;token&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">//校验token</span></span><br><span class="line">    jwt.<span class="title function_">verify</span>(req.<span class="property">headers</span>.<span class="property">token</span>, <span class="string">&#x27;bingyu&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, decoded</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123; <span class="comment">// 有错误信息 校验失败</span></span><br><span class="line">        <span class="comment">// token 不对</span></span><br><span class="line">        <span class="comment">// token过期了</span></span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">          <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">          <span class="attr">error</span>: <span class="string">&quot;token失效&quot;</span></span><br><span class="line">        &#125;);<span class="comment">//无效</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>();<span class="comment">//有效</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/student/login&#x27;</span>) &#123;<span class="comment">//没有得到token </span></span><br><span class="line">      <span class="title function_">next</span>(); <span class="comment">//白名单  不需要校验的地方</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">next</span>();<span class="comment">//通过了</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">学生登录--&gt;登录成功--&gt;获取token--&gt;存起来--&gt;每次请求携带着--&gt;后端校验--&gt;校验成功--&gt;返回200</span><br><span class="line">后端校验--&gt;校验失败--&gt;返回401</span><br><span class="line">学生登录--&gt;登录失败--&gt;返回400</span><br><span class="line">后台管理登录--&gt;登录成功</span><br><span class="line">后台管理登录--&gt;登录失败</span><br></pre></td></tr></table></figure>



<h2 id="完整的校验-包含白名单"><a href="#完整的校验-包含白名单" class="headerlink" title="完整的校验(包含白名单)"></a>完整的校验(包含白名单)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> whitePath = [<span class="string">&#x27;/users/login&#x27;</span>, <span class="string">&#x27;/student/login&#x27;</span>, <span class="string">&#x27;/common/upload&#x27;</span>];</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> token = req.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);</span><br><span class="line">  <span class="keyword">let</span> index = whitePath.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span> =&gt;</span> item === req.<span class="property">url</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//图片的白名单</span></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">url</span>.<span class="title function_">includes</span>(<span class="string">&#x27;/photos&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (token === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">      <span class="attr">error</span>: <span class="string">&quot;No authorization token was found&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    jwt.<span class="title function_">verify</span>(req.<span class="property">headers</span>.<span class="property">token</span>, <span class="string">&#x27;bingyu&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, decoded</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123; <span class="comment">// 有错误信息 校验失败</span></span><br><span class="line">        <span class="comment">// token 不对</span></span><br><span class="line">        <span class="comment">// token过期了</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">          <span class="attr">code</span>: -<span class="number">1</span>,</span><br><span class="line">          <span class="attr">error</span>: <span class="string">&quot;token expired&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">next</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="每次请求的时候携带token"><a href="#每次请求的时候携带token" class="headerlink" title="每次请求的时候携带token"></a>每次请求的时候携带token</h2><ul>
<li><p>结合<code>async</code> <code>await</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">submitForm</span>(<span class="params">formName</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="keyword">async</span> (valid) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="comment">//验证通过</span></span><br><span class="line">      <span class="comment">//跳转页面 实现登录</span></span><br><span class="line">      <span class="comment">// 登录成功获取token</span></span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">login</span>(&#123;<span class="attr">username</span>: <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">name</span>, <span class="attr">password</span>: <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">pass</span>&#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, res.<span class="property">token</span>);</span><br><span class="line">      <span class="comment">//this.$router.push(&#x27;/main&#x27;); 返回的是promise</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/main&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error submit!!&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="每次请求都携带token"><a href="#每次请求都携带token" class="headerlink" title="每次请求都携带token"></a>每次请求都携带token</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">  config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>前端异常监控</title>
    <url>/liuqi_blogs/2021/03/26/%E5%89%8D%E7%AB%AF%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<p>在前端项目中，由于 JavaScript 本身是一个弱类型语言，加上浏览器环境的复杂性，网络问题等等，很容易发生错误。做好网页错误监控，不断优化代码，提高代码健壮性是一项很重要的工作。</p>
<span id="more"></span>

<h2 id="JS-中的-Error"><a href="#JS-中的-Error" class="headerlink" title="JS 中的 Error"></a>JS 中的 Error</h2><h3 id="通用-Error"><a href="#通用-Error" class="headerlink" title="通用 Error"></a>通用 Error</h3><p>Error 有两个标准属性：</p>
<ul>
<li><code>Error.prototype.name</code>：错误的名字</li>
<li><code>Error.prototype.message</code>：错误的描述</li>
</ul>
<p>一个标准方法：</p>
<ul>
<li><code>Error.prototype.toString</code>：返回表示一个表示错误的字符串</li>
</ul>
<p>非标准的属性（各个浏览器厂商对于 Error 都有自己的实现）。比如下面这些属性：</p>
<ul>
<li><code>Error.prototype.fileName</code>：产生错误的文件名。</li>
<li><code>Error.prototype.lineNumber</code>：产生错误的行号。</li>
<li><code>Error.prototype.columnNumber</code>：产生错误的列号。</li>
<li><code>Error.prototype.stack</code>：堆栈信息。这个比较常用。</li>
</ul>
<h3 id="Error-种类"><a href="#Error-种类" class="headerlink" title="Error 种类"></a>Error 种类</h3><p>除了通用的 Error 构造函数外，JavaScript 还有 7 个其他类型的错误构造函数。</p>
<ul>
<li>InternalError: 创建一个代表 Javascript 引擎内部错误的异常抛出的实例。 如: “递归太多”。非 ECMAScript 标准。</li>
<li>RangeError: 数值变量或参数超出其有效范围。例子：<code>var a = new Array(-1);</code></li>
<li>EvalError: 与 <code>eval()</code> 相关的错误。<code>eval()</code> 本身没有正确执行。</li>
<li>ReferenceError: 引用错误。 例子：<code>console.log(b);</code></li>
<li>SyntaxError: 语法错误。例子：<code>var a = ;</code></li>
<li>TypeError: 变量或参数不属于有效范围。例子：<code>[1,2].split(&#39;.&#39;)</code></li>
<li>URIError: 给 <code>encodeURI</code> 或 <code>decodeURl()</code> 传递的参数无效。例子：<code>decodeURI(&#39;%2&#39;)</code></li>
</ul>
<p>当 JavaScript 运行过程中出错时，会抛出上 8 种（上述 7 种加上通用错误类型）错误中的其中一种错误。错误类型可以通过 <code>error.name</code> 拿到。</p>
<h2 id="DOMException"><a href="#DOMException" class="headerlink" title="DOMException"></a>DOMException</h2><p>除了 JavaScript 本身运行时会发生的错误。页面中还会有其他的异常，比如错误地操作了 DOM。</p>
<p>DOMException 有以下三个属性：</p>
<ul>
<li><code>DOMException.code</code>：错误编号。</li>
<li><code>DOMException.message</code>：错误描述。</li>
<li><code>DOMException.name</code>：错误名称。</li>
</ul>
<h2 id="Promise-产生的异常"><a href="#Promise-产生的异常" class="headerlink" title="Promise 产生的异常"></a>Promise 产生的异常</h2><p>在 Promise 中，如果 Promise 被 reject 了，就会抛出异常：PromiseRejectionEvent。下面两种情况都会导致 Promise 被 reject：</p>
<ol>
<li>业务代码本身调用了 <code>Promise.reject</code>。</li>
<li>Promise 中的代码出错。</li>
</ol>
<p>PromiseRejectionEvent 的构造函数目前在浏览器中大多都不兼容，这里就不说了。</p>
<p>PromiseRejectionEvent 的属性有两个：</p>
<ul>
<li><code>PromiseRejectionEvent.promise</code>：被 reject 的 Promise。</li>
<li><code>PromiseRejectionEvent.reason</code>：Promise 被 reject 的原因。会传递给 reject。Promise 的 catch 中的参数。</li>
</ul>
<h2 id="捕获错误"><a href="#捕获错误" class="headerlink" title="捕获错误"></a>捕获错误</h2><h3 id="window-onerror"><a href="#window-onerror" class="headerlink" title="window.onerror"></a><code>window.onerror</code></h3><p>当有 JS 运行时错误触发时，window 会触发 error 事件，并执行 <code>window.onerror()</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onerror = function(message, source, lineno, colno, error) &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>函数参数：</p>
<ul>
<li>message：错误信息（字符串）。可用于 HTML onerror=”” 处理程序中的 event。</li>
<li>source：发生错误的脚本 URL（字符串）</li>
<li>lineno：发生错误的行号（数字）</li>
<li>colno：发生错误的列号（数字）</li>
<li>error：Error 对象</li>
</ul>
<p><strong>若该函数返回 true，则阻止执行默认事件处理函数，如异常信息不会在 console 中打印。没有返回值或者返回值为 false 的时候，异常信息会在 console 中打印。</strong></p>
<h3 id="window-addEventListener-39-error-39"><a href="#window-addEventListener-39-error-39" class="headerlink" title="window.addEventListener(&#39;error&#39;)"></a><code>window.addEventListener(&#39;error&#39;)</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.addEventListener(&#x27;error&#x27;, function(event) &#123; ... &#125;)</span><br></pre></td></tr></table></figure>

<p><strong>event 是 ErrorEvent 对象的实例。ErrorEvent 是事件对象在脚本发生错误时产生，从 Event 继承而来</strong>。由于是事件，自然可以拿到 target 属性。ErrorEvent 还包括了错误发生时的信息：</p>
<ul>
<li><code>ErrorEvent.prototype.message</code>: 字符串，包含了所发生错误的描述信息。</li>
<li><code>ErrorEvent.prototype.filename</code>: 字符串，包含了发生错误的脚本文件的文件名。</li>
<li><code>ErrorEvent.prototype.lineno</code>: 数字，包含了错误发生时所在的行号。</li>
<li><code>ErrorEvent.prototype.colno</code>: 数字，包含了错误发生时所在的列号。</li>
<li><code>ErrorEvent.prototype.error</code>: 发生错误时所抛出的 Error 对象。</li>
</ul>
<h3 id="捕获未处理的-Promise-错误-window-addEventListener-39-unhandledrejection-39"><a href="#捕获未处理的-Promise-错误-window-addEventListener-39-unhandledrejection-39" class="headerlink" title="捕获未处理的 Promise 错误 -window.addEventListener(&#39;unhandledrejection&#39;)"></a>捕获未处理的 Promise 错误 -<code>window.addEventListener(&#39;unhandledrejection&#39;)</code></h3><p>在使用 Promise 的时候，如果没有声明 catch 代码块，Promise 的异常会被抛出。我们可以<strong>通过监听 unhandledrejection 事件</strong>或者 <code>window.onunhandledrejection</code> 捕获到该异常。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.addEventListener(&#x27;unhandledrejection&#x27;, function (event) &#123; ... &#125;);</span><br></pre></td></tr></table></figure>

<p>event 就是上文提到的 PromiseRejectionEvent，<strong>我们只需要关注其 reason（Promise 的 reject 值）就行</strong>。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.addEventListener(&#x27;unhandledrejection&#x27;, event =&gt; &#123;</span><br><span class="line">  // 打印&quot;Hello, Fundebug!&quot;</span><br><span class="line">  console.log(event.reason); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function foo() &#123;</span><br><span class="line">  Promise.reject(&#x27;Hello, Fundebug!&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<p><strong>当一个 Promise 错误最初未被处理，但是稍后又得到了处理，则会触发 rejectionhandled 事件</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.addEventListener(&#x27;unhandledrejection&#x27;, event =&gt; &#123;</span><br><span class="line">  // 打印&quot;Hello, Fundebug!&quot;</span><br><span class="line">  console.log(event.reason); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">window.addEventListener(&#x27;rejectionhandled&#x27;, event =&gt; &#123;</span><br><span class="line">  // 1秒后打印&quot;rejection handled&quot;</span><br><span class="line">  console.log(&#x27;rejection handled&#x27;); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function foo() &#123;</span><br><span class="line">  return Promise.reject(&#x27;Hello, Fundebug!&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var r = foo();</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  r.catch(e =&gt; &#123;&#125;);</span><br><span class="line">&#125;, 1000);</span><br></pre></td></tr></table></figure>

<h3 id="window-onerror-和-window-addEventListener-39-error-39-的区别"><a href="#window-onerror-和-window-addEventListener-39-error-39-的区别" class="headerlink" title="window.onerror 和 window.addEventListener(&#39;error&#39;) 的区别"></a><code>window.onerror</code> 和 <code>window.addEventListener(&#39;error&#39;)</code> 的区别</h3><ol>
<li><strong>事件监听器和事件处理器的区别</strong>。监听器只能声明一次，后续的声明会覆盖之前的声明。而事件处理器则可以绑定多个回调函数。</li>
<li>资源 (<code>&lt;img&gt;</code> 或 <code>&lt;script&gt;</code>) 加载失败时，加载资源的元素会触发一个 Event 接口的 error 事件，并执行该元素上的 <code>onerror()</code> 处理函数。但这些 error 事件不会向上冒泡到 window。不过，这些 error 事件能被 <code>window.addEventListener(&#39;error&#39;)</code> 捕获。也就是说，<strong>面对资源加载失败的错误，只能用 <code>window.addEventListerner(&#39;error&#39;)</code>，<code>window.onerror</code> 无效</strong>。</li>
</ol>
<h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>页面错误监控：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// JS错误处理</span><br><span class="line">window.addEventListener(&#x27;error&#x27;, function (event) &#123;</span><br><span class="line">    const isResource = event.target &amp;&amp; (event.target.src || event.target.href)</span><br><span class="line">    if (isResource) &#123; </span><br><span class="line">        // 资源错误</span><br><span class="line">        // 关键信息上报</span><br><span class="line">    &#125; else &#123; </span><br><span class="line">        // JS错误</span><br><span class="line">        const &#123;message, filename, lineno, colno, error&#125; = event</span><br><span class="line">        // 关键信息上报</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// promise错误</span><br><span class="line">window.addEventListener(&#x27;unhandledrejection&#x27;, function (event) &#123;</span><br><span class="line">    let message = &#x27;&#x27;</span><br><span class="line">    let lineno = &#x27;&#x27;</span><br><span class="line">    let colno = &#x27;&#x27;</span><br><span class="line">    let name = &#x27;&#x27;</span><br><span class="line">    let url = event.target.location.href</span><br><span class="line">    let time = getFormatDate()</span><br><span class="line">    if (typeof event.reason === &#x27;string&#x27;) &#123;</span><br><span class="line">        message = event.reason</span><br><span class="line">    &#125; else if (typeof event.reason === &#x27;object&#x27;) &#123;</span><br><span class="line">        message = event.reason.message</span><br><span class="line">        if (event.reason.stack) &#123;</span><br><span class="line">            var matchResult = event.reason.stack.match(/at\s+(.+):(\d+):(\d+)/)</span><br><span class="line">            if (matchResult) &#123;</span><br><span class="line">                name = matchResult[1]</span><br><span class="line">                lineno = matchResult[2]</span><br><span class="line">                colno = matchResult[3]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 关键信息上报</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/datiangou/p/10224846.html">前端开发中的 Error 以及异常捕获</a></li>
<li><a href="https://segmentfault.com/a/1190000023259434">window.onerror 和 window.addEventListener (‘error’) 的区别</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/30047612">捕获未处理的 Promise 错误</a></li>
</ul>
]]></content>
      <categories>
        <category>前端，性能优化</category>
      </categories>
      <tags>
        <tag>前端，性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>单页面应用实现浏览器前进后退的方法</title>
    <url>/liuqi_blogs/2022/01/26/%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%89%8D%E8%BF%9B%E5%90%8E%E9%80%80%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Ajax 可以在不需要页面的刷新动作时获取数据（页面的 URL 也会保持不变），但是问题时，这样也就无法通过浏览器进行前进与后退操作。</p>
<p>现在这个问题可以通过 <code>history.pushState()</code> 方法以及 <code>window.onpopstate</code> 事件监听去解决。</p>
<span id="more"></span>

<h2 id="history-pushState-用法"><a href="#history-pushState-用法" class="headerlink" title="history.pushState() 用法"></a><code>history.pushState()</code> 用法</h2><p><code>history.pushState()</code> 方法可以<strong>无刷新</strong>地向当前 history 插入一条历史状态。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">history.pushState(stateObject, title, url);</span><br></pre></td></tr></table></figure>

<ul>
<li>stateObject：传入的状态对象。<strong>当前进（后退）到某一新的状态时，会触发 popstate 事件。此事件对象 <code>event.state</code> 存储的就是这个 stateObject 的值</strong></li>
<li>title：新状态的标题（目前，大多数浏览器并不支持该参数，建议传 null 值）</li>
<li>url：状态对应的历史记录的地址</li>
</ul>
<h2 id="window-onpopstate-事件监听"><a href="#window-onpopstate-事件监听" class="headerlink" title="window.onpopstate 事件监听"></a><code>window.onpopstate</code> 事件监听</h2><p>popstate 事件只会在浏览器某些行为下触发，比如<strong>点击后退、前进按钮</strong>，或者在 JavaScript 中调用 <code>history.back()</code>、<code>history.forward()</code>、<code>history.go()</code> 方法。</p>
<blockquote>
<ul>
<li><code>History.go()</code></li>
<li><code>History.back()</code>：等同于 <code>history.go(-1)</code></li>
<li><code>History.forward()</code>：等同于 <code>history.go(1)</code></li>
</ul>
</blockquote>
<p>实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onpopstate = function(event) &#123;</span><br><span class="line">  alert(&quot;location: &quot; + document.location + &quot;, state: &quot; + JSON.stringify(event.state));</span><br><span class="line">&#125;;</span><br><span class="line">//绑定事件处理函数.</span><br><span class="line">history.pushState(&#123;page: 1&#125;, &quot;title 1&quot;, &quot;?page=1&quot;);    //添加并激活一个历史记录条目 http://example.com/example.html?page=1,条目索引为1</span><br><span class="line">history.pushState(&#123;page: 2&#125;, &quot;title 2&quot;, &quot;?page=2&quot;);    //添加并激活一个历史记录条目 http://example.com/example.html?page=2,条目索引为2</span><br><span class="line">history.replaceState(&#123;page: 3&#125;, &quot;title 3&quot;, &quot;?page=3&quot;); //修改当前激活的历史记录条目 http://ex..?page=2 变为 http://ex..?page=3,条目索引为3</span><br><span class="line">history.back(); // 弹出 &quot;location: http://example.com/example.html?page=1, state: &#123;&quot;page&quot;:1&#125;&quot;</span><br><span class="line">history.back(); // 弹出 &quot;location: http://example.com/example.html, state: null</span><br><span class="line">history.go(2);  // 弹出 &quot;location: http://example.com/example.html?page=3, state: &#123;&quot;page&quot;:3&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>现在有一个报表应用用于展示某年的销售数据。</p>
<ol>
<li>刚打开时，没有任何报表数据：</li>
</ol>
<p>2015 2016 2017 2018</p>
<table>
<thead>
<tr>
<th align="left">一季度</th>
<th align="left">二季度</th>
<th align="left">三季度</th>
<th align="left">四季度</th>
<th align="left">总和</th>
</tr>
</thead>
<tbody><tr>
<td align="left">无</td>
<td align="left">无</td>
<td align="left">无</td>
<td align="left">无</td>
<td align="left">无</td>
</tr>
</tbody></table>
<p>此时的 URL: <code>http://example.com/getFinaData.php</code></p>
<ol>
<li>点击按钮通过 Ajax 加载 2015 年的数据</li>
</ol>
<p>2015 2016 2017 2018</p>
<table>
<thead>
<tr>
<th align="left">一季度</th>
<th align="left">二季度</th>
<th align="left">三季度</th>
<th align="left">四季度</th>
<th align="left">总和</th>
</tr>
</thead>
<tbody><tr>
<td align="left">122 万</td>
<td align="left">147 万</td>
<td align="left">135 万</td>
<td align="left">153 万</td>
<td align="left">557 万</td>
</tr>
</tbody></table>
<p><strong>同时我们为这一次数据加载新增一条历史状态</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">history.pushState(&#123;year: 2015&#125;, &quot;页面标题&quot;, &quot;getFinaData.php?year=2015&quot;);</span><br></pre></td></tr></table></figure>

<p>此时的 URL 变为：<code>http://example.com/getFinaData.php?year=2015</code></p>
<p>同时你会发现浏览器的后退按钮激活了，因为在 <code>pushState()</code> 的作用下无刷新地新增了一条历史状态。</p>
<ol>
<li>重复上一步，我们再为这一次数据加载新增一条历史状态：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">history.pushState(&#123;year: 2018&#125;, &quot;页面标题&quot;, &quot;getFinaData.php?year=2018&quot;);</span><br></pre></td></tr></table></figure>

<p>此时的 URL 变为：<code>http://example.com/getFinaData.php?year=2018</code></p>
<ol>
<li>现在，我们使用后退键，看看会发生什么？</li>
</ol>
<p>URL 重新变回：<code>http://example.com/getFinaData.php?year=2015</code></p>
<p><strong>但是，界面并没有发生变化（表格依旧显示的是 2018 年的数据）</strong></p>
<p><strong>因为点击后退键只是简单地切回到上一个状态，而这个状态是无刷新的，我们要做的捕获这个切换到的状态，并获取上一次保存的状态值（<code>pushState()</code> 的第一个参数），然后再调用一次 ajax 请求数据。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onpopstate = function(event) &#123;</span><br><span class="line">  // 获取存储的状态</span><br><span class="line">  var params = event.state; // &#123;year: 2015&#125;</span><br><span class="line">  </span><br><span class="line">  // 根据存储的状态，再次使用Ajax加载数据并插入到视图中</span><br><span class="line">  </span><br><span class="line">  // ...具体代码省略</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>现在，成功实现无刷新后退到上一次界面。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/juicy-initial/p/11560107.html">JS 监听浏览器后退事件</a></li>
<li><a href="https://blog.csdn.net/weixin_39667945/article/details/88563003">history.pushState()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowEventHandlers/onpopstate">window.onpopstate</a></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端页面性能优化</title>
    <url>/liuqi_blogs/2022/02/12/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>前端 Vue 工程的性能优化笔记。</p>
<p>前端性能优化的目的是为了让用户访问网站的时候可以非常快的加载出来，常见的优化方法：减小资源大小、CDN 加速、浏览器缓存。</p>
<h2 id="Vue-页面优化"><a href="#Vue-页面优化" class="headerlink" title="Vue 页面优化"></a>Vue 页面优化</h2><h3 id="v-for-优化"><a href="#v-for-优化" class="headerlink" title="v-for 优化"></a>v-for 优化</h3><h4 id="不在同一级使用-v-for、v-if"><a href="#不在同一级使用-v-for、v-if" class="headerlink" title="不在同一级使用 v-for、v-if"></a>不在同一级使用 v-for、v-if</h4><p>当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级，<strong>这意味着 v-if 将分别重复运行于每个 v-for 循环中</strong>。</p>
<span id="more"></span>

<p>要避免出现这种情况，则在外层嵌套 template，在这一层进行 v-if 判断，然后在内部进行 v-for 循环，如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html&gt; </span><br><span class="line">&lt;head&gt; </span><br><span class="line">    &lt;title&gt;Vue事件处理&lt;/title&gt; </span><br><span class="line">&lt;/head&gt; </span><br><span class="line">&lt;body&gt; </span><br><span class="line">    &lt;div id=&quot;demo&quot;&gt; </span><br><span class="line">        &lt;h1&gt;v-for和v-if谁的优先级高？应该如何正确使用避免性能问题？&lt;/h1&gt; </span><br><span class="line">        &lt;!-- &lt;p v-for=&quot;child in children&quot; v-if=&quot;isFolder&quot;&gt;&#123;&#123;child.title&#125;&#125;&lt;/p&gt; --&gt; </span><br><span class="line">        &lt;template v-if=&quot;isFolder&quot;&gt; </span><br><span class="line">            &lt;p v-for=&quot;child in children&quot;&gt;&#123;&#123;child.title&#125;&#125;&lt;/p&gt; </span><br><span class="line">        &lt;/template&gt; </span><br><span class="line">    &lt;/div&gt; </span><br><span class="line">    &lt;script src=&quot;../../dist/vue.js&quot;&gt;&lt;/script&gt; </span><br><span class="line">    &lt;script&gt; </span><br><span class="line">        // 创建实例 </span><br><span class="line">        const app = new Vue(&#123; </span><br><span class="line">            el: &#x27;#demo&#x27;, </span><br><span class="line">            data() &#123; </span><br><span class="line">                return &#123; </span><br><span class="line">                    children: [ </span><br><span class="line">                        &#123;title:&#x27;foo&#x27;&#125;, </span><br><span class="line">                        &#123;title:&#x27;bar&#x27;&#125;, </span><br><span class="line">                    ] </span><br><span class="line">                &#125; </span><br><span class="line">            &#125;, </span><br><span class="line">            computed: &#123; </span><br><span class="line">                isFolder() &#123; </span><br><span class="line">                    return this.children &amp;&amp; this.children.length &gt; 0                  </span><br><span class="line">                &#125; </span><br><span class="line">            &#125;, </span><br><span class="line">        &#125;); </span><br><span class="line">        console.log(app.$options.render); </span><br><span class="line">    &lt;/script&gt; </span><br><span class="line">&lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>两者同级时，渲染函数如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function anonymous(</span><br><span class="line">) &#123;</span><br><span class="line">    with (this) &#123;</span><br><span class="line">        return _c(&#x27;div&#x27;, &#123; attrs: &#123; &quot;id&quot;: &quot;demo&quot; &#125; &#125;, [_c(&#x27;h1&#x27;, [_v(&quot;v-for和v-if谁的优先 级高？应该如何正确使用避免性能问题？&quot;)]), _v(&quot; &quot;),</span><br><span class="line">        _l((children), function (child) &#123;</span><br><span class="line">            return (isFolder) ? _c(&#x27;p&#x27;,</span><br><span class="line">                [_v(_s(child.title))]) : _e()</span><br><span class="line">        &#125;)], 2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>两者不同级时，渲染函数如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function anonymous(</span><br><span class="line">) &#123;</span><br><span class="line">    with (this) &#123;</span><br><span class="line">        return _c(&#x27;div&#x27;, &#123; attrs: &#123; &quot;id&quot;: &quot;demo&quot; &#125; &#125;, [_c(&#x27;h1&#x27;, [_v(&quot;v-for和v-if谁的优先 级高？应该如何正确使用避免性能问题？&quot;)]), _v(&quot; &quot;),</span><br><span class="line">        (isFolder) ? _l((children), function (child) &#123;</span><br><span class="line">            return _c(&#x27;p&#x27;,</span><br><span class="line">                [_v(_s(child.title))])</span><br><span class="line">        &#125;) : _e()], 2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="v-for-的-key-值"><a href="#v-for-的-key-值" class="headerlink" title="v-for 的 key 值"></a>v-for 的 key 值</h3><ul>
<li><a href="https://tding.top/archives/28aaa65b.html">Vue 的 v-for 为什么要加 key</a></li>
</ul>
<p><strong>注意：不建议使用 index 作为 key 值</strong>。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">         下标</span><br><span class="line">1. 前天   0</span><br><span class="line">2. 昨天   1</span><br><span class="line">3. 今天   2</span><br><span class="line">4. 明天   3</span><br></pre></td></tr></table></figure>

<p>假设我们删除了 List 中下标为 1 的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">         下标</span><br><span class="line">1. 前天   0</span><br><span class="line">2. 今天   1</span><br><span class="line">3. 明天   2</span><br></pre></td></tr></table></figure>

<p>我们可以发现，除了第一个数据以外，其余数据的下标均发生了变化。以前的数据和重新渲染后的数据随着 key 值的变化从而没法建立关联关系，这就失去了 key 值存在的意义。</p>
<h3 id="长列表性能优化"><a href="#长列表性能优化" class="headerlink" title="长列表性能优化"></a>长列表性能优化</h3><p>当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 <code>Object.defineProperty</code> 把这些属性全部转为 <code>getter/setter</code>，这些 <code>getter/setter</code> 对用户来说是不可见的，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。</p>
<p>然而有些时候我们的组件就是<strong>纯粹的数据展示，不会有任何改变</strong>，我们就不需要 Vue 来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，那如何禁止 Vue 劫持我们的数据呢？可以通过 <code>Object.freeze</code> 方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data: () =&gt; (&#123;</span><br><span class="line">    users: &#123;&#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  async created() &#123;</span><br><span class="line">    const users = await axios.get(&quot;/api/users&quot;);</span><br><span class="line">    this.users = Object.freeze(users);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Object.freeze()</code> 可以冻结一个对象。<strong>一个被冻结的对象再也不能被修改；不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值</strong>。此外，冻结一个对象后该对象的原型也不能被修改。</p>
</blockquote>
<h2 id="Webpack-打包相关优化"><a href="#Webpack-打包相关优化" class="headerlink" title="Webpack 打包相关优化"></a>Webpack 打包相关优化</h2><p>我们可以对 webpack 打包过程进行优化，从而去减小资源大小，主要方法：</p>
<ul>
<li>压缩资源：<ul>
<li>compression-webpack-plugin 进行 gzip 压缩</li>
<li>terser-webpack-plugin 打包时去除 <code>console.log</code> 以及 <code>debugger</code></li>
</ul>
</li>
<li>按需打包：<ul>
<li>lodash 按需引入</li>
<li>moment 按需打包</li>
</ul>
</li>
<li>按需加载：<ul>
<li>组件路由懒加载</li>
</ul>
</li>
<li>代码分割：分割各个模块代码，提取相同部分代码，从而减少重复代码<ul>
<li>splitChunks 进行代码分割</li>
</ul>
</li>
</ul>
<p>在进行优化之前，首先通过 webpack-bundle-analyzer 插件去直观的看一下项目中各个模块的大小。</p>
<h3 id="webpack-bundle-analyzer-打包文件分析"><a href="#webpack-bundle-analyzer-打包文件分析" class="headerlink" title="webpack-bundle-analyzer 打包文件分析"></a>webpack-bundle-analyzer 打包文件分析</h3><p>通过使用 <code>webpack-bundle-analyzer</code> 可以让我们非常直观的看到项目中各模块的大小，方便后续进行优化。</p>
<p>依赖安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install webpack-bundle-analyzer –save-dev</span><br></pre></td></tr></table></figure>

<p>然后在 <code>vue.config.js</code> 中添加配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const BundleAnalyzerPlugin = require(&#x27;webpack-bundle-analyzer&#x27;).BundleAnalyzerPlugin</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  configureWebpack: (config) =&gt; &#123;</span><br><span class="line">    config.plugins.push(</span><br><span class="line">      new BundleAnalyzerPlugin()</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用默认配置（<code>new BundleAnalyzerPlugin()</code>）。</p>
<p>然后每次运行时，系统默认浏览器打开 <code>http://127.0.0.1:8888/</code>，展示项目的分析结果。</p>
<p>可选的配置选项：</p>
<ul>
<li><code>analyzerMode:&#39;server&#39;</code>，可以是 server，static 或 disabled。在 server 模式下，分析器将启动 HTTP 服务器来显示软件包报告。在 “静态” 模式下，会生成带有报告的单个 HTML 文件。在 disabled 模式下，你可以使用这个插件来将 generateStatsFile 设置为 true 来生成 Webpack Stats JSON 文件。</li>
<li><code>analyzerHost: &#39;127.0.0.1&#39;</code>, 将在 “服务器” 模式下使用的端口启动 HTTP 服务器。</li>
<li><code>analyzerPort: 8888</code>, 端口号。</li>
<li><code>reportFilename: &#39;report.html&#39;</code>, 路径捆绑，将在 static 模式下生成的报告文件。相对于捆绑输出目录。</li>
<li><code>defaultSizes: &#39;parsed&#39;</code>，默认显示在报告中的模块大小匹配方式。应该是 stat，parsed 或者 gzip 中的一个。</li>
<li><code>openAnalyzer: true</code>：在默认浏览器中自动打开报告。</li>
<li><code>generateStatsFile:false</code>: 如果为 true，则 Webpack Stats JSON 文件将在 bundle 输出目录中生成。</li>
<li><code>statsFilename: &#39;stats.json&#39;</code>, 相对于捆绑输出目录。</li>
<li><code>statsOptions: null</code>，<code>stats.toJson()</code> 方法的选项。例如，您可以使用 <code>source:false</code> 选项排除统计文件中模块的来源。在这里查看更多选项：<a href="https://github.com/webpack/webpack/blob/webpack-1/lib/Stats.js#L21">https://github.com/webpack/webpack/blob/webpack-1/lib/Stats.js#L21</a></li>
<li><code>logLevel: &#39;info&#39;</code>，日志级别，可以是 info, warn, error, silent。</li>
<li><code>excludeAssets:null</code>，用于排除分析一些文件。</li>
</ul>
<p>默认配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new BundleAnalyzerPlugin(&#123;</span><br><span class="line">  analyzerMode: &#x27;server&#x27;,</span><br><span class="line">  analyzerHost: &#x27;127.0.0.1&#x27;,</span><br><span class="line">  analyzerPort: 8888, </span><br><span class="line">  reportFilename: &#x27;report.html&#x27;,</span><br><span class="line">  defaultSizes: &#x27;parsed&#x27;,</span><br><span class="line">  openAnalyzer: true,</span><br><span class="line">  generateStatsFile: false, </span><br><span class="line">  statsFilename: &#x27;stats.json&#x27;,</span><br><span class="line">  statsOptions: null,</span><br><span class="line">  logLevel: &#x27;info&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="depcheck-依赖分析"><a href="#depcheck-依赖分析" class="headerlink" title="depcheck 依赖分析"></a>depcheck 依赖分析</h3><p>随着项目工程逐步变大，引入的依赖也越来越多，其中有不少其实已经不再用到了，完全可以删除来减小依赖，这里可以用 depcheck 工具去检测是否不再使用。</p>
<p>依赖安装，全局安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g depcheck</span><br></pre></td></tr></table></figure>

<p>然后在项目工程的目录下执行命令 depcheck，下面是检测结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Unused dependencies</span><br><span class="line">* amfe-flexible</span><br><span class="line">* core-js</span><br><span class="line">* file-saver</span><br><span class="line">* less-loader</span><br><span class="line">* postcss</span><br><span class="line">* vue-axios</span><br><span class="line">* vue-datepicker</span><br><span class="line">* vue-notification</span><br><span class="line">* vuejs-datepicker</span><br><span class="line">Unused devDependencies</span><br><span class="line">* @vue/cli-plugin-babel</span><br><span class="line">* @vue/cli-plugin-eslint</span><br><span class="line">* @vue/cli-plugin-unit-mocha</span><br><span class="line">* @vue/test-utils</span><br><span class="line">* babel-eslint</span><br><span class="line">* chai</span><br><span class="line">* postcss-pxtorem</span><br><span class="line">* sass</span><br><span class="line">* sass-loader</span><br><span class="line">Missing dependencies</span><br><span class="line">* moment: .\vue.config.js</span><br><span class="line">* terser-webpack-plugin: .\vue.config.js</span><br><span class="line">* video.js: .\src\main.js</span><br><span class="line">* q: .\src\router\index.js</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li>Unused dependencies：表示没有使用的依赖包</li>
<li>Unused devDependencies：表示没有使用的开发环境依赖包</li>
<li>Missing dependencies：表示使用到了但是没有在 <code>package.json</code> 文件中声明的依赖包</li>
</ul>
<p>然后我们就可以根据检测结果进行无用依赖的删除。</p>
<h4 id="注意事项-存在误判"><a href="#注意事项-存在误判" class="headerlink" title="注意事项 - 存在误判"></a>注意事项 - 存在误判</h4><p><strong>这里 depcheck 依赖分析仅仅作为一个参考，存在部分误判的情况。</strong></p>
<ol>
<li>其实 <code>sass</code>、<code>sass-loader</code> 是有用到的，在 <code>&lt;style lang=&#39;sass&#39;&gt;</code> 这里。</li>
<li>其中 <code>less-loader</code> 是用到的，不过这个仅仅在开发环境需要，因此：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall less-loader --save</span><br></pre></td></tr></table></figure>

<p>然后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install less-loader --save-dev</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行后报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> error  in ./src/views/xxxxxx.vue?vue&amp;type=style&amp;index=0&amp;lang=less&amp;</span><br><span class="line"></span><br><span class="line">Module build failed (from ./node_modules/less-loader/dist/cjs.js):</span><br><span class="line">TypeError: this.getOptions is not a function</span><br><span class="line">    at Object.lessLoader (xxxxxx\node_modules\less-loader\dist\index.js:19:24)</span><br></pre></td></tr></table></figure>

<p>这是因为这个 <code>less-loader</code> 版本太高，移除后指定版本 <code>6.1.3</code> 安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall less-loader --save-dev</span><br><span class="line">npm install less-loader@6.1.3 --save-dev</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="compression-webpack-plugin-进行-gzip-压缩"><a href="#compression-webpack-plugin-进行-gzip-压缩" class="headerlink" title="compression-webpack-plugin 进行 gzip 压缩"></a>compression-webpack-plugin 进行 gzip 压缩</h3><p>虽然 Nginx 可以将资源自动 gzip 压缩（开启 gzip 功能）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip on;              # 开启gzip</span><br><span class="line">gzip_min_length 2k;   # 超过2kb进行压缩</span><br><span class="line">gzip_disable msie6;   # ie6不适用gzip</span><br><span class="line">gzip_types text/css application/javascript text/javascript image/jpeg image/png image/gif;  # 需要处理的文件</span><br></pre></td></tr></table></figure>

<p><strong>不过这样会使得每次请求时都要压缩一次，比较浪费资源</strong>。</p>
<p>因此，我们可以通过 <code>compression-webpack-plugin</code> 插件，在打包时提前将资源 gzip 压缩好，保存在服务端。</p>
<p>依赖安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install compression-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>

<p>注：不要安装最新版本，否则容易 build 失败，报错类似在 <code>xx.js</code> 中 <code>** undefined</code> 或者 <code>TypeEror</code> 之类的，一般都是版本问题。</p>
<p>然后在 <code>vue.config.js</code> 中添加配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const CompressionPlugin = require(&#x27;compression-webpack-plugin&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  configureWebpack: (config) =&gt; &#123;</span><br><span class="line">    config.plugins.push(</span><br><span class="line">      new CompressionPlugin(&#123;</span><br><span class="line">        test: /\.(js|css|html)?$/,</span><br><span class="line">        filename: &#x27;[path][base].gz&#x27;,</span><br><span class="line">        algorithm: &#x27;gzip&#x27;,</span><br><span class="line">        minRatio: 0.8,</span><br><span class="line">        deleteOriginalAssets: false</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>minRatio：只有压缩率小于这个值的资源才会被处理</li>
</ul>
<p><code>npm run build</code> 后，可以在 <code>dist/js</code> 目录下可以看 gzip 压缩前后的文件大小：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mode           Length Name</span><br><span class="line">----           ------ ----</span><br><span class="line">-a----          53586 chunk-041bbe7c.1f705809.js</span><br><span class="line">-a----          12789 chunk-041bbe7c.1f705809.js.gz</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>**最后，别忘记在 Nginx 配置文件中开启 <code>gzip_static</code>**：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip_static  on;</span><br></pre></td></tr></table></figure>

<p>注：这种模式下，gzip 压缩文件都是提前准备好的，如果没有<code>.gz</code> 格式的文件就会自动返回原文件。</p>
<h3 id="terser-webpack-plugin-打包时去除-console-log-以及-debugger-等"><a href="#terser-webpack-plugin-打包时去除-console-log-以及-debugger-等" class="headerlink" title="terser-webpack-plugin 打包时去除 console.log 以及 debugger 等"></a><code>terser-webpack-plugin</code> 打包时去除 <code>console.log</code> 以及 <code>debugger</code> 等</h3><p>由于 <code>uglifyjs-webpack-plugin</code> 不识别 ES6 的语法，vue-cli3.0 在打包过程中就使用了 <code>terser-webpack-plugin</code> 插件进行优化。</p>
<p><strong>由于 vue-cli 工具中已经用到了 <code>terser-webpack-plugin</code>，因此在 vue-cli 新建的项目中可以直接引入 <code>terser-webpack-plugin</code>，无需安装。</strong></p>
<p>在 <code>vue.config.js</code> 中添加配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const TerserPlugin = require(&quot;terser-webpack-plugin&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  configureWebpack: (config) =&gt; &#123;</span><br><span class="line">    config.plugins.push(</span><br><span class="line">      new TerserPlugin(&#123;</span><br><span class="line">        terserOptions: &#123;</span><br><span class="line">          ecma: undefined,</span><br><span class="line">          warnings: false,</span><br><span class="line">          parse: &#123;&#125;,</span><br><span class="line">          compress: &#123;</span><br><span class="line">            drop_console: true,</span><br><span class="line">            drop_debugger: true,</span><br><span class="line">            pure_funcs: [&#x27;console.log&#x27;], // 移除console</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里去掉了 <code>console.log</code> 以及 <code>debugger</code>。</p>
<h3 id="lodash-按需引入"><a href="#lodash-按需引入" class="headerlink" title="lodash 按需引入"></a>lodash 按需引入</h3><p>完整引入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import _ from &#x27;lodash&#x27;</span><br></pre></td></tr></table></figure>

<p>手动按需引入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import debounce from &quot;lodash/debounce&quot;;</span><br></pre></td></tr></table></figure>

<p>或者使用插件 <code>babel-plugin-lodash</code>，然后在 <code>babel.config.js</code> 添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [&quot;lodash&quot;],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后发现，只引入了 lodash 的几个方法，从数量上看还不到总量的零头，但是好像 lodash 的一大半都被打包进去了。比如，map 一共用到 121 个模块。</p>
<p>但是大多数人在使用时，并不会用到这些特殊的用法，却不得不为大量的冗余代码买单。因此，lodash 就提供了 <code>lodash-webpack-plugin</code> 这个插件，可以使得打包的代码量减少 99%。</p>
<p>插件用法，在 <code>vue.config.js</code> 中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const LodashModuleReplacementPlugin = require(&quot;lodash-webpack-plugin&quot;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  chainWebpack: (config) =&gt; &#123;</span><br><span class="line">    config.plugin(&quot;loadshReplace&quot;).use(new LodashModuleReplacementPlugin());</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="lodash-webpack-plugin-问题"><a href="#lodash-webpack-plugin-问题" class="headerlink" title="lodash-webpack-plugin 问题"></a>lodash-webpack-plugin 问题</h4><p>不过，引入 <code>lodash-webpack-plugin</code> 后，例如，map 方法的其他各种奇奇怪怪的用法就失效了，只剩下最基本的类似 Array map 的用法。</p>
<p>一个例子：clamp 模块依赖 toNumber 进行参数处理（即支持传入字符串参数，并在内部先处理成数字）。<strong>但是使用 Plugin 后，Plugin 会把 toNumber 替换成 identity（即 <code>a =&gt; a</code>），导致 clamp 不再支持字符串参数</strong>。如果传入的是字符串，返回的结果将发生变化。</p>
<p>而且，**<code>lodash-webpack-plugin</code> 会影响第三方模块的行为**。如果第三方模块中也使用了 lodash 模块，而且用到了某些非常规用法，一旦使用了 Plugin 后，这个第三方模块使用的 lodash 的执行逻辑就可能发生变化。产生的后果可能是立即报错，也可能产生更严重的后果，即返回了和预期不一致的值，这个错误值在一系列流转之后，在另一个地方产生了 BUG。一旦出现了这种情况，因为这是一个第三方模块，问题的排查可能会非常困难。</p>
<p>结论：不建议使用 <code>lodash-webpack-plugin</code>。</p>
<h3 id="Moment-按需打包"><a href="#Moment-按需打包" class="headerlink" title="Moment 按需打包"></a>Moment 按需打包</h3><p><strong><code>moment.js</code> 占用空间大的原因在于，moment 中包含了大量语言资源文件，但其实我们并不需要这些。</strong></p>
<p>通过 webpack 自身的功能即可在打包时去掉这些用不到的语言包，在 <code>vue.config.js</code> 中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const webpack = require(&#x27;webpack&#x27;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  configureWebpack: config =&gt; &#123;</span><br><span class="line">    const plugins = [</span><br><span class="line">      // 只保留中文语言资源</span><br><span class="line">      new webpack.ContextReplacementPlugin(/moment[/\\]locale$/, /zh-cn/),</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组件路由懒加载"><a href="#组件路由懒加载" class="headerlink" title="组件路由懒加载"></a>组件路由懒加载</h3><p><strong>我们可以将不同路由对应的组件分割成不同的代码块，这样，当路由被访问的时候才加载对应组件</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Foo = () =&gt; import(&#x27;./Foo.vue&#x27;)</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [&#123; path: &#x27;/foo&#x27;, component: Foo &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="splitChunks-进行代码分割"><a href="#splitChunks-进行代码分割" class="headerlink" title="splitChunks 进行代码分割"></a>splitChunks 进行代码分割</h3><h4 id="常见代码分割方式"><a href="#常见代码分割方式" class="headerlink" title="常见代码分割方式"></a>常见代码分割方式</h4><p>Webpack 中有以下三种常见的代码分割方式:</p>
<ul>
<li>入口起点：使用 entry 配置手动地分离代码</li>
<li>动态导入：通过模块的内联函数调用来分离代码</li>
<li>防止重复：使用 splitChunks 去重和分离 chunk</li>
</ul>
<p>第一种方式，很简单，只需要在 entry 里配置多个入口即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">entry: &#123; app: &quot;./index.js&quot;, app1: &quot;./index1.js&quot; &#125;</span><br></pre></td></tr></table></figure>

<p>第二种方式，就是在代码中自动将使用 <code>import()</code> 加载的模块分离成独立的包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//...</span><br><span class="line">import(&quot;./a&quot;);</span><br><span class="line">//...</span><br></pre></td></tr></table></figure>

<p>第三种方式，是使用 splitChunks 插件，配置分离规则，然后 webpack 自动将满足规则的 chunk 分离。一切都是自动完成的。</p>
<h4 id="splitChunks-默认配置"><a href="#splitChunks-默认配置" class="headerlink" title="splitChunks 默认配置"></a>splitChunks 默认配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">splitChunks: &#123;</span><br><span class="line">  // 表示选择哪些 chunks 进行分割，可选值有：async，initial和all</span><br><span class="line">  chunks: &quot;async&quot;,</span><br><span class="line">  // 表示新分离出的chunk必须大于等于minSize，默认为30000，约30kb。</span><br><span class="line">  minSize: 30000,</span><br><span class="line">  // 表示一个模块至少应被minChunks个chunk所包含才能分割。默认为1。</span><br><span class="line">  minChunks: 1,</span><br><span class="line">  // 表示按需加载文件时，并行请求的最大数目。默认为5。</span><br><span class="line">  maxAsyncRequests: 5,</span><br><span class="line">  // 表示加载入口文件时，并行请求的最大数目。默认为3。</span><br><span class="line">  maxInitialRequests: 3,</span><br><span class="line">  // 表示拆分出的chunk的名称连接符。默认为~。如chunk~vendors.js</span><br><span class="line">  automaticNameDelimiter: &#x27;~&#x27;,</span><br><span class="line">  // 设置chunk的文件名。默认为true。当为true时，splitChunks基于chunk和cacheGroups的key自动命名。</span><br><span class="line">  name: true,</span><br><span class="line">  // cacheGroups 下可以可以配置多个组，每个组根据test设置条件，符合test条件的模块，就分配到该组。模块可以被多个组引用，但最终会根据priority来决定打包到哪个组中。默认将所有来自node_modules目录的模块打包至vendors组，将两个以上的chunk所共享的模块打包至default组。</span><br><span class="line">  cacheGroups: &#123;</span><br><span class="line">    vendors: &#123;</span><br><span class="line">      test: /[\\/]node_modules[\\/]/,</span><br><span class="line">      priority: -10</span><br><span class="line">    &#125;,</span><br><span class="line">    // </span><br><span class="line">    default: &#123;</span><br><span class="line">      minChunks: 2,</span><br><span class="line">      priority: -20,</span><br><span class="line">      reuseExistingChunk: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="chunks"><a href="#chunks" class="headerlink" title="chunks"></a>chunks</h4><p>chunks 用以告诉 splitChunks 的作用对象，其可选值有 async、initial 和 all。默认值是 async，也就是默认只选取异步加载的 chunk 进行代码拆分。</p>
<p>示例：</p>
<p>当 <code>chunks: async</code>：</p>
<p><code>index.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import(&quot;./a&quot;);</span><br><span class="line"></span><br><span class="line">// ...</span><br></pre></td></tr></table></figure>

<p><code>a.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">// ...</span><br></pre></td></tr></table></figure>

<p>最后打包出来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.js    712 bytes</span><br><span class="line">2.js    234 kb</span><br><span class="line">app.js  8.46 kb</span><br></pre></td></tr></table></figure>

<ul>
<li><code>index.js</code> 作为入口文件，属于入口起点手动配置分割代码的情况，因此会独立打包。(<code>app.js</code>)</li>
<li><code>a.js</code> 通过 <code>import()</code> 进行加载，属于动态导入的情况，因此会独立打出一个包。(<code>1.js</code>)</li>
<li>vue 来自 <code>node_modules</code> 目录，并且大于 30kb；将其从 <code>a.js</code> 拆出后，与 <code>a.js</code> 并行加载，并行加载的请求数为 2，未超过默认的 5；vue 拆分后，并行加载的入口文件并无增加，未超过默认的 3。vue 也符合 splitChunks 的拆分条件，单独打了一个包。(<code>2.js</code>)</li>
</ul>
<p><strong>当 <code>chunks: initial</code>：splitChunks 的作用范围变成了非异步加载的初始 chunk</strong>，例如我们的 <code>index.js</code> 就是初始化的时候就存在的 chunk。而 vue 模块是在异步加载的 chunk <code>a.js</code> 中引入的，所以并不会被分离出来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.js    234 kb</span><br><span class="line">app.js  8.46 kb</span><br></pre></td></tr></table></figure>

<p>如果这样修改下：</p>
<p><code>index.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;vue&#x27;</span><br><span class="line">import(&#x27;./a&#x27;)</span><br></pre></td></tr></table></figure>

<p><code>a.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&#x27;a&#x27;)</span><br></pre></td></tr></table></figure>

<p>最后打包出来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.js    638 bytes</span><br><span class="line">app.js    9.52 kb</span><br><span class="line">index.html  294 bytes</span><br><span class="line">vendors~app.js  234 kb</span><br></pre></td></tr></table></figure>

<p>可以看到，vue 在 <code>index.js</code> 直接被引入，而 <code>index.js</code> 是初始 chunk，所以分离出来打到了 <code>vendors~app.js</code> 中。</p>
<p><strong>当 <code>chunks: all</code>：</strong></p>
<p><code>index.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;vue-router&#x27;</span><br><span class="line">import(&quot;./a&quot;);</span><br></pre></td></tr></table></figure>

<p><code>a.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &quot;vue&quot;;</span><br></pre></td></tr></table></figure>

<p>最后打包出来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.js    706 bytes</span><br><span class="line">3.js    234 kb</span><br><span class="line">app.js  9.55 kb</span><br><span class="line">index.html  294 bytes</span><br><span class="line">vendors~app.js  72.6 kb</span><br></pre></td></tr></table></figure>

<p><strong>splitChunks 的作用范围包括了初始 chunk 和异步 chunk 两种场景。</strong>因此 <code>index.js</code> 中的 vue-router 被分拆到了 <code>vendors~app.js</code> 中，而异步加载的 chunk <code>a.js</code> 中的 vue 被分拆到了 <code>3.js</code> 中。</p>
<h4 id="cache-groups"><a href="#cache-groups" class="headerlink" title="cache groups"></a>cache groups</h4><p><strong>cacheGroups 继承 splitChunks 里的所有属性的值</strong>，如 chunks、minSize、minChunks、maxAsyncRequests、maxInitialRequests、automaticNameDelimiter、name，我们还可以在 cacheGroups 中重新赋值，覆盖 splitChunks 的值。另外，还有一些属性只能在 cacheGroups 中使用：test、priority、reuseExistingChunk。</p>
<p>cacheGroups 有两个默认的组，一个是 vendors，所有来自 <code>node_modules</code> 目录的模块；一个 default，包含了由两个以上的 chunk 所共享的模块。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chunks:&#x27;all&#x27;,</span><br><span class="line">cacheGroups: &#123;</span><br><span class="line">  vendors: &#123;</span><br><span class="line">    test: /[\\/]node_modules[\\/]/,</span><br><span class="line">    name: &quot;customName&quot;,</span><br><span class="line">    priority: -10</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="采用的配置"><a href="#采用的配置" class="headerlink" title="采用的配置"></a>采用的配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  chainWebpack: (config) =&gt; &#123;</span><br><span class="line">    config.optimization.splitChunks(&#123;</span><br><span class="line">      chunks: &#x27;all&#x27;,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        //公用模块抽离</span><br><span class="line">        common: &#123;</span><br><span class="line">          name: &#x27;chunk-common&#x27;,</span><br><span class="line">          chunks: &#x27;initial&#x27;,</span><br><span class="line">          minChunks: 2, //抽离公共代码时，这个代码块最小被引用的次数</span><br><span class="line">        &#125;,</span><br><span class="line">        //第三方库抽离</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          name: &#x27;chunk-vendors&#x27;,</span><br><span class="line">          priority: 1, //权重</span><br><span class="line">          test: /node_modules/,</span><br><span class="line">          chunks: &#x27;initial&#x27;,</span><br><span class="line">          minChunks: 2, //在分割之前，这个代码块最小应该被引用的次数</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MiniCssExtractPlugin-插件将-CSS-提取到单独的文件"><a href="#MiniCssExtractPlugin-插件将-CSS-提取到单独的文件" class="headerlink" title="MiniCssExtractPlugin 插件将 CSS 提取到单独的文件"></a>MiniCssExtractPlugin 插件将 CSS 提取到单独的文件</h3><p>此插件为每个包含 CSS 的 JS 文件创建一个单独的 CSS 文件，并支持 CSS 和 SourceMap 的按需加载。</p>
<p><strong>注意：这里说的每个包含 CSS 的 JS 文件，并不是说组件对应的 JS 文件，而是打包之后的 JS 文件</strong>。</p>
<p>优点：</p>
<ul>
<li><strong>CSS 请求并行</strong>，如果样式文件大小较大，这会做更快提前加载</li>
<li>CSS 单独缓存</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要额外的 HTTP 请求</li>
</ul>
<p>依赖安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure>

<p><code>vue.config.js</code> 添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  chainWebpack: (config) =&gt; &#123;</span><br><span class="line">    let miniCssExtractPlugin = new MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: &#x27;assets/[name].[hash:8].css&#x27;,</span><br><span class="line">      chunkFilename: &#x27;assets/[name].[hash:8].css&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    config.plugin(&#x27;extract-css&#x27;).use(miniCssExtractPlugin);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>filename：控制从打包后的<strong>入口 JS 文件</strong>中提取 CSS 样式生成的 CSS 文件的名称。</li>
<li>chunkFilename：控制从打包后的<strong>非入口 JS 文件</strong>中提取 CSS 样式生成的 CSS 文件的名称。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/goloving/p/13993388.html">浅析 vue 项目性能优化应该注意的点</a></li>
<li><a href="https://juejin.cn/post/6966071095422091301">vue 须知（1）—— v-if 和 v-for 哪个优先级更高？如果两个同时出现，应该怎么优化得到更好的性能？</a></li>
<li><a href="https://blog.csdn.net/z591102/article/details/106682298">为什么不建议使用 index 作为 key 值</a></li>
<li><a href="https://www.cnblogs.com/goloving/p/13969685.html">vue 利用 object.freeze 提升列表渲染性能</a></li>
<li><a href="https://newsn.net/say/webpack-bundle-analyzer.html">webpack4 系列教程，性能分析利器 webpack-bundle-analyzer</a></li>
<li><a href="https://blog.csdn.net/weixin_44197671/article/details/115404615">vue-cli3 gzip 和 uglifyjs 使用</a></li>
<li><a href="https://blog.csdn.net/hututututututu/article/details/109715223">terser-webpack-plugin 替代 uglifyjs-webpack-plugin</a></li>
<li><a href="https://blog.csdn.net/weixin_44979432/article/details/118295943">vue 项目中 webpack 使用（terser-webpack-plugin）打包时候去掉 console.log 与 debugger 调试</a></li>
<li><a href="https://www.cnblogs.com/qq735675958/p/14609903.html">lodash 按需引入</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/349260482">为什么你应该立即停止使用 lodash-webpack-plugin</a></li>
<li><a href="https://juejin.cn/post/6844904103848443912">如何使用 splitChunks 精细控制代码分割</a></li>
<li><a href="https://juejin.cn/post/6850418117500715015">『Webpack 系列』—— MiniCssExtractPlugin 插件用法详解</a></li>
<li><a href="https://juejin.cn/post/6844903853410746382">demo14 webpack mini-css-extract-plugin + SplitChunksPlugin 处理 css 和 scss</a></li>
</ul>
]]></content>
      <categories>
        <category>前端，性能优化</category>
      </categories>
      <tags>
        <tag>前端，性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>vue吸顶效果实现</title>
    <url>/liuqi_blogs/2022/02/06/%E5%90%B8%E9%A1%B6%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>Vue 实现吸顶效果。</p>
<h2 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h2><p>因为在 CSS 中我们可以设置一个元素的 <code>position: fixed;</code>，这样它就可以固定在那里，这样不管页面怎么滚动，它的位置都不受影响，所以我们的思路就是在合适的时机把要吸顶的头部元素的 position 属性设置为 fixed 就可以了。但是这个合适的时机是什么时候呢，这就需要我们计算了，我们需要监听页面的滚动状态，当页面滚动到要吸顶元素所处的位置的时候就是我们设置它固定的时候。</p>
<span id="more"></span>

<h2 id="吸顶效果具体实现"><a href="#吸顶效果具体实现" class="headerlink" title="吸顶效果具体实现"></a>吸顶效果具体实现</h2><p>在需要实现吸顶效果的 div 上，增加一个 class，例如<code>:class=&quot;&#123;&#39;is_fixed&#39;: isFixed&#125;&quot;</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div :class=&quot;&#123;&#x27;is_fixed&#x27;: isFixed&#125;&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;title&quot;&gt;标题&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;div&gt;内容&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>在需要触发吸顶效果的位置增加（<strong>当滚动条下滑超过这个位置，将出现吸顶效果</strong>）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;boxFixed&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>增加滚动条监听，计算<code>#boxFixed</code> 到顶端的距离：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  window.addEventListener(&#x27;scroll&#x27;, this.initHeight);</span><br><span class="line">  this.$nextTick(() =&gt; &#123;</span><br><span class="line">    //获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置 </span><br><span class="line">    this.offsetTop = document.querySelector(&#x27;#boxFixed&#x27;).offsetTop;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  initHeight() &#123;</span><br><span class="line">    // 设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离 (被卷曲的高度)</span><br><span class="line">    var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop</span><br><span class="line">    // 如果被卷曲的高度大于吸顶元素到顶端位置的距离</span><br><span class="line">    this.isFixed = scrollTop &gt; this.offsetTop ? true : false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 销毁时移除监听</span><br><span class="line">destroyed() &#123;</span><br><span class="line">  window.removeEventListener(&#x27;scroll&#x27;, this.handleScroll)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>吸顶效果实现 CSS：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.is_fixed&#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  position: fixed;</span><br><span class="line">  top: 0;</span><br><span class="line">  z-index: 999;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="页面上下跳动问题解决"><a href="#页面上下跳动问题解决" class="headerlink" title="页面上下跳动问题解决"></a>页面上下跳动问题解决</h2><p>当 scrollTop 大于吸顶元素 top 的距离，吸顶元素会被设置为固定属性，<strong>一个元素一旦被设置为 <code>position: fixed;</code>，那么它就会相对于浏览器窗口进行定位，然后下面的内容就会往上顶</strong>。一部分内容就看不到了。</p>
<p>一个简单的办法是再加一个和吸顶元素一模一样的元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-show=&quot;isFixed&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;title&quot;&gt;标题&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;div&gt;内容&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这个元素默认是隐藏的，只有当页面滚动的距离达到了它的位置的时候我们才让它显示，由于它是固定状态，所以它的隐藏显示并不会对页面产生影响，这样下面的内容就不会往上顶了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jianshu.com/p/3e769dade7b3">30 秒实现 Vue 吸顶效果</a></li>
<li><a href="https://www.imooc.com/article/256077">Vue 开发 —— 实现吸顶效果</a></li>
</ul>
]]></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>异步</title>
    <url>/liuqi_blogs/2021/08/22/%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><h2 id="1-promise"><a href="#1-promise" class="headerlink" title="1. promise"></a>1. promise</h2><p>Promise 是es6中出现的新的api :</p>
<p>目的:  通过链式调用解决异步的问题</p>
<p>传统解决异步的方案 : 通过回调的方式解决异步的问题</p>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleP</span>(<span class="params">c1,c2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="built_in">parseInt</span>(<span class="string">&quot;fdsajkfjds&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(i)) &#123;</span><br><span class="line">    <span class="title function_">c2</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">c1</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">handleP</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述方案就会造成著名的回调地狱</p>
<p>promise 方案</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);<span class="comment">//同步</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i = <span class="built_in">parseInt</span>(<span class="string">&quot;fdsaf&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(i)) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;转换出错了&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功&#x27;</span>)).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败的回调&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="2-浏览器执行原理"><a href="#2-浏览器执行原理" class="headerlink" title="2. 浏览器执行原理"></a>2. 浏览器执行原理</h2><p><img src="image/image-20200718104917684.png" alt="image-20200718104917684"></p>
<h2 id="3-面试常客-打印顺序"><a href="#3-面试常客-打印顺序" class="headerlink" title="3. 面试常客 打印顺序"></a>3. 面试常客 打印顺序</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  resolve() 在同步的环境中执行的微任务</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(); <span class="comment">// 异步的环境中执行的微任务</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 施 1234</span></span><br><span class="line"><span class="comment">// 张 1234</span></span><br><span class="line"><span class="comment">// 胡 1324</span></span><br><span class="line"><span class="comment">// 王 1234</span></span><br><span class="line"><span class="comment">// 张傲 1423</span></span><br><span class="line"><span class="comment">// 胡鹏飞 1324</span></span><br><span class="line"><span class="comment">// 郝 1324</span></span><br><span class="line"><span class="comment">//1 3 5 4 2 6</span></span><br></pre></td></tr></table></figure>

<h2 id="4-async-await"><a href="#4-async-await" class="headerlink" title="4. async / await"></a>4. async / await</h2><ul>
<li><p>async await 是成对出现的</p>
</li>
<li><p>为什么出现  为了完全的解决异步的问题 出现的</p>
</li>
<li><p>什么时候出现的  es7</p>
</li>
<li><p>怎么用呢 结合promise使用</p>
</li>
<li><p>async 放在方法的前面  await 跟着promise 直接通过同步的方式能得到resolve(43242) 的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以同步的方式得到解决的</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3就不执行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myData</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>微前端qiankun应用间通讯</title>
    <url>/liuqi_blogs/2022/01/28/%E5%BE%AE%E5%89%8D%E7%AB%AFqiankun%E5%BA%94%E7%94%A8%E9%97%B4%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<p>qiankun 官方提供的 Actions 通信方式，适合业务划分清晰，比较简单的微前端应用，可以满足大部分的应用场景需求。</p>
<span id="more"></span>

<h2 id="Actions-通信原理"><a href="#Actions-通信原理" class="headerlink" title="Actions 通信原理"></a>Actions 通信原理</h2><p>qiankun 内部提供了 <code>initGlobalState</code> 方法用于注册 MicroAppStateActions 实例用于通信，该实例有三个方法，分别是：</p>
<ul>
<li><code>setGlobalState</code>：设置 globalState - 设置新的值时，内部将执行浅检查，如果检查到 globalState 发生改变则触发通知，通知到所有的观察者函数。</li>
<li><code>onGlobalStateChange</code>：注册观察者函数 - 响应 globalState 变化，在 globalState 发生改变时触发该观察者函数。</li>
<li><code>offGlobalStateChange</code>：取消观察者函数 - 该实例不再响应 globalState 变化。</li>
</ul>
<h2 id="Vue-简单实例"><a href="#Vue-简单实例" class="headerlink" title="Vue 简单实例"></a>Vue 简单实例</h2><h3 id="主应用修改"><a href="#主应用修改" class="headerlink" title="主应用修改"></a>主应用修改</h3><p><code>main.js</code> 增加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 通讯</span><br><span class="line">const actions = initGlobalState(&#123;</span><br><span class="line">    mt: &#x27;init&#x27; // 初始化state，里面内容您随意</span><br><span class="line">&#125;)</span><br><span class="line">// 在项目中任何需要监听的地方进行监听，在这里监听是为了方便</span><br><span class="line">actions.onGlobalStateChange((state,prev)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;main state change&#x27;,state);</span><br><span class="line">&#125;)</span><br><span class="line">// 将action对象绑到Vue原型上，为了项目中其他地方使用方便</span><br><span class="line">Vue.prototype.$actions = actions</span><br><span class="line"></span><br><span class="line">// 以上代码放在设置默认app之前即可</span><br><span class="line">setDefaultMountApp(&#x27;one&#x27;)</span><br></pre></td></tr></table></figure>

<p><code>App.js</code> 增加修改 state 的方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;main&quot;&gt;</span><br><span class="line">    这是主应用文字</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;changeView(&#x27;/one&#x27;)&quot;&gt;子应用one&lt;/button&gt;</span><br><span class="line">    &amp;nbsp;</span><br><span class="line">    &lt;button @click=&quot;changeView(&#x27;/two&#x27;)&quot;&gt;子应用two&lt;/button&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;!--增加修改state的按钮--&gt;</span><br><span class="line">    &lt;button @click=&quot;changeState(&#x27;1&#x27;)&quot;&gt;修改state = 1&lt;/button&gt;</span><br><span class="line">    &amp;nbsp;</span><br><span class="line">    &lt;button @click=&quot;changeState(&#x27;2&#x27;)&quot;&gt;修改state = 2&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id=&quot;micro-view&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeView(who)&#123;</span><br><span class="line">      window.history.pushState(null,who,who)</span><br><span class="line">    &#125;,</span><br><span class="line">    changeState(value)&#123;</span><br><span class="line">      // ------ 修改state</span><br><span class="line">      this.$actions.setGlobalState(&#123;</span><br><span class="line">        mt: value</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#main &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="子应用修改"><a href="#子应用修改" class="headerlink" title="子应用修改"></a>子应用修改</h3><p><code>main.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 生命周期 - 挂载后</span><br><span class="line">export async function mount(props) &#123;</span><br><span class="line">    console.log(&#x27;two mount&#x27;);</span><br><span class="line"></span><br><span class="line">    // 设置主应用下发的方法</span><br><span class="line">    Object.keys(props.fn).forEach(method =&gt;&#123;</span><br><span class="line">        Vue.prototype[`$$&#123;method&#125;`] = props.fn[method]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 设置通讯</span><br><span class="line">    Vue.prototype.$onGlobalStateChange = props.onGlobalStateChange</span><br><span class="line">    Vue.prototype.$setGlobalState = props.setGlobalState</span><br><span class="line"></span><br><span class="line">    // 渲染</span><br><span class="line">    render()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>About.vue</code> 增加通讯监听：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;about&quot;&gt;</span><br><span class="line">        this is two about</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;button @click=&quot;testFn&quot;&gt;测试事件&lt;/button&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &#123;&#123;&#x27;this is my name --- &#x27;+name&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;About&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name: &#x27;init name&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            // 增加state监听，当mt数据发生变化的时候，我们修改name，体现在页面上</span><br><span class="line">            this.$onGlobalStateChange((state,prev)=&gt;&#123;</span><br><span class="line">                if(state.mt !== prev.mt)&#123;</span><br><span class="line">                    this.name = state.mt</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            testFn()&#123;</span><br><span class="line">                this.$show(&#x27;测试事件成功&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jianshu.com/p/fe21355be9b5">实践基于 qiankun 的微前端 demo - 应用间的通讯</a></li>
<li><a href="https://juejin.cn/post/6844904151231496200">基于 qiankun 的微前端最佳实践（图文并茂） - 应用间通信篇</a></li>
</ul>
]]></content>
      <categories>
        <category>前端，性能优化</category>
      </categories>
      <tags>
        <tag>前端，性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>按需加载</title>
    <url>/liuqi_blogs/2021/01/19/%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h1><ul>
<li>路由按需加载<ul>
<li>并没有减小体积 在加载这个组件的时候 才会被加载</li>
</ul>
</li>
<li>常用的框架也按需加载<ul>
<li>需要框架支持 </li>
<li>没有用到的 不会引进来  </li>
<li>element-ui  el-button </li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="element-ui-按需加载的步骤"><a href="#element-ui-按需加载的步骤" class="headerlink" title="element-ui 按需加载的步骤"></a>element-ui 按需加载的步骤</h2><ol>
<li><p>下载一个包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i babel-plugin-componen -D</span><br></pre></td></tr></table></figure></li>
<li><p>配置 <code>.babelrc</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;env&quot;</span>, &#123;</span><br><span class="line">      <span class="string">&quot;modules&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;targets&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;browsers&quot;</span>: [<span class="string">&quot;&gt; 1%&quot;</span>, <span class="string">&quot;last 2 versions&quot;</span>, <span class="string">&quot;not ie &lt;= 8&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&quot;stage-2&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [<span class="string">&quot;transform-vue-jsx&quot;</span>, <span class="string">&quot;transform-runtime&quot;</span>,</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;component&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;libraryName&quot;</span>: <span class="string">&quot;element-ui&quot;</span>,</span><br><span class="line">        <span class="string">&quot;styleLibraryName&quot;</span>: <span class="string">&quot;theme-chalk&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>新建一个文件夹 <code>plugins</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按需引入 vue里面的element-ui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Pagination</span>,</span><br><span class="line">  <span class="title class_">Dialog</span>,</span><br><span class="line">  <span class="title class_">Autocomplete</span>,</span><br><span class="line">  <span class="title class_">Dropdown</span>,</span><br><span class="line">  <span class="title class_">DropdownMenu</span>,</span><br><span class="line">  <span class="title class_">DropdownItem</span>,</span><br><span class="line">  <span class="title class_">Menu</span>,</span><br><span class="line">  <span class="title class_">Submenu</span>,</span><br><span class="line">  <span class="title class_">MenuItem</span>,</span><br><span class="line">  <span class="title class_">MenuItemGroup</span>,</span><br><span class="line">  <span class="title class_">Input</span>,</span><br><span class="line">  <span class="title class_">InputNumber</span>,</span><br><span class="line">  <span class="title class_">Radio</span>,</span><br><span class="line">  <span class="title class_">RadioGroup</span>,</span><br><span class="line">  <span class="title class_">RadioButton</span>,</span><br><span class="line">  <span class="title class_">Checkbox</span>,</span><br><span class="line">  <span class="title class_">CheckboxButton</span>,</span><br><span class="line">  <span class="title class_">CheckboxGroup</span>,</span><br><span class="line">  <span class="title class_">Switch</span>,</span><br><span class="line">  <span class="title class_">Select</span>,</span><br><span class="line">  <span class="title class_">Option</span>,</span><br><span class="line">  <span class="title class_">OptionGroup</span>,</span><br><span class="line">  <span class="title class_">Button</span>,</span><br><span class="line">  <span class="title class_">ButtonGroup</span>,</span><br><span class="line">  <span class="title class_">Table</span>,</span><br><span class="line">  <span class="title class_">TableColumn</span>,</span><br><span class="line">  <span class="title class_">DatePicker</span>,</span><br><span class="line">  <span class="title class_">TimeSelect</span>,</span><br><span class="line">  <span class="title class_">TimePicker</span>,</span><br><span class="line">  <span class="title class_">Popover</span>,</span><br><span class="line">  <span class="title class_">Tooltip</span>,</span><br><span class="line">  <span class="title class_">Breadcrumb</span>,</span><br><span class="line">  <span class="title class_">BreadcrumbItem</span>,</span><br><span class="line">  <span class="title class_">Form</span>,</span><br><span class="line">  <span class="title class_">FormItem</span>,</span><br><span class="line">  <span class="title class_">Tabs</span>,</span><br><span class="line">  <span class="title class_">TabPane</span>,</span><br><span class="line">  <span class="title class_">Tag</span>,</span><br><span class="line">  <span class="title class_">Tree</span>,</span><br><span class="line">  <span class="title class_">Alert</span>,</span><br><span class="line">  <span class="title class_">Slider</span>,</span><br><span class="line">  <span class="title class_">Icon</span>,</span><br><span class="line">  <span class="title class_">Row</span>,</span><br><span class="line">  <span class="title class_">Col</span>,</span><br><span class="line">  <span class="title class_">Upload</span>,</span><br><span class="line">  <span class="title class_">Progress</span>,</span><br><span class="line">  <span class="title class_">Spinner</span>,</span><br><span class="line">  <span class="title class_">Badge</span>,</span><br><span class="line">  <span class="title class_">Card</span>,</span><br><span class="line">  <span class="title class_">Rate</span>,</span><br><span class="line">  <span class="title class_">Steps</span>,</span><br><span class="line">  <span class="title class_">Step</span>,</span><br><span class="line">  <span class="title class_">Carousel</span>,</span><br><span class="line">  <span class="title class_">CarouselItem</span>,</span><br><span class="line">  <span class="title class_">Collapse</span>,</span><br><span class="line">  <span class="title class_">CollapseItem</span>,</span><br><span class="line">  <span class="title class_">Cascader</span>,</span><br><span class="line">  <span class="title class_">ColorPicker</span>,</span><br><span class="line">  <span class="title class_">Transfer</span>,</span><br><span class="line">  <span class="title class_">Container</span>,</span><br><span class="line">  <span class="title class_">Header</span>,</span><br><span class="line">  <span class="title class_">Aside</span>,</span><br><span class="line">  <span class="title class_">Main</span>,</span><br><span class="line">  <span class="title class_">Footer</span>,</span><br><span class="line">  <span class="title class_">Timeline</span>,</span><br><span class="line">  <span class="title class_">TimelineItem</span>,</span><br><span class="line">  <span class="title class_">Link</span>,</span><br><span class="line">  <span class="title class_">Divider</span>,</span><br><span class="line">  <span class="title class_">Image</span>,</span><br><span class="line">  <span class="title class_">Calendar</span>,</span><br><span class="line">  <span class="title class_">Backtop</span>,</span><br><span class="line">  <span class="title class_">PageHeader</span>,</span><br><span class="line">  <span class="title class_">CascaderPanel</span>,</span><br><span class="line">  <span class="title class_">Loading</span>,</span><br><span class="line">  <span class="title class_">MessageBox</span>,</span><br><span class="line">  <span class="title class_">Message</span>,</span><br><span class="line">  <span class="title class_">Notification</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Pagination</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Dialog</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Autocomplete</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Dropdown</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">DropdownMenu</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">DropdownItem</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Menu</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Submenu</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">MenuItem</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">MenuItemGroup</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Input</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">InputNumber</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Radio</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">RadioGroup</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">RadioButton</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Checkbox</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">CheckboxButton</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">CheckboxGroup</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Switch</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Select</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Option</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">OptionGroup</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Button</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ButtonGroup</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Table</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">TableColumn</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">DatePicker</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">TimeSelect</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">TimePicker</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Popover</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Tooltip</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Breadcrumb</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">BreadcrumbItem</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Form</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">FormItem</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Tabs</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">TabPane</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Tag</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Tree</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Alert</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Slider</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Icon</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Row</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Col</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Upload</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Progress</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Spinner</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Badge</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Card</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Rate</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Steps</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Step</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Carousel</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">CarouselItem</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Collapse</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">CollapseItem</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Cascader</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ColorPicker</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Transfer</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Container</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Header</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Aside</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Main</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Footer</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Timeline</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">TimelineItem</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Link</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Divider</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Image</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Calendar</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Backtop</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">PageHeader</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">CascaderPanel</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Loading</span>.<span class="property">directive</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$loading</span> = <span class="title class_">Loading</span>.<span class="property">service</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$msgbox</span> = <span class="title class_">MessageBox</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$alert</span> = <span class="title class_">MessageBox</span>.<span class="property">alert</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$confirm</span> = <span class="title class_">MessageBox</span>.<span class="property">confirm</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$prompt</span> = <span class="title class_">MessageBox</span>.<span class="property">prompt</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$notify</span> = <span class="title class_">Notification</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$message</span> = <span class="title class_">Message</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>在main.js中引入 <code>plugin/index.js</code></p>
<p>删除以前全部引入的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// //UI</span></span><br><span class="line"><span class="comment">// import ElementUI from &#x27;element-ui&#x27;;</span></span><br><span class="line"><span class="comment">// //样式</span></span><br><span class="line"><span class="comment">// import &#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="comment">// Vue.use(ElementUI);//每个页面都可以使用Element-UI</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./plugins/index&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>每日分享补充</title>
    <url>/liuqi_blogs/2021/04/25/%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<h1 id="每日分享补充"><a href="#每日分享补充" class="headerlink" title="每日分享补充"></a>每日分享补充</h1><h2 id="1-node的问题"><a href="#1-node的问题" class="headerlink" title="1. node的问题"></a>1. node的问题</h2><ul>
<li><p>你们公司用过node没</p>
</li>
<li><p>缺点 : 处理大量数据方便 不如别的语言</p>
</li>
<li><p>你们公司哪些地方用了node</p>
<ul>
<li>应用场景 异步 : 量多数据少 JSON </li>
<li>中间层 服务器 java/python   node—&gt;axios—&gt;java   </li>
<li>编写cli脚本 vue init webpack 脚手架<span id="more"></span>
<h2 id="2-SEO"><a href="#2-SEO" class="headerlink" title="2. SEO"></a>2. SEO</h2></li>
</ul>
</li>
<li><p>公司中谁来做</p>
<ul>
<li>网络营销</li>
</ul>
</li>
<li><p>怎么做</p>
</li>
<li><p>需不需要前端做</p>
<ul>
<li>ssr : 服务端渲染</li>
<li>门户网站 (官网)</li>
</ul>
</li>
<li><p>前端在这个领域做什么</p>
<ul>
<li>vue : nuxt  </li>
<li>react: next</li>
</ul>
</li>
<li><p>哪些网站不需要做</p>
<ul>
<li>后台管理 vue / react</li>
</ul>
</li>
</ul>
<h2 id="3-promise-async-await"><a href="#3-promise-async-await" class="headerlink" title="3. promise  async  await"></a>3. promise  async  await</h2><h2 id="4-MVVM-amp-amp-MVC"><a href="#4-MVVM-amp-amp-MVC" class="headerlink" title="4. MVVM&amp;&amp;MVC"></a>4. MVVM&amp;&amp;MVC</h2><p>MVC: java </p>
<p>M: Model 数据</p>
<p>C : Controller 控制</p>
<p>V : View  视图</p>
<p>React : MVC</p>
<p>M : 底层 state/ props</p>
<p>C : 虚拟dom diff</p>
<p>V : 视图层 render</p>
<p>Vue : MVVM </p>
<p>M: 数据层 ajax / mock</p>
<p>VM : new Vue({data:{key:数据}, methods:{}})</p>
<p>V : View</p>
<p>MVP : 移动端开发 android 面向切面编程 AOP</p>
]]></content>
      <categories>
        <category>react.js</category>
      </categories>
      <tags>
        <tag>react.js</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端事件</title>
    <url>/liuqi_blogs/2021/07/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="移动端事件"><a href="#移动端事件" class="headerlink" title="移动端事件"></a>移动端事件</h1><p>在前端的移动Web开发中，有一部分事件只在移动端产生，如触摸相关的事件。接下来给大家简单总结一下移动端的事件。</p>
<h2 id="1-PC端事件在移动端的兼容问题"><a href="#1-PC端事件在移动端的兼容问题" class="headerlink" title="1. PC端事件在移动端的兼容问题"></a>1. PC端事件在移动端的兼容问题</h2><h3 id="1-1-click事件的200-300ms延迟问题"><a href="#1-1-click事件的200-300ms延迟问题" class="headerlink" title="1.1 click事件的200~300ms延迟问题"></a>1.1 click事件的200~300ms延迟问题</h3><p>由于移动端默认的布局视口宽度是980像素，所以网页文字非常小，为了快速让网页还原到原来的大小，Safari最新引入了双击缩放功能：用户双击手机页面的时候，浏览器会智能的缩放当前页面到原始大小。</p>
<span id="more"></span>

<blockquote>
<p>双击缩放的原理就是，当用户click一次之后，浏览器会经过约300ms之后检测是否再有一次click，如果有的话，就会缩放页面。否则的话就是一个click事件。</p>
</blockquote>
<p>由于双击缩放功能存在，click事件触发就会有大约200~300ms的延迟。</p>
<h3 id="1-2-dblclick事件失效"><a href="#1-2-dblclick事件失效" class="headerlink" title="1.2 dblclick事件失效"></a>1.2 dblclick事件失效</h3><p>由于双击缩放的存在，pc端的dblclick事件也失效了。</p>
<h2 id="2-移动端特有的touch事件"><a href="#2-移动端特有的touch事件" class="headerlink" title="2. 移动端特有的touch事件"></a>2. 移动端特有的touch事件</h2><p>由于移动端设备大都具备触摸功能，所以移动端浏览器都引入了触摸(touch)事件。</p>
<p>touch相关的事件跟普通的其他dom事件一样使用，可以直接用addEventListener来监听和处理。</p>
<p>最基本的touch事件包括4个事件：</p>
<ol>
<li>touchstart： 当在屏幕上按下手指时触发</li>
<li>touchmove： 当在屏幕上移动手指时触发</li>
<li>touchend： 当在屏幕上抬起手指时触发</li>
<li>touchcancel 当一些更高级别的事件发生的时候（如电话接入或者弹出信息）会取消当前的touch操作，即触发touchcancel。一般会在touchcancel时暂停游戏、存档等操作。</li>
</ol>
<h3 id="2-1-touch事件与click事件同时触发"><a href="#2-1-touch事件与click事件同时触发" class="headerlink" title="2.1 touch事件与click事件同时触发"></a>2.1 touch事件与click事件同时触发</h3><p>在很多情况下，触摸事件和鼠标事件会同时被触发（目的是让没有对触摸设备优化的代码仍然可以在触摸设备上正常工作）。</p>
<p>因为双击缩放检测的存在，在移动设备屏幕上点击操作的事件执行顺序：</p>
<p><strong>touchstart(瞬间触发)  →  touchend → click(200-300ms延迟)</strong></p>
<blockquote>
<p>如果你使用了触摸事件，可以调用 event.preventDefault()来阻止鼠标事件被触发。</p>
</blockquote>
<h3 id="2-2-touchstart事件"><a href="#2-2-touchstart事件" class="headerlink" title="2.2 touchstart事件"></a>2.2 touchstart事件</h3><p> 当用户手指触摸到的触摸屏的时候触发。事件对象的 target 就是touch 发生位置的那个元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    点击我！</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;touchstart&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-touchmove事件"><a href="#2-3-touchmove事件" class="headerlink" title="2.3 touchmove事件"></a>2.3 touchmove事件</h3><p>当用户在触摸屏上移动触点(手指)的时候，触发这个事件。一定是先要触发touchstart事件，再有可能触发 touchmove 事件。</p>
<p>touchmove 事件的target 与最先触发的 touchstart 的 target 保持一致。touchmove事件和鼠标的mousemove事件一样都会多次重复调用，所以，事件处理时不能有太多耗时操作。不同的设备，移动同样的距离 touchmove 事件的触发频率是不同的。</p>
<blockquote>
<p>注意：</p>
<ol>
<li>即使手指移出了 原来的target 元素，则 touchmove 仍然会被一直触发，而且 target 仍然是原来的 target 元素。</li>
<li>touchmove事件会多次重复触发，由于移动端计算资源宝贵，尽量保证<a href="https://link.jianshu.com/?t=https://www.2cto.com/kf/201411/352213.html">事件节流</a></li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> i = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchmove&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        p.<span class="property">innerHTML</span> = e.<span class="property">target</span>.<span class="property">tagName</span> + <span class="string">&quot;, &quot;</span> + i++;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/4393631-fc8152e419ebd000.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/572/format/webp" alt="img"></p>
<h3 id="2-4-touchend事件"><a href="#2-4-touchend事件" class="headerlink" title="2.4 touchend事件"></a>2.4 touchend事件</h3><p> 当用户的手指抬起的时候，会触发 touchend 事件。如何用户的手指从触屏设备的边缘移出了触屏设备，也会触发 touchend 事件。</p>
<blockquote>
<p>touchend 事件的 target 也是与 touchstart 的 target 一致，即使已经移出了元素。</p>
</blockquote>
<img src="image/image-20200706000225103.png" alt="image-20200706000225103" style="zoom:50%;" />

<p>一次完整的touch事件的触发顺序和过程</p>
<h3 id="2-5-touchcancel事件"><a href="#2-5-touchcancel事件" class="headerlink" title="2.5 touchcancel事件"></a>2.5 touchcancel事件</h3><p> 当触点由于某些原因被中断时触发。有几种可能的原因如下(具体的原因根据不同的设备和浏览器有所不同):</p>
<ul>
<li>由于某个事件取消了触摸：例如触摸过程被一个模态的弹出框打断。</li>
<li>触点离开了文档窗口，而进入了浏览器的界面元素、插件或者其他外部内容区域。</li>
<li>当用户产生的触点个数超过了设备支持的个数，从而导致 TouchList 中最早的 Touch对象被取消</li>
</ul>
<blockquote>
<p>touchcancel 事件一般用于保存现场数据。比如：正在玩游戏，如果发生了 。touchcancel 事件，则应该把游戏当前状态相关的一些数据保存起来。</p>
</blockquote>
<h2 id="3-触摸事件对象"><a href="#3-触摸事件对象" class="headerlink" title="3. 触摸事件对象"></a>3. 触摸事件对象</h2><p><code>TouchEvent</code> 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等。</p>
<p>每 个 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Touch"><code>Touch</code></a> 对象代表一个触点; 每个触点都由其位置，大小，形状，压力大小，和目标 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Element"><code>element</code></a> 描述。 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchList"><code>TouchList</code></a> 对象代表多个触点的一个列表.</p>
<h3 id="3-1-TouchEvent"><a href="#3-1-TouchEvent" class="headerlink" title="3.1 TouchEvent"></a>3.1 TouchEvent</h3><p><em><a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent"><code>TouchEvent</code></a>的属性继承了 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/UIEvent"><code>UIEvent</code></a> 和 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Event"><code>Event</code></a>。</em></p>
<p>属性列表：</p>
<ol>
<li><a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/changedTouches"><code>TouchEvent.changedTouches</code></a>： 一个 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchList"><code>TouchList</code></a> 对象，包含了代表所有从上一次触摸事件到此次事件过程中，状态发生了改变的触点的 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Touch"><code>Touch</code></a> 对象。</li>
<li><a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/targetTouches"><code>TouchEvent.targetTouches</code></a>： 一个 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchList"><code>TouchList</code></a> 对象，是包含了如下触点的 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Touch"><code>Touch</code></a> 对象：触摸起始于当前事件的目标 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Element"><code>element</code></a> 上，并且仍然没有离开触摸平面的触点。</li>
<li><a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/touches"><code>TouchEvent.touches</code></a>： 一 个 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/TouchList"><code>TouchList</code></a> 对象，包含了所有当前接触触摸平面的触点的 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Touch"><code>Touch</code></a> 对象，无论它们的起始于哪个 <a href="https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/Web/API/Element"><code>element</code></a> 上，也无论它们状态是否发生了变化。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">   <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">     <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">     <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">     <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#09c</span>;</span></span><br><span class="line"><span class="language-css">     <span class="attribute">background-color</span>: <span class="number">#0dc</span>;</span></span><br><span class="line"><span class="language-css">   &#125;</span></span><br><span class="line"><span class="language-css"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">     box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">dir</span>(e); <span class="comment">// 查看TouchEvent对象的属性和方法</span></span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="image/image-20200706000435872.png" alt="image-20200706000435872" style="zoom:50%;" />

<h3 id="3-2-TouchList详解"><a href="#3-2-TouchList详解" class="headerlink" title="3.2 TouchList详解"></a>3.2 TouchList详解</h3><p> 一个<code>TouchList</code>代表一个触摸屏幕上所有触点的列表。</p>
<p> 举例来讲, 如果一个用户用三根手指接触屏幕(或者触控板), 与之相关的<code>TouchList</code> 对于每根手指都会生成一个 <code>Touch</code>对象, 共计 3 个.</p>
<ol>
<li><p>只读属性：<code>length</code></p>
<p>返回这个<code>TouchList</code>中<code>Touch</code>对的个数。(就是有几个手指接触到了屏幕)</p>
</li>
<li><p>方法：<code>item(index)</code></p>
<p>返回<code>TouchList</code>中指定索引的<code>Touch</code>对象。</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 50px; color: #ffffff;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    box.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchend&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        p.<span class="property">innerHTML</span> = e.<span class="property">changedTouches</span>.<span class="property">length</span>;  <span class="comment">//返回Touch对象的个数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; e.<span class="property">changedTouches</span>.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//遍历出来每个Touch对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">changedTouches</span>.<span class="title function_">item</span>(i));</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="image/image-20200706000458421.png" alt="image-20200706000458421"></p>
<p><strong>测试多个手机触摸屏幕：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    div.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> msg = <span class="string">&quot;touches.length: &quot;</span> + e.<span class="property">touches</span>.<span class="property">length</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;br&gt; targetTouches.length: &quot;</span> + e.<span class="property">targetTouches</span>.<span class="property">length</span> +</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;&lt;br&gt; changedTouches.length: &quot;</span> + e.<span class="property">changedTouches</span>.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">        p.<span class="property">innerHTML</span> = msg;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>操作：</p>
<ol>
<li><p>放1个手指在div上</p>
<img src="image/image-20200706000520690.png" alt="image-20200706000520690" style="zoom:50%;" /> </li>
<li><p>先放1个手指在其他地方，然后再放1个手指在<code>div</code>上</p>
<img src="image/image-20200706000552162.png" alt="image-20200706000552162" style="zoom:50%;" /> </li>
<li><p>先放1个手指在其他地方，然后再逐渐放2个手指在div上</p>
<img src="image/image-20200706000611403.png" alt="image-20200706000611403" style="zoom:50%;" /> </li>
</ol>
<h2 id="3-3-Touch详解"><a href="#3-3-Touch详解" class="headerlink" title="3.3 Touch详解"></a>3.3 Touch详解</h2><p> <code>Touch</code>表示用户和触摸设备之间接触时单独的交互点(<code>a single point of contact</code>)。 这个交互点通常是一个手指或者触摸笔， 触摸设备通常是触摸屏或者触摸板。</p>
<p>基本属性列表（都是只读）:</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>属性名</th>
<th>属性说明</th>
</tr>
</thead>
<tbody><tr>
<td>1.</td>
<td><code>identifier</code></td>
<td>表示每 1 个 <code>Touch</code> 对象 的独一无二的 <code>identifier</code>。有了这个 <code>identifier</code> 可以确保你总能追踪到这个 <code>Touch</code>对象。</td>
</tr>
<tr>
<td>2.</td>
<td><code>screenX</code></td>
<td>触摸点相对于屏幕左边缘的 <code>x</code> 坐标。</td>
</tr>
<tr>
<td>3.</td>
<td><code>scre</code>enY</td>
<td>触摸点相对于屏幕上边缘的 <code>y</code> 坐标。</td>
</tr>
<tr>
<td>4.</td>
<td><code>clientX</code></td>
<td>触摸点相对于浏览器的 <code>viewport</code>左边缘的 <code>x</code> 坐标。不会包括左边的滚动距离。</td>
</tr>
<tr>
<td>5.</td>
<td><code>clientY</code></td>
<td>触摸点相对于浏览器的 <code>viewport</code>上边缘的 <code>y</code> 坐标。不会包括上边的滚动距离。</td>
</tr>
<tr>
<td>6.</td>
<td><code>pageX</code></td>
<td>触摸点相对于 <code>document</code>的左边缘的 <code>x</code> 坐标。 与 <code>clientX</code> 不同的是，他包括左边滚动的距离，如果有的话。</td>
</tr>
<tr>
<td>7.</td>
<td><code>pageY</code></td>
<td>触摸点相对于 <code>document</code>的左边缘的 <code>y</code> 坐标。 与 <code>clientY</code> 不同的是，他包括上边滚动的距离，如果有的话。</td>
</tr>
<tr>
<td>8.</td>
<td><code>target</code></td>
<td>总是表示 手指最开始放在触摸设备上的触发点所在位置的 <code>element</code>。 即使已经移出了元素甚至移出了<code>document</code>, 他表示的<code>element</code>仍然不变</td>
</tr>
</tbody></table>
<p>案例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">box.<span class="property">ontouchstart</span> = <span class="keyword">function</span> (<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> touchList = e.<span class="property">changedTouches</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; touchList.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> touch = touchList[i];</span><br><span class="line">        <span class="keyword">var</span> msg = <span class="string">`id : <span class="subst">$&#123;touch.identifier&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                       screenX : <span class="subst">$&#123;touch.screenX&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                       screenY : <span class="subst">$&#123;touch.screenY&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                       clientX : <span class="subst">$&#123;touch.clientX&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                       clientY : <span class="subst">$&#123;touch.clientY&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                       pageX : <span class="subst">$&#123;touch.pageX&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                       pageY : <span class="subst">$&#123;touch.pageY&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                       target: <span class="subst">$&#123;touch.target.nodeName&#125;</span> &lt;br&gt;</span></span><br><span class="line"><span class="string">                        `</span>;</span><br><span class="line">        p.<span class="property">innerHTML</span> = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有左右滚动：</p>
<img src="image/image-20200706000631489.png" alt="image-20200706000631489" style="zoom:50%;" /> 

<p>左右滚动：<code>pageX</code> 明显大于 <code>clientX</code></p>
<img src="image/image-20200706000649920.png" alt="image-20200706000649920" style="zoom:50%;" /> 

<h2 id="4-封装移动端tap事件"><a href="#4-封装移动端tap事件" class="headerlink" title="4. 封装移动端tap事件"></a>4. 封装移动端tap事件</h2><p>由于点击事件经常使用，如果用click会有延迟问题，一般我们会用touch事件模拟移动端的点击事件, 以下是封装的几个事件，仅供参考。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="variable language_">window</span></span>)&#123;  <span class="comment">//传入window，提高变量的查找效率</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">myQuery</span>(<span class="params">selector</span>)&#123;  <span class="comment">//这个函数就是对外提供的接口。</span></span><br><span class="line">        <span class="comment">//调用这个函数的原型对象上的_init方法，并返回</span></span><br><span class="line">        <span class="keyword">return</span> myQuery.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">_init</span>(selector);</span><br><span class="line">    &#125;</span><br><span class="line">    myQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">        <span class="comment">/*初始化方法，获取当前query对象的方法*/</span></span><br><span class="line">        <span class="attr">_init</span>: <span class="keyword">function</span> (<span class="params">selector</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;string&quot;</span>)&#123;</span><br><span class="line">                <span class="comment">//把查找到的元素存入到这个原型对象上。</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">ele</span> = <span class="variable language_">window</span>.<span class="property">document</span>.<span class="title function_">querySelector</span>(selector);</span><br><span class="line">                <span class="comment">//返回值其实就是原型对象。</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/*单击事件：</span></span><br><span class="line"><span class="comment">         * 为了规避click的300ms的延迟，自定义一个单击事件</span></span><br><span class="line"><span class="comment">         * 触发时间：</span></span><br><span class="line"><span class="comment">         *   当抬起手指的时候触发</span></span><br><span class="line"><span class="comment">         *   需要判断手指落下和手指抬起的事件间隔，如果小于500ms表示单击时间。</span></span><br><span class="line"><span class="comment">         *   如果是大于等于500ms，算是长按时间</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="attr">tap</span>: <span class="keyword">function</span> (<span class="params">handler</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ele</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, touchFn);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ele</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchend&quot;</span>, touchFn);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> startTime,</span><br><span class="line">                endTime;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">touchFn</span>(<span class="params">e</span>)&#123;</span><br><span class="line">                e.<span class="title function_">preventDefault</span>()</span><br><span class="line">                <span class="keyword">switch</span> (e.<span class="property">type</span>)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;touchstart&quot;</span>:</span><br><span class="line">                        startTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;touchend&quot;</span>:</span><br><span class="line">                        endTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">                        <span class="keyword">if</span> (endTime - startTime &lt; <span class="number">500</span>)&#123;</span><br><span class="line">                            handler.<span class="title function_">call</span>(<span class="variable language_">this</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 长按</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> <span class="variable">handler</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="attr">longTag</span>: <span class="keyword">function</span> (<span class="params">handler</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ele</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, touchFn);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ele</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchmove&quot;</span>, touchFn);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ele</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchend&quot;</span>, touchFn);</span><br><span class="line">            <span class="keyword">var</span> timerId;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">touchFn</span>(<span class="params">e</span>)&#123;</span><br><span class="line">                <span class="keyword">switch</span> (e.<span class="property">type</span>)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;touchstart&quot;</span> :  <span class="comment">//500ms之后执行</span></span><br><span class="line">                        timerId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">                            handler.<span class="title function_">call</span>(<span class="variable language_">this</span>, e);</span><br><span class="line">                        &#125;, <span class="number">500</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;touchmove&quot;</span> :</span><br><span class="line">                        <span class="comment">//如果中间有移动也清除定时器</span></span><br><span class="line">                        <span class="built_in">clearTimeout</span>(timerId)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;touchend&quot;</span> :</span><br><span class="line">                        <span class="comment">//如果在500ms之内抬起了手指，则需要定时器</span></span><br><span class="line">                        <span class="built_in">clearTimeout</span>(timerId);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 左侧滑动。</span></span><br><span class="line"><span class="comment">         * 记录手指按下的左边，在离开的时候计算 deltaX是否满足左滑的条件         </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="attr">slideLeft</span>: <span class="keyword">function</span> (<span class="params">handler</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ele</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, touchFn);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ele</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchend&quot;</span>, touchFn);</span><br><span class="line">            <span class="keyword">var</span> startX, startY, endX, endY;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">touchFn</span>(<span class="params">e</span>)&#123;</span><br><span class="line">                e.<span class="title function_">preventDefault</span>();</span><br><span class="line">                <span class="keyword">var</span> firstTouch = e.<span class="property">changedTouches</span>[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">switch</span> (e.<span class="property">type</span>)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;touchstart&quot;</span>:</span><br><span class="line">                        startX = firstTouch.<span class="property">pageX</span>;</span><br><span class="line">                        startY = firstTouch.<span class="property">pageY</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;touchend&quot;</span>:</span><br><span class="line">                        endX = firstTouch.<span class="property">pageX</span>;</span><br><span class="line">                        endY = firstTouch.<span class="property">pageY</span>;</span><br><span class="line">                        <span class="comment">//x方向移动大于y方向的移动，并且x方向的移动大于25个像素，表示在向左侧滑动</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(endX - startX) &gt;= <span class="title class_">Math</span>.<span class="title function_">abs</span>(endY - startY) &amp;&amp; startX - endX &gt;= <span class="number">25</span>)&#123;</span><br><span class="line">                            handler.<span class="title function_">call</span>(<span class="variable language_">this</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/* 右侧滑动 */</span></span><br><span class="line">        <span class="attr">rightLeft</span>: <span class="keyword">function</span> (<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">$</span> = <span class="variable language_">window</span>.<span class="property">myQuery</span> = myQuery;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================</span></span><br><span class="line"><span class="comment">// 使用：</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">tap</span>(<span class="keyword">function</span> (<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;单击事件&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">longTag</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;长按事件&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideLeft</span>(<span class="keyword">function</span> (<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">&quot;左侧滑动了.....&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="5-触摸手势封装相关的框架及事件"><a href="#5-触摸手势封装相关的框架及事件" class="headerlink" title="5. 触摸手势封装相关的框架及事件"></a>5. 触摸手势封装相关的框架及事件</h2><p>手势相关的事件一般就是tap类（触屏）和滑动（swipe)事件两类。都是基于原生的touchstart、touchmove、touchend事件，封装成不同的手势类型自定义事件。</p>
<h3 id="5-1-tap类事件"><a href="#5-1-tap类事件" class="headerlink" title="5.1 tap类事件"></a>5.1 tap类事件</h3><p>触碰事件，我目前还不知道它和touch的区别，一般用于代替click事件，有tap longTap singleTap doubleTap四种之分。</p>
<ol>
<li>tap: 手指碰一下屏幕会触发</li>
<li>longTap: 手指长按屏幕会触发</li>
<li>singleTap: 手指碰一下屏幕会触发</li>
<li>doubleTap: 手指双击屏幕会触发</li>
</ol>
<h3 id="5-2-swipe类事件"><a href="#5-2-swipe类事件" class="headerlink" title="5.2 swipe类事件"></a>5.2 swipe类事件</h3><p>滑动事件，有swipe swipeLeft swipeRight swipeUp swipeDown 五种之分。</p>
<ol>
<li>swipe：手指在屏幕上滑动时会触发</li>
<li>swipeLeft：手指在屏幕上向左滑动时会触发</li>
<li>swipeRight：手指在屏幕上向右滑动时会触发</li>
<li>swipeUp：手指在屏幕上向上滑动时会触发</li>
<li>swipeDown：手指在屏幕上向下滑动时会触发</li>
</ol>
<img src="image/image-20200706000711531.png" alt="image-20200706000711531" style="zoom:50%;" /> 

<h3 id="5-3-zepto的手势相关事件"><a href="#5-3-zepto的手势相关事件" class="headerlink" title="5.3 zepto的手势相关事件"></a>5.3 zepto的手势相关事件</h3><p><a href="https://link.jianshu.com/?t=http://www.zeptojs.cn/">Zepto.js</a> 是一个轻量级的针对现代高级浏览器的JavaScript库， 它适配了jQuery的大部分api，也就是jQuery怎么用，Zepto.js就怎么用。它非常小，非常适合移动端。</p>
<p>Zepto.js的touch模块中封装了手势相关的代码。封装了再触摸设备上触发tap– 和 swipe– 相关事件，也适用于所有的<code>touch</code>(iOS, Android)和<code>pointer</code>事件(Windows Phone)。</p>
<ul>
<li>触屏事件：tap、singleTap、doubleTap、longTap(&gt;750ms）</li>
<li>滑动事件：swipe、swipeLeft,、swipeRight,、swipeUp,、swipeDown</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.delete</span> &#123; <span class="attribute">display</span>: none; &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">items</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>List item 1 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">delete</span>&gt;</span>DELETE<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>List item 2 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">delete</span>&gt;</span>DELETE<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#items li&#x27;</span>).<span class="title function_">swipe</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&#x27;.delete&#x27;</span>).<span class="title function_">hide</span>()</span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&#x27;.delete&#x27;</span>, <span class="variable language_">this</span>).<span class="title function_">show</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;.delete&#x27;</span>).<span class="title function_">tap</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  $(<span class="variable language_">this</span>).<span class="title function_">parent</span>(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">remove</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-4-其他移动端手势相关库"><a href="#5-4-其他移动端手势相关库" class="headerlink" title="5.4 其他移动端手势相关库"></a>5.4 其他移动端手势相关库</h3><ol>
<li><a href="https://link.jianshu.com/?t=https://github.com/Clouda-team/touchjs">百度云的touch.js</a></li>
<li><a href="https://link.jianshu.com/?t=https://github.com/hammerjs/hammer.js">hammer.js</a><br> hammer提供了不仅仅tap、swipe等事件，还提供了：pan（平移)、pinch类（捏拿缩放）、 press类（按住）、 rotate类（旋转）类手势支持， <a href="https://link.jianshu.com/?t=http://www.cnblogs.com/imwtr/p/5884484.html">hammer.js详解教程</a></li>
</ol>
<h2 id="6-移动端点击穿透问题"><a href="#6-移动端点击穿透问题" class="headerlink" title="6. 移动端点击穿透问题"></a>6. 移动端点击穿透问题</h2><p>如果某个返回按钮的位置，恰好在要返回的这个页面的带有href属性的a标签的范围内，在点击返回按钮后，页面快速切换到有a标签的页面，300ms后触发了click事件，从而触发了a标签的意外跳转，这个就是典型的点击穿透问题。罪魁祸首其实就是a标签跳转默认是click事件触发，而移动端的touch事件触发之后，依然会在300ms后触发click事件。</p>
<p>解决办法：<br> 1.就是阻止触发touch事件完成后的click事件。<br> 2.不要混用touch和click事件。显然不可能都绑定click事件，因为要解决300ms延迟问题(除了fastclick)，那么只能都绑定touch事件，这样click事件永远不会被触发。</p>
<blockquote>
<p>注意：zepto并没有阻止click事件，所以使用zepto的tap事件依然会导致点击穿透问题，你需要手动添加 e.preventDefault() 来阻止click事件。</p>
</blockquote>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端开发</title>
    <url>/liuqi_blogs/2021/08/17/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<h1 id="移动端开发"><a href="#移动端开发" class="headerlink" title="移动端开发"></a>移动端开发</h1><h2 id="1-移动端适配"><a href="#1-移动端适配" class="headerlink" title="1. 移动端适配"></a>1. 移动端适配</h2><p>###1.1 视口</p>
<ul>
<li>布局视口(写页面)  980px</li>
<li>视觉视口(用户可以看到的) 375px</li>
</ul>
<blockquote>
<p>为了用户体验 我们需要让视觉视口和布局视口相等</p>
</blockquote>
<span id="more"></span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-像素"><a href="#1-2-像素" class="headerlink" title="1.2 像素"></a>1.2 像素</h3><h3 id="1-3-方案"><a href="#1-3-方案" class="headerlink" title="1.3 方案"></a>1.3 方案</h3><h4 id="1-3-1-百分比"><a href="#1-3-1-百分比" class="headerlink" title="1.3.1 百分比"></a>1.3.1 百分比</h4><img src="image/image-20200706005612379.png" alt="image-20200706005612379" style="zoom:50%;" /> 

<h4 id="1-3-2-rem"><a href="#1-3-2-rem" class="headerlink" title="1.3.2 rem"></a>1.3.2 rem</h4><h4 id="1-3-3总结"><a href="#1-3-3总结" class="headerlink" title="1.3.3总结"></a>1.3.3总结</h4><p>**1. **在 head 设置 width=device-width 的 viewport</p>
<p><strong>2.</strong> 在 css 中使用 px</p>
<p>**3. ** 在适当的场景使用 flex 布局，或者配合 vw 进行自适应</p>
<p>**4. ** 在跨设备类型的时候（pc &lt;-&gt; 手机 &lt;-&gt; 平板）使用媒体查询</p>
<p><strong>5.</strong>  在跨设备类型如果交互差异太大的情况，考虑分开项目开发</p>
<h2 id="2-真机调试"><a href="#2-真机调试" class="headerlink" title="2. 真机调试"></a>2. 真机调试</h2><h3 id="2-1-代理地址"><a href="#2-1-代理地址" class="headerlink" title="2.1 代理地址"></a>2.1 代理地址</h3><h3 id="2-2-查看控制台错误"><a href="#2-2-查看控制台错误" class="headerlink" title="2.2 查看控制台错误"></a>2.2 查看控制台错误</h3>]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端适配问题</title>
    <url>/liuqi_blogs/2021/08/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="移动端适配面试相关"><a href="#移动端适配面试相关" class="headerlink" title="移动端适配面试相关"></a>移动端适配面试相关</h2><p>手机市场日渐丰富的同时，给我们前端开发人员带来的 “网页内容自适应屏幕尺寸进行显示的问题” 也日渐凸显出来，接下来我们就要细说移动端适配的前世今生及方案。</p>
<h2 id="一、为什么要移动端适配？"><a href="#一、为什么要移动端适配？" class="headerlink" title="一、为什么要移动端适配？"></a>一、为什么要移动端适配？</h2><span id="more"></span>
<blockquote>
<p>一般情况下设计稿的设计师按照 375 的尺寸设计，然而，在现在移动终端（就是手机）快速更新的时代，每个品牌的手机都有着不同的物理分辨率，这样就会导致，每台设备的逻辑分辨率也不尽相同，此时 375 的设计稿，如果想要还原那基本是不可能了，因为如果一个左右布局，左边如果写死，右边自适应的话，每个设备的右边所展示的内容大小就不尽相同，这时移动端适配就显得尤其重要。</p>
</blockquote>
<p>既然要了解前世今生，我们就从几个概念说起，先上一张图。</p>
<img src="image/image-20200706003620977.png" alt="image-20200706003620977" style="zoom:50%;" /> 

<p>下面我们一个个解析</p>
<h3 id="1-1-屏幕尺寸"><a href="#1-1-屏幕尺寸" class="headerlink" title="1.1 屏幕尺寸"></a>1.1 屏幕尺寸</h3><blockquote>
<p>屏幕尺寸是以屏幕对角线的长度来计量，计量单位为英寸。</p>
</blockquote>
<p>如图所示两个对角线的长度就是这个屏幕的尺寸</p>
<img src="image/image-20200706003644416.png" alt="image-20200706003644416" style="zoom:50%;" /> 

<h3 id="1-2-像素"><a href="#1-2-像素" class="headerlink" title="1.2 像素"></a>1.2 像素</h3><p>我们看到上图 320x480 叫分辨率，而这个所谓的分辨率说白了就是横向320个像素纵向480个像素组成 </p>
<p>1.2.1 什么叫像素呢？</p>
<blockquote>
<p>像素（Pel, pixel, pictureelement），为组成一幅图像的全部亮度和色度的最小图像单元。电视的图像是由按一定间隔排列的亮度不同的像点构成的，形成像点的单位也就是像素，组成图像的最小单位就是像素。从计算机技术的角度来解释，像素是硬件和软件所能控制的最小单位。它指显示屏的画面上表示出来的最小单位，不是图画上的最小单位。一幅图像通常包含成千上万个像素，每个像素都有自己的颜色信息，它们紧密地组合在一起。由于人眼的错觉，这些组合在一起的像素被当成一幅完整的图像。当修改图像的某区域，实际上是在修改该区域内的像素。对这些像素修改的好与坏将决定最终图片的质量。单位面积内的像素越多，图像的效果就越好。彩色电视图像是由成千个像素点所组成的，而且每个像素都是由红绿蓝三种颜色并排组成的。(<strong>注意每个像素的大小是不固定的，他是根据设备的分辨率决定的，知识点，后面要考</strong>)</p>
</blockquote>
<h4 id="1-2-2-什么叫分辨率呢"><a href="#1-2-2-什么叫分辨率呢" class="headerlink" title="1.2.2 什么叫分辨率呢?"></a>1.2.2 什么叫分辨率呢?</h4><blockquote>
<p>屏幕分辨率是指纵横向上的像素点数，单位是 px。屏幕分辨率确定计算机屏幕上显示多少信息的设置，以水平和垂直像素来衡量。就相同大小的屏幕而言，当屏幕分辨率低时（例如 640 x 480），在屏幕上显示的像素少，单个像素尺寸比较大。屏幕分辨率高时（例如 1600 x 1200），在屏幕上显示的像素多，单个像素尺寸比较小。</p>
</blockquote>
<p>知道什么叫做分辨率后，有人就会奇怪，我记得苹果的苹果官网上的苹果 6 的分辨率为 750x1334 啊，但是设计稿上苹果 6 的分辨率为 375x667 啊，而且各个设备的分辨率都比实际分辨率小很多，这就牵扯到一些历史原因了</p>
<h4 id="1-2-3-设备物理分辨率（设备像素）"><a href="#1-2-3-设备物理分辨率（设备像素）" class="headerlink" title="1.2.3 设备物理分辨率（设备像素）"></a>1.2.3 设备物理分辨率（设备像素）</h4><p>相信我们所有前端开发者，都是见证了手机这个移动设备发展的过程。从蓝屏手机，到彩屏手机，到诺基亚研发出来触屏手机，再到智能手机一步步发展下来，我们的我们的手越来越清晰，越来越大，所以我们的屏幕发展也越来越迅速。</p>
<img src="image/image-20200706003704379.png" alt="image-20200706003704379" style="zoom:50%;" /> 

<p>上图可以清楚的看到，不同分辨率所带来的的差距</p>
<p>从最初的颗粒感相当大的屏幕，到 720p 再到 1080p，甚至于现在各家旗舰手机的 2k 屏幕，我们的物理分辨率在变得原来越大。这样就暴露出来一个问题，我们如果手机分辨率翻倍，我们的图像不就要被缩小一倍，我们难道要在每个设备上就出个设计稿，每个设备的分辨不尽相同啊，其实你担忧的问题，我们的乔帮主在很多年前就想到了。这就是我们的逻辑分辨率</p>
<h4 id="1-2-4-逻辑分辨率（设备独立像素）"><a href="#1-2-4-逻辑分辨率（设备独立像素）" class="headerlink" title="1.2.4 逻辑分辨率（设备独立像素）"></a>1.2.4 逻辑分辨率（设备独立像素）</h4><p>如下图所示，虽然设备物理分辨不同，但是他的这个逻辑分辨率却都差不多，这就要感谢乔帮主了。</p>
<img src="image/image-20200706003720231.png" alt="image-20200706003720231" style="zoom:50%;" /> 

<p>乔布斯在 iPhone4 的发布会上首次提出了 Retina Display(视网膜屏幕)的概念，在 iPhone4 使用的视网膜屏幕中，把 2x2 个像素当 1 个像素使用，这样让屏幕看起来更精致，但是元素的大小却不会改变。从此以后高分辨率的设备，多了一个逻辑像素。这些设备逻辑像素的差别虽然不会跨度很大，但是仍然有点差别，于是便诞生了移动端页面需要适配这个问题，既然逻辑像素由物理像素得来，那他们就会有一个像素比值。</p>
<h4 id="1-2-5-设备像素比"><a href="#1-2-5-设备像素比" class="headerlink" title="1.2.5 设备像素比"></a>1.2.5 设备像素比</h4><p>设备像素比 device pixel ratio 简称 dpr，即物理像素和设备独立像素的比值。为什么要知道设备像素比呢？因为这个像素比会产生一个非常经典的问题，1 像素边框的问题。</p>
<ol>
<li>1px 边框问题</li>
</ol>
<blockquote>
<p>当我们 css 里写的 1px 的时候，由于它是逻辑像素，导致我们的逻辑像素根据这个设备像素比（dpr）去映射到设备上就为 2px，或者 3px，由于每个设备的屏幕尺寸不一样，就导致每个物理像素渲染出来的大小也不同（记得上面的知识点吗，设备的像素大小是不固定的），这样如果在尺寸比较大的设备上，1px 渲染出来的样子相当的粗矿，这就是经典的一像素边框问题。</p>
</blockquote>
<ol>
<li>如何解决</li>
</ol>
<p>核心思路，就是<strong>在 web 中，浏览器为我们提供了 window.devicePixelRatio 来帮助我们获取 dpr。在 css 中，可以使用媒体查询 min-device-pixel-ratio，区分 dpr：</strong>我们根据这个像素比，来算出他对应应该有的大小，但是暴露个非常大的兼容问题。</p>
<img src="image/image-20200706003741055.png" alt="image-20200706003741055" style="zoom:50%;" /> 

<blockquote>
<p>其中 Chrome 把 0.5px 四舍五入变成了 1px，而 firefox/safari 能够画出半个像素的边，并且 Chrome 会把小于 0.5px 的当成 0，而 Firefox 会把不小于 0.55px 当成 1px，Safari 是把不小于 0.75px 当成 1px，进一步在手机上观察 iOS 的 Chrome 会画出 0.5px 的边，而安卓(5.0)原生浏览器是不行的。所以直接设置 0.5px 不同浏览器的差异比较大，并且我们看到不同系统的不同浏览器对小数点的 px 有不同的处理。<strong>所以如果我们把单位设置成小数的 px 包括宽高等，其实不太可靠，因为不同浏览器表现不一样</strong>。</p>
</blockquote>
<p>至于其他解决一像素边框问题网上有一堆答案，在这里我推荐一种非常好用，并且没有副作用的解决方案。</p>
<p><strong>transform: scale(0.5) 方案</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    height:1px;</span><br><span class="line">    background:#000;</span><br><span class="line">    -webkit-transform: scaleY(0.5);</span><br><span class="line">    -webkit-transform-origin:00;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>css 根据设备像素比媒体查询后的解决方案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 2倍屏 */</span><br><span class="line">@media only screen and (-webkit-min-device-pixel-ratio: 2.0) &#123;</span><br><span class="line">    .border-bottom::after &#123;</span><br><span class="line">        -webkit-transform: scaleY(0.5);</span><br><span class="line">        transform: scaleY(0.5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/* 3倍屏 */</span><br><span class="line">@media only screen and (-webkit-min-device-pixel-ratio: 3.0) &#123;</span><br><span class="line">    .border-bottom::after &#123;</span><br><span class="line">        -webkit-transform: scaleY(0.33);</span><br><span class="line">        transform: scaleY(0.33);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如此，完美的解决一像素看着粗的问题。</p>
<blockquote>
<p><strong>扩展补充</strong></p>
<p>CSS 最新的规范中正在计划通过标准的属性实现一像素边框，通过给<code>border-width</code>属性添加<code>hairline</code>关键字属性来实现，具体如下<strong>链接</strong>[1]。之所以叫hairline，是因为一像素边框就跟头发丝一样。</p>
<p>练习使用方案时，也要多多关注最新发展哟。</p>
</blockquote>
<h2 id="二、如何适配"><a href="#二、如何适配" class="headerlink" title="二、如何适配"></a>二、如何适配</h2><h3 id="2-1-viewport"><a href="#2-1-viewport" class="headerlink" title="2.1 viewport"></a>2.1 viewport</h3><blockquote>
<p>视口(viewport)代表当前可见的计算机图形区域。在 Web 浏览器术语中，通常与浏览器窗口相同，但不包括浏览器的 UI， 菜单栏等——即指你正在浏览的文档的那一部分。</p>
</blockquote>
<p>那么在移动端如何配置视口呢？简单的一个 meta 标签即可！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width; initial-scale=1; maximum-scale=1; minimum-scale=1; user-scalable=no;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>他们分别什么含义呢？</p>
<img src="image/image-20200706003800381.png" alt="image-20200706003800381" style="zoom:50%;" /> 

<p>我们在移动端视口要想视觉效果和体验好，那么我们的视口宽度必须无限接近理想视口。</p>
<p><strong>理想视口：一般来讲，这个视口其实不是真是存在的，它对设备来说是一个最理想布局视口尺寸，在用户不进行手动缩放的情况下，可以将页面理想地展示。那么所谓的理想宽度就是浏览器（屏幕）的宽度了。</strong></p>
<p>于是上述的 meta 设置，就是我们的理想设置，他规定了我们的视口宽度为屏幕宽度，初始缩放比例为 1，就是初始时候我们的视觉视口就是理想视口！</p>
<p><strong>其中 user-scalable 设置为 no 可以解决移动端点击事件延迟问题</strong>（拓展）</p>
<h3 id="2-2-适配方法"><a href="#2-2-适配方法" class="headerlink" title="2.2 适配方法"></a>2.2 适配方法</h3><h4 id="2-2-1-rem-适配"><a href="#2-2-1-rem-适配" class="headerlink" title="2.2.1 rem 适配"></a>2.2.1 rem 适配</h4><blockquote>
<p>rem 是 CSS3 新增的一个相对单位，这个单位引起了广泛关注。这个单位与 em 有什么区别呢？区别在于使用 rem 为元素设定字体大小时，仍然是相对大小，但相对的只是 HTML 根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了 IE8 及更早版本外，所有浏览器均已支持 rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用 rem 设定的字体大小。</p>
</blockquote>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设我给根元素的大小设置为14px</span></span><br><span class="line">html&#123;</span><br><span class="line">    font-size：14px</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//那么我底下的p标签如果想要也是14像素</span></span><br><span class="line">p&#123;</span><br><span class="line">    font-<span class="attr">size</span>:1rem</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如此即可</span></span><br></pre></td></tr></table></figure>

<p>rem 的布局，不得不提 flexible，flexible 方案是阿里早期开源的一个移动端适配解决方案，引用 flexible 后，我们在页面上统一使用 rem 来布局。</p>
<p>他的原理非常简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// set 1rem = viewWidth / 10</span><br><span class="line">function setRemUnit () &#123;</span><br><span class="line">    var rem = docEl.clientWidth / 10</span><br><span class="line">    docEl.style.fontSize = rem + &#x27;px&#x27;</span><br><span class="line">&#125;</span><br><span class="line">setRemUnit();</span><br></pre></td></tr></table></figure>

<p>rem 是相对于 html 节点的 font-size 来做计算的。所以在页面初始话的时候给根元素设置一个 <code>font-size</code>，接下来的元素就根据 rem 来布局，这样就可以保证在页面大小变化时，布局可以自适应。</p>
<p>如此我们只需要给设计稿的 px 转换成对应的 rem 单位即可。</p>
<p>当然，这个方案只是个过渡方案，为什么说是过渡方案</p>
<p>因为当年 viewport 在低版本安卓设备上还有兼容问题，而 vw，vh 还没能实现所有浏览器兼容，所以 flexible 方案用 rem 来模拟 vmin 来实现在不同设备等比缩放的“过度”方案，之所以说是过度方案，是因为这个他这个根据设备大小去判断页面的方案是根据屏幕大小去百分百还原设计稿，从而让人看到的大小效果是一样的，但是 苹果 5 和苹果 6p 虽然看到的设计稿还原是一样的，但是他在一个合适距离上看到的效果能一样吗，本质上，<strong>用户使用更大的屏幕，是想看到更多的内容，而不是更大的字。</strong></p>
<p>so，这个用缩放来解决问题的方案是个过渡方案，注定被时代所淘汰。</p>
<h4 id="2-2-2-vw，vh-布局"><a href="#2-2-2-vw，vh-布局" class="headerlink" title="2.2.2 vw，vh 布局"></a>2.2.2 vw，vh 布局</h4><blockquote>
<p>vh、vw 方案即将视觉视口宽度 window.innerWidth 和视觉视口高度 window.innerHeight 等分为 100 份。</p>
</blockquote>
<img src="image/image-20200706003826294.png" alt="image-20200706003826294" style="zoom:50%;" /> 

<img src="image/image-20200706003847281.png" alt="image-20200706003847281" style="zoom:50%;" /> 

<p>vh 和 vw 方案和 rem 类似也是相当麻烦需要做单位转化，而且 px 转换成 vw 不一定能完全整除，因此有一定的像素差。</p>
<p>不过在工程化的今天，webpack 解析 css 的时候用 postcss-loader 有个 postcss-px-to-viewport 能自动实现 px 到 vw 的转化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    loader: &#x27;postcss-loader&#x27;,</span><br><span class="line">    options: &#123;</span><br><span class="line">    	plugins: ()=&gt;[</span><br><span class="line">        	require(&#x27;autoprefixer&#x27;)(&#123;</span><br><span class="line">        		browsers: [&#x27;last 5 versions&#x27;]</span><br><span class="line">        	&#125;),</span><br><span class="line">        	require(&#x27;postcss-px-to-viewport&#x27;)(&#123;</span><br><span class="line">        		viewportWidth: 375, //视口宽度（数字)</span><br><span class="line">        		viewportHeight: 1334, //视口高度（数字）</span><br><span class="line">        		unitPrecision: 3, //设置的保留小数位数（数字）</span><br><span class="line">        		viewportUnit: &#x27;vw&#x27;, //设置要转换的单位（字符串）</span><br><span class="line">        		selectorBlackList: [&#x27;.ignore&#x27;, &#x27;.hairlines&#x27;], //不需要进行转换的类名（数组）</span><br><span class="line">                minPixelValue: 1, //设置要替换的最小像素值（数字）</span><br><span class="line">                mediaQuery: false//允许在媒体查询中转换px（true/false）</span><br><span class="line">        	&#125;)</span><br><span class="line">    	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-px-为主，vx-和-vxxx（vw-vh-vmax-vmin）为辅，搭配一些-flex（推荐）"><a href="#2-2-3-px-为主，vx-和-vxxx（vw-vh-vmax-vmin）为辅，搭配一些-flex（推荐）" class="headerlink" title="2.2.3 px 为主，vx 和 vxxx（vw/vh/vmax/vmin）为辅，搭配一些 flex（推荐）"></a>2.2.3 px 为主，vx 和 vxxx（vw/vh/vmax/vmin）为辅，搭配一些 flex（推荐）</h4><p>之所以推荐使用此种方案，是由于我们要去考虑用户的需求，<strong>用户之所以去买大屏手机，不是为了看到更大的字，而是为了看到更多的内容</strong>，这样直接使用 px 是最明智的方案，使用 vw，rem 等布局手段无可厚非，但是，flex 这种弹性布局大行其道的今天，如果如果还用这种传统的思维去想问题显然是有两个原因（个人认为 px 是最好的，可能有大佬，能用 vw，或者 rem 写出精妙的布局，也说不准）。</p>
<ol>
<li><strong>为了偷懒，不愿意去做每个手机的适配</strong></li>
<li><strong>不愿意去学习新的布局方式，让 flex 等先进的布局和你擦肩而过</strong></li>
</ol>
<h3 id="2-3-移动端适配流程"><a href="#2-3-移动端适配流程" class="headerlink" title="2.3 移动端适配流程"></a>2.3 移动端适配流程</h3><p><strong>1. 在 head 设置 width=device-width 的 viewport</strong></p>
<p><strong>2. 在 css 中使用 px结合百分比</strong></p>
<p><strong>3. 在适当的场景使用 flex 布局，或者配合 vw 进行自适应</strong></p>
<p><strong>4. 在跨设备类型的时候（pc &lt;-&gt; 手机 &lt;-&gt; 平板）使用媒体查询</strong></p>
<p><strong>5. 在跨设备类型如果交互差异太大的情况，考虑分开项目开发</strong></p>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>项目实战——振涛考试系统</title>
    <url>/liuqi_blogs/2021/06/11/%E7%AC%AC%E4%B8%80%E5%91%A8-%E6%8C%AF%E6%B6%9B%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE-vue/</url>
    <content><![CDATA[<h1 id="振涛考试系统"><a href="#振涛考试系统" class="headerlink" title="振涛考试系统"></a>振涛考试系统</h1><h2 id="1-项目基础封装"><a href="#1-项目基础封装" class="headerlink" title="1. 项目基础封装"></a>1. 项目基础封装</h2><h3 id="1-1-请求的封装"><a href="#1-1-请求的封装" class="headerlink" title="1.1 请求的封装"></a>1.1 请求的封装</h3><span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span>);</span><br><span class="line"><span class="comment">//基础的配置</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="comment">//如果是开发环境+ /api  生产环境就不加  production</span></span><br><span class="line">  <span class="comment">//上线是不需要跨域的  因为同源 </span></span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;/api&#x27;</span> : <span class="string">&#x27;&#x27;</span><span class="comment">// 每次请求的时候都会在前面拼接一个/api</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求的拦截</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">  config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应的拦截</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">&#125;,<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">//400</span></span><br><span class="line">  <span class="comment">//500</span></span><br><span class="line">  <span class="comment">//404</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-仓库的封装"><a href="#1-2-仓库的封装" class="headerlink" title="1.2 仓库的封装"></a>1.2 仓库的封装</h3><h4 id="1-2-1-下载包"><a href="#1-2-1-下载包" class="headerlink" title="1.2.1 下载包"></a>1.2.1 下载包</h4><p><code>npm install vuex</code></p>
<h4 id="1-2-2-配置"><a href="#1-2-2-配置" class="headerlink" title="1.2.2 配置"></a>1.2.2 配置</h4><ul>
<li><p>新建store文件夹 index.js </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Store</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小三&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></li>
<li><p>入口文件引入 main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在vue组件中使用elementUI需要使用 Vue.use()</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);<span class="comment">//每个页面都可以使用Element-UI</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">App</span> &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>页面可以使用</p>
</li>
</ul>
<h3 id="1-3-路由的封装"><a href="#1-3-路由的封装" class="headerlink" title="1.3 路由的封装"></a>1.3 路由的封装</h3><h4 id="1-3-1-下载vue-router"><a href="#1-3-1-下载vue-router" class="headerlink" title="1.3.1 下载vue-router"></a>1.3.1 下载vue-router</h4><p><code>npm i vue-router -S</code></p>
<h4 id="1-3-2-新建文件"><a href="#1-3-2-新建文件" class="headerlink" title="1.3.2 新建文件"></a>1.3.2 新建文件</h4><p><code>router/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./router-config&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>####1.3.3  配置路由表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mainRouter = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/Login&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/main&#x27;</span>),</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  ...mainRouter,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h4 id="1-3-4显示路由"><a href="#1-3-4显示路由" class="headerlink" title="1.3.4显示路由"></a>1.3.4显示路由</h4><p> <code>router-view</code></p>
<h3 id="1-4-导航的封装"><a href="#1-4-导航的封装" class="headerlink" title="1.4 导航的封装"></a>1.4 导航的封装</h3><h4 id="1-4-1-筛选路由"><a href="#1-4-1-筛选路由" class="headerlink" title="1.4.1 筛选路由"></a>1.4.1 筛选路由</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getNavData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> routes = mainChildRouters.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="string">&#x27;meta&#x27;</span> <span class="keyword">in</span> item));</span><br><span class="line">  routes = routes.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="string">&#x27;title&#x27;</span> <span class="keyword">in</span> item.<span class="property">meta</span>));</span><br><span class="line">  <span class="comment">//哪些是一级菜单 item.meta 有 group</span></span><br><span class="line">  <span class="keyword">let</span> subMenus = routes.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="string">&#x27;group&#x27;</span> <span class="keyword">in</span> item.<span class="property">meta</span>));</span><br><span class="line">  <span class="comment">//哪些是二级菜单</span></span><br><span class="line">  <span class="keyword">let</span> itemMenus = routes.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="string">&#x27;item&#x27;</span> <span class="keyword">in</span> item.<span class="property">meta</span>));</span><br><span class="line">  <span class="comment">/*遍历二级菜单 对号入座 添加到对应一级菜单下*/</span></span><br><span class="line">  itemMenus.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sub = subMenus.<span class="title function_">find</span>(<span class="function"><span class="params">val</span> =&gt;</span> val.<span class="property">meta</span>.<span class="property">group</span> === item.<span class="property">meta</span>.<span class="property">item</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(sub.<span class="property">child</span>)) &#123;</span><br><span class="line">      sub.<span class="property">child</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line">    sub.<span class="property">child</span>.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> subMenus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-2-页面"><a href="#1-4-2-页面" class="headerlink" title="1.4.2 页面"></a>1.4.2 页面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class="line">  &lt;el-row class=&quot;tac&quot;&gt;</span><br><span class="line">    &lt;el-col&gt;</span><br><span class="line">      &lt;el-menu</span><br><span class="line">        router</span><br><span class="line">        :default-active=&quot;$route.matched[0].path+&#x27;/home&#x27;&quot;</span><br><span class="line">        class=&quot;el-menu-vertical-demo&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;div v-for=&quot;(item,index) in navData&quot; &gt;</span><br><span class="line">          &lt;el-submenu v-if=&quot;&#x27;child&#x27; in item&quot; :index=&quot;$route.matched[0].path+&#x27;/&#x27;+item.path&quot;&gt;</span><br><span class="line">            &lt;template slot=&quot;title&quot;&gt;</span><br><span class="line">              &lt;i :class=&quot;item.meta.icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">              &lt;span&gt;&#123;&#123;item.meta.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item v-for=&quot;(child,ind) in item.child&quot; :key=&quot;ind&quot;</span><br><span class="line">                          :index=&quot;$route.matched[0].path+&#x27;/&#x27;+child.path&quot;&gt;</span><br><span class="line">              &lt;i :class=&quot;child.meta.icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">              &lt;span slot=&quot;title&quot;&gt;&#123;&#123;child.meta.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">          &lt;el-menu-item v-else :key=&quot;index&quot;</span><br><span class="line">                        :index=&quot;$route.matched[0].path+&#x27;/&#x27;+item.path&quot;&gt;</span><br><span class="line">            &lt;i :class=&quot;item.meta.icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot=&quot;title&quot;&gt;&#123;&#123;item.meta.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;/el-menu-item&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-menu&gt;</span><br><span class="line">    &lt;/el-col&gt;</span><br><span class="line">  &lt;/el-row&gt;</span><br><span class="line">&lt;/el-aside&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-后台接口的封装"><a href="#1-5-后台接口的封装" class="headerlink" title="1.5 后台接口的封装"></a>1.5 后台接口的封装</h3><h4 id="1-5-1-服务"><a href="#1-5-1-服务" class="headerlink" title="1.5.1 服务"></a>1.5.1 服务</h4><ul>
<li><p>自动重启 </p>
<ul>
<li><p>package.json中配置 node-dev</p>
<img src="./image/image-20200630103657710.png" alt="image-20200630103657710" style="zoom:50%;" /> </li>
</ul>
</li>
<li><p>支持es6语法</p>
<ul>
<li><p>下载的包 <code>@babel/register</code>  <code>@babel/core</code>  <code>@babel/plugin-transform-modules-commonjs</code></p>
</li>
<li><p>entry.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;@babel/register&#x27;</span>)(&#123;</span><br><span class="line">  <span class="attr">plugins</span>:[</span><br><span class="line">    <span class="string">&#x27;@babel/plugin-transform-modules-commonjs&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./bin/www&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>文件的改动</p>
<img src="./image/image-20200630103822377.png" alt="image-20200630103822377" style="zoom:50%;" />  



<p>导出</p>
<img src="./image/image-20200630103900372.png" alt="image-20200630103900372" style="zoom:50%;" /> </li>
</ul>
</li>
</ul>
<h4 id="1-5-2-接口"><a href="#1-5-2-接口" class="headerlink" title="1.5.2 接口"></a>1.5.2 接口</h4><ul>
<li><p>接口文档  <a href="https://www.showdoc.cc/">https://www.showdoc.cc/</a></p>
</li>
<li><p>路由的规范</p>
</li>
<li><p>路径的规范 utils &gt; pathUtils</p>
</li>
<li><p>操作数组完成增删改查</p>
<ul>
<li>查找 <ul>
<li>遍历 foreach  map  filter</li>
<li>find/findIndex</li>
</ul>
</li>
<li>删除<ul>
<li>splite</li>
</ul>
</li>
<li>增<ul>
<li>push</li>
</ul>
</li>
<li>改<ul>
<li>数组[index] = 值</li>
</ul>
</li>
</ul>
</li>
<li><p>状态码</p>
<ul>
<li>400 : 请求不符合要求 要求的字段必须填写 但是没有填写</li>
<li>404 : 服务器没有这个资源</li>
<li>401 : 未授权 (没有登录就不能跳转到某一页)</li>
<li>422 : 参数类型出错</li>
<li>500 : 服务器内部出错</li>
</ul>
</li>
<li><p>请求方式</p>
<ul>
<li>get  : 获取数据</li>
<li>post : 提交数据/保密性的数据</li>
</ul>
</li>
</ul>
<h2 id="2-项目上线"><a href="#2-项目上线" class="headerlink" title="2. 项目上线"></a>2. 项目上线</h2><h3 id="2-1-打包"><a href="#2-1-打包" class="headerlink" title="2.1 打包"></a>2.1 打包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<h3 id="2-2-复制到服务器"><a href="#2-2-复制到服务器" class="headerlink" title="2.2 复制到服务器"></a>2.2 复制到服务器</h3><img src="./image/image-20200630081321530.png" alt="image-20200630081321530" style="zoom:50%;" /> 

<img src="./image/image-20200630081349389.png" alt="image-20200630081349389" style="zoom:50%;" /> 

<h2 id="3-代理设置–解决跨域问题"><a href="#3-代理设置–解决跨域问题" class="headerlink" title="3. 代理设置–解决跨域问题"></a>3. 代理设置–解决跨域问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">proxyTable</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span>,  <span class="comment">//是否跨域</span></span><br><span class="line">    <span class="attr">pathRewrite</span>: &#123;<span class="comment">//请求服务器  在服务器中不需要加 /api</span></span><br><span class="line">      <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span>   <span class="comment">//需要rewrite的,</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="3-功能点"><a href="#3-功能点" class="headerlink" title="3. 功能点"></a>3. 功能点</h2><p>完善题目管理</p>
<p>分页</p>
<p>列表 删除 编辑</p>
<p>课程管理</p>
<p>学生管理</p>
<p>教师管理</p>
<h2 id="5-知识点"><a href="#5-知识点" class="headerlink" title="5. 知识点"></a>5. 知识点</h2><h3 id="5-1-项目的要求"><a href="#5-1-项目的要求" class="headerlink" title="5.1 项目的要求"></a>5.1 项目的要求</h3><ul>
<li>框架搭建完成</li>
<li>题目的部分</li>
<li>课程管理</li>
<li>教师管理</li>
<li>学生管理</li>
</ul>
<h3 id="5-2-分页组件的封装"><a href="#5-2-分页组件的封装" class="headerlink" title="5.2 分页组件的封装"></a>5.2 分页组件的封装</h3><ul>
<li><p>element-ui  分页组件没有结合table</p>
</li>
<li><p>需要自己封装</p>
</li>
<li><p>步骤</p>
<ul>
<li><p>后台 接收 页数:page 每页多少个:count data/question.json</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> total = questionJson.<span class="property">length</span>;</span><br><span class="line">    </span><br><span class="line">questionJson = questionJson.<span class="title function_">slice</span>(count * (page - <span class="number">1</span>), count * page);</span><br><span class="line">    </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(questionJson);</span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">  total,<span class="comment">// 分页组件的时候会用到</span></span><br><span class="line">  <span class="attr">data</span>: questionJson</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>前端</p>
<p>请求的时候添加 count:每页多少条  page:页数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getQuestion</span>(&#123;...<span class="variable language_">this</span>.<span class="property">listQuery</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//&#123;msg,code,data&#125;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tableData</span> = res.<span class="property">data</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">total</span> = res.<span class="property">total</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>数据中添加<code>listQuery</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">listQuery</span>: &#123;</span><br><span class="line">      <span class="attr">page</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="attr">count</span>:<span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">total</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>使用分页组件  </p>
<blockquote>
<p>注意  子组件中的props中的数据要和父组件数据双向绑定  此时要用到 .sync 修饰符</p>
</blockquote>
<blockquote>
<p>每次点击页码的时候 改变的是父组件中的值</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pagination</span><br><span class="line">  @pagination=&quot;requestQuestionData&quot;</span><br><span class="line">  :total=&quot;total&quot;</span><br><span class="line">  :page.sync=&quot;listQuery.page&quot;</span><br><span class="line">  :limit.sync=&quot;listQuery.count&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/pagination&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="5-3-模糊查找"><a href="#5-3-模糊查找" class="headerlink" title="5.3 模糊查找"></a>5.3 模糊查找</h3><ul>
<li><p>后台  接收相应的参数 title  course</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;count, page, title, course&#125; = req.<span class="property">query</span>;</span><br><span class="line">count = count || <span class="number">3</span>;</span><br><span class="line">page = page || <span class="number">1</span>;</span><br><span class="line">title = title || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">course = course || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> questionJson = fs.<span class="title function_">readFileSync</span>(questionDataPath, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="comment">//转换成数组</span></span><br><span class="line">questionJson = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(questionJson);</span><br><span class="line"><span class="keyword">let</span> total = questionJson.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*模糊搜索*/</span></span><br><span class="line"><span class="comment">//搜索题目title</span></span><br><span class="line">questionJson = questionJson.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">title</span>.<span class="title function_">includes</span>(title));</span><br><span class="line"><span class="comment">//搜索所属课程</span></span><br><span class="line"><span class="keyword">if</span> (course) &#123;</span><br><span class="line">  questionJson = questionJson.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">course</span> === course);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>前端  对应的参数传递过去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-form :inline=&quot;true&quot; :model=&quot;searchForm&quot; class=&quot;demo-form-inline&quot;&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;标题&quot;&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;searchForm.title&quot; placeholder=&quot;题目&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;所属课程&quot;&gt;</span><br><span class="line">    &lt;el-select v-model=&quot;searchForm.course&quot; placeholder=&quot;所属课程&quot;&gt;</span><br><span class="line">      &lt;el-option label=&quot;vue&quot; value=&quot;vue&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">      &lt;el-option label=&quot;react&quot; value=&quot;react&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;requestQuestionData&quot;&gt;查询&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;warning&quot; @click=&quot;handleReset&quot;&gt;重置&lt;/el-button&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">&lt;/el-form&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>题目查找 模糊搜索</p>
</li>
<li><p>vue导航守卫 (路由)</p>
<ul>
<li>没有登录 react 高阶组件</li>
</ul>
</li>
<li><p>登录授权</p>
</li>
<li><p>删除完重新加载</p>
<ul>
<li>重新请求下数据  created  this.requestTableData()</li>
</ul>
</li>
</ul>
<h3 id="5-4-文件上传"><a href="#5-4-文件上传" class="headerlink" title="5.4 文件上传"></a>5.4 文件上传</h3><ul>
<li><p>前端</p>
<ul>
<li><p>组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-form-item label=&quot;图片&quot; prop=&quot;img&quot;&gt;</span><br><span class="line">  &lt;!--            &lt;el-input v-model=&quot;ruleForm.img&quot;&gt;&lt;/el-input&gt;--&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--自定义上传--&gt;</span><br><span class="line">  &lt;el-upload</span><br><span class="line">    class=&quot;avatar-uploader&quot;</span><br><span class="line">    action=&quot;&quot;</span><br><span class="line">    :show-file-list=&quot;false&quot;</span><br><span class="line">    :data=&quot;&#123;file:&#x27;file&#x27;&#125;&quot;</span><br><span class="line">    :http-request=&quot;handleUpload&quot;</span><br><span class="line">    :before-upload=&quot;beforeAvatarUpload&quot;&gt;</span><br><span class="line">    &lt;img v-if=&quot;ruleForm.img&quot; :src=&quot;ruleForm.img&quot; class=&quot;avatar&quot;&gt;</span><br><span class="line">    &lt;i v-else class=&quot;el-icon-plus avatar-uploader-icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/el-upload&gt;</span><br><span class="line"></span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>自定义上传<code>http-request</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleUpload</span>(<span class="params">param</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> fileObj = param.<span class="property">file</span>;</span><br><span class="line">  <span class="comment">// FormData 对象</span></span><br><span class="line">  <span class="keyword">let</span> form = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">  <span class="comment">// 文件对象</span></span><br><span class="line">  form.<span class="title function_">append</span>(<span class="string">&quot;filename&quot;</span>, param.<span class="property">file</span>.<span class="property">size</span> + <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 其他参数</span></span><br><span class="line">  form.<span class="title function_">append</span>(<span class="string">&quot;photos&quot;</span>, fileObj);</span><br><span class="line">  <span class="comment">//调用api接口</span></span><br><span class="line">  <span class="title function_">uploadFile</span>(form).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;msg, imgUrl&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(msg);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">img</span> = imgUrl;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeAvatarUpload</span>(<span class="params">file</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isJPGOrPng = file.<span class="property">type</span> === <span class="string">&#x27;image/jpeg&#x27;</span> || <span class="string">&#x27;image/png&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> isLt2M = file.<span class="property">size</span> / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isJPGOrPng) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传头像图片只能是 JPG 或者 png 格式!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!isLt2M) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传头像图片大小不能超过 2MB!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isJPGOrPng &amp;&amp; isLt2M;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>后台 <code>multer</code></p>
<ul>
<li><p>导入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multer <span class="keyword">from</span> <span class="string">&#x27;multer&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>设置 上传的路径 / 文件重命名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">  <span class="comment">//设置上传路径</span></span><br><span class="line">  <span class="attr">destination</span>: <span class="keyword">function</span> (<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, uploadPath)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//给文件重命名</span></span><br><span class="line">  <span class="attr">filename</span>: <span class="keyword">function</span> (<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, file.<span class="property">fieldname</span> + req.<span class="property">body</span>.<span class="property">filename</span> + <span class="string">&#x27;-&#x27;</span> + file.<span class="property">originalname</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 初始化upload 实例</span></span><br><span class="line"><span class="keyword">let</span> upload = <span class="title function_">multer</span>(&#123;storage&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>上传接口的处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, upload.<span class="title function_">single</span>(<span class="string">&#x27;photos&#x27;</span>), <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">file</span>);</span><br><span class="line">  <span class="comment">// console.log(req.body);</span></span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;上传成功&#x27;</span>,</span><br><span class="line">    <span class="attr">imgUrl</span>: <span class="string">&#x27;http://localhost:7007/&#x27;</span> + req.<span class="property">file</span>.<span class="property">filename</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>静态资源的处理app.js中添加路径为静态资源路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以通过地址的方式访问uploads里面的资源</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>)));</span><br></pre></td></tr></table></figure></li>
<li><p>上传之后 列表页的处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-table-column</span><br><span class="line">  fixed</span><br><span class="line">  prop=&quot;img&quot;</span><br><span class="line">  label=&quot;图片预览&quot;</span><br><span class="line">  width=&quot;150&quot;&gt;</span><br><span class="line">  &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">    &lt;img style=&quot;width:100px&quot; v-if=&quot;scope.row.img&quot; :src=&quot;scope.row.img&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;img style=&quot;width:100px&quot; v-else src=&quot;../assets/noPic.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>ppt晚上之前发过来  至少10分钟的讲解 </p>
</li>
</ul>
<ul>
<li>vue原理</li>
<li>promise</li>
<li>async await</li>
<li>http协议</li>
</ul>
<ul>
<li><p>js上 </p>
<ul>
<li>类型转换 条件语句 switch  if </li>
</ul>
</li>
<li><p>node</p>
<ul>
<li>饿了么弹框</li>
</ul>
</li>
<li><p>模块化 / js下</p>
<ul>
<li><a href="https://org.modao.cc/app/4dec0a0ec296f30eb41a70d25b3171aae8ab7d6c?simulator_type=device&amp;sticky">https://org.modao.cc/app/4dec0a0ec296f30eb41a70d25b3171aae8ab7d6c?simulator_type=device&amp;sticky</a> </li>
</ul>
</li>
<li><p>vue 组件封装</p>
<ul>
<li><a href="https://org.modao.cc/app/c9b8ef14751a0d84b2cbf21ff83f927609918506?simulator_type=device&amp;sticky">https://org.modao.cc/app/c9b8ef14751a0d84b2cbf21ff83f927609918506?simulator_type=device&amp;sticky</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序入门</title>
    <url>/liuqi_blogs/2022/01/19/%E7%AC%AC%E4%B8%89%E5%91%A8-%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%95%B4%E4%BD%93/</url>
    <content><![CDATA[<h1 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h1><h2 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1. 是什么?"></a>1. 是什么?</h2><ul>
<li><p>不是网页  没有跨域</p>
</li>
<li><p>不是app  </p>
</li>
<li><p>嵌套在app中的一种衍生产品 </p>
<ul>
<li>微信小程序</li>
<li>支付宝小程序</li>
<li>字节跳动小程序</li>
<li>qq小程序</li>
<li>百度小程序<span id="more"></span>
<h2 id="2-下载"><a href="#2-下载" class="headerlink" title="2. 下载"></a>2. 下载</h2></li>
</ul>
</li>
<li><p>官网 : <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a></p>
</li>
</ul>
<img src="./image/image-20200713091718367.png" alt="image-20200713091718367" style="zoom: 33%;" /> 

<h2 id="3-开发工具"><a href="#3-开发工具" class="headerlink" title="3. 开发工具"></a>3. 开发工具</h2><img src="./image/image-20200713092601472.png" alt="image-20200713092601472" style="zoom:23%;" /> 

<ul>
<li>开启对请求的不校验</li>
</ul>
<img src="./image/image-20200713092757423.png" alt="image-20200713092757423" style="zoom:33%;" /> 

<h2 id="4-文档介绍"><a href="#4-文档介绍" class="headerlink" title="4. 文档介绍"></a>4. 文档介绍</h2><img src="./image/image-20200713095622026.png" alt="image-20200713095622026" style="zoom:50%;" /> 

<ul>
<li>指南: 大的方向 小程序大概怎么开发</li>
<li>框架: 文件的配置和语法</li>
<li>组件: 页面的ui</li>
<li>api : 跳转 请求 嵌入网页  提示框…</li>
</ul>
<h2 id="5-新建页面"><a href="#5-新建页面" class="headerlink" title="5. 新建页面"></a>5. 新建页面</h2><p><img src="./image/image-20200713101122560.png" alt="image-20200713101122560"></p>
<h3 id="5-1-入口文件"><a href="#5-1-入口文件" class="headerlink" title="5.1 入口文件"></a>5.1 入口文件</h3><p><img src="./image/image-20200713101208368.png" alt="image-20200713101208368"></p>
<h2 id="6-练习"><a href="#6-练习" class="headerlink" title="6. 练习"></a>6. 练习</h2><ul>
<li>新建一个页面 将这个页面变成入口文件</li>
<li>在页面中添加样式 </li>
<li>修改全局配置文件 <ul>
<li>修改头部</li>
<li>修改背景色</li>
<li>添加 底部导航</li>
<li>添加图片 显示/ 选中</li>
</ul>
</li>
</ul>
<h2 id="7-语法"><a href="#7-语法" class="headerlink" title="7. 语法"></a>7. 语法</h2><h3 id="7-1-模板-循环-判断"><a href="#7-1-模板-循环-判断" class="headerlink" title="7.1 模板 循环 判断"></a>7.1 模板 循环 判断</h3><img src="image/image-20200713161832221.png" alt="image-20200713161832221" style="zoom:50%;" /> 



<p><img src="image/image-20200713161847595.png" alt="image-20200713161847595" style="zoom:50%;" />\</p>
<img src="image/image-20200713161859641.png" alt="image-20200713161859641" style="zoom:50%;" /> 

<h3 id="7-2-事件"><a href="#7-2-事件" class="headerlink" title="7.2 事件"></a>7.2 事件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">data-title</span>=<span class="string">&quot;&#123;&#123;item&#125;&#125;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;toQuestionDetail&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>传值 data-xxx  传值</p>
</li>
<li><p>接收到值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">toQuestionDetail</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">title</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-3-输入事件"><a href="#7-3-输入事件" class="headerlink" title="7.3 输入事件"></a>7.3 输入事件</h3><ul>
<li>输入框</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;weui-input&quot;</span>  <span class="attr">bindinput</span>=<span class="string">&quot;handleUsername&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;weui-input&quot;</span>  <span class="attr">bindinput</span>=<span class="string">&quot;handlePassword&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>处理事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleUsername</span>(<span class="params">event</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">detail</span>.<span class="property">value</span>)</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">     <span class="attr">username</span>:event.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="7-4-全局数据"><a href="#7-4-全局数据" class="headerlink" title="7.4 全局数据"></a>7.4 全局数据</h3><ul>
<li>app.js</li>
</ul>
<img src="./image/image-20200715101112757.png" alt="image-20200715101112757" style="zoom:50%;" /> 

<ul>
<li><p>页面上</p>
<p><img src="./image/image-20200715101146967.png" alt="image-20200715101146967"> </p>
<img src="./image/image-20200715101203414.png" alt="image-20200715101203414" style="zoom:50%;" /> </li>
</ul>
<h2 id="8-组件"><a href="#8-组件" class="headerlink" title="8. 组件"></a>8. 组件</h2><h3 id="8-1-常用组件"><a href="#8-1-常用组件" class="headerlink" title="8.1 常用组件"></a>8.1 常用组件</h3><ul>
<li><p>容器组件 : 承载更多的子元素</p>
<p><code>scroll-view</code> : 滚动(可以横向滚动/纵向)</p>
<p><code>view</code> : 类似<code>div</code></p>
</li>
<li><p>普通组件 : 放在容器组件中</p>
<p><code>text</code> : 存放文本 地位和<code>span</code> 类似</p>
<p><code>icon</code> : 想要打造一个和微信一样的UI页面</p>
<p><code>navigator</code> : 类似路由中的 <code>router-link</code> 可以实现点击之后跳转</p>
</li>
<li><p>表单组件</p>
<p><code>button</code> : 按钮</p>
<p><code>checkbox</code> : 多选</p>
<p><code>picker</code>: 选择器</p>
<p><code>radio</code>: 单选</p>
<p><code>radio-group</code> : 单选组</p>
<p><code>input</code> :输入框</p>
</li>
</ul>
<h3 id="8-1-navigator-传值"><a href="#8-1-navigator-传值" class="headerlink" title="8.1 navigator 传值"></a>8.1 navigator 传值</h3><ul>
<li>方式一 : 通过组件</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// url : 跳转对应页面  title: 想要传过去的值</span></span><br><span class="line"></span><br><span class="line">&lt;navigator url=<span class="string">&quot;/pages/navigate/navigate?title=&#123;&#123;item&#125;&#125;&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/navigator&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另外一个页面接收</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(options)</span><br><span class="line">    <span class="comment">//将数据赋值的方法 setState</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>:options.<span class="property">title</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>方式二 : 通过动态 api</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>:<span class="string">&quot;/pages/questionDetail/questionDetail&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="9-api"><a href="#9-api" class="headerlink" title="9. api"></a>9. api</h2><ul>
<li><p>wx.xxx({属性})</p>
</li>
<li><p>网络请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//需要在onLoad生命周期中请求数据</span></span><br><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>:url+<span class="string">&quot;/question/list&quot;</span>,</span><br><span class="line">  		<span class="attr">method</span>:<span class="string">&quot;GET&quot;</span></span><br><span class="line">      <span class="attr">success</span>:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">				<span class="comment">// 将数据赋值到data中</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">questionList</span>:res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="10-样式"><a href="#10-样式" class="headerlink" title="10. 样式"></a>10. 样式</h2><p>大部分情况和css是一致的</p>
<p>与 CSS 相比，WXSS 扩展的特性有：</p>
<ul>
<li><p>尺寸单位</p>
<ul>
<li>px</li>
<li>rpx : 小程序提供的样式单位</li>
</ul>
<p>每个手机的机型都有一个倍屏概念 屏幕宽度 375px  1px == 两个物理像素  这种情况就叫2倍屏</p>
<p>普通的webapp :  缩放去解决倍屏问题  1px  transform: scale(0.5)</p>
<p>rpx 就是用来解决小程序的倍屏问题的  1rpx === 1个物理像素</p>
</li>
<li><p>样式导入</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./weui.wxss&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul>
<li>每天晚上都打卡再睡觉</li>
<li>10点之前 11点</li>
</ul>
<h2 id="2020年07月14号"><a href="#2020年07月14号" class="headerlink" title="2020年07月14号"></a>2020年07月14号</h2><ul>
<li>页面渲染</li>
<li>请求数据  登录页面  首页</li>
<li>(做题/选做)</li>
</ul>
<h2 id="2020年07月15日-星期三-天气晴-21°-31°"><a href="#2020年07月15日-星期三-天气晴-21°-31°" class="headerlink" title="2020年07月15日 星期三 天气晴 21°-31°"></a>2020年07月15日 星期三 天气晴 21°-31°</h2><img src="./image/image-20200715091515937.png" alt="image-20200715091515937" style="zoom:50%;" /> 



<p>vue/ react </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">模板:</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;数据&quot;</span>  <span class="attr">:key</span>=<span class="string">&quot;唯一标识&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on</span>=<span class="string">&quot;数据&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;list.map(item=&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">渲染函数 </span><br><span class="line">render : 编译模板</span><br><span class="line"></span><br><span class="line">vNode(虚拟dom)</span><br><span class="line">&#123;</span><br><span class="line">	key: &quot;div&quot;,</span><br><span class="line">	children:[&#123;key:&quot;p&quot;,children:&quot;我是p&quot;&#125;],</span><br><span class="line">	props:&#123;id:&quot;box&quot;,class:&quot;container&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">diff : 原有的vNode 和新的vNode对比 只会更新变化的内容</span><br><span class="line"></span><br><span class="line">视图</span><br><span class="line"></span><br><span class="line">div</span><br><span class="line">div</span><br></pre></td></tr></table></figure>

<ul>
<li>登录的逻辑<ul>
<li>布局 两个输入框 一个按钮</li>
<li>点击登录的时候<ul>
<li>参数传过去</li>
<li>失败 toast</li>
<li>成功 跳转页面</li>
</ul>
</li>
</ul>
</li>
<li>点击进入详情之前 判断</li>
<li>进入详情页 再次请求数据 </li>
</ul>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>项目的搭建</title>
    <url>/liuqi_blogs/2021/05/19/%E7%AC%AC%E4%BA%8C%E5%91%A8-M%E7%AB%99%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="项目的搭建"><a href="#项目的搭建" class="headerlink" title="项目的搭建"></a>项目的搭建</h1><h2 id="1-路由"><a href="#1-路由" class="headerlink" title="1. 路由"></a>1. 路由</h2><p><code>react-router-dom</code></p>
<h3 id="1-1-首页引入-路由组件-确定路由模式"><a href="#1-1-首页引入-路由组件-确定路由模式" class="headerlink" title="1.1 首页引入 路由组件 确定路由模式"></a>1.1 首页引入 路由组件 确定路由模式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HashRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">RouterView</span> <span class="attr">routes</span>=<span class="string">&#123;routeConfig&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="1-2-配置路由文件"><a href="#1-2-配置路由文件" class="headerlink" title="1.2 配置路由文件"></a>1.2 配置路由文件</h3><ol>
<li><p>router文件夹新建文件 <code>router-config.js</code> 配置路由表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 配置路由表</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LoadAble</span> <span class="keyword">from</span> <span class="string">&quot;../hoc/LoadAble&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">LoadAble</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/login/Login&#x27;</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">LoadAble</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/home/Home&#x27;</span>)),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home/exercise&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">LoadAble</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/exercise/Exercise&#x27;</span>))</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home/news&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">LoadAble</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/news/News&#x27;</span>))</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home/fineClass&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">LoadAble</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/fineClass/FineClass&#x27;</span>))</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home/me&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">LoadAble</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/me/Me&#x27;</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">from</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li>
<li><p>区分一级路由和二级路由</p>
<ul>
<li>切换部分内容 要跳转的是二级路由</li>
<li>切换整体内容 要跳转的是一级路由</li>
</ul>
</li>
</ol>
<h3 id="1-3-封装路由组件-RouterView"><a href="#1-3-封装路由组件-RouterView" class="headerlink" title="1.3 封装路由组件 RouterView"></a>1.3 封装路由组件 RouterView</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Route</span>,<span class="title class_">Switch</span>,<span class="title class_">Redirect</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* &lt;RouterView routes=&#123;数组(路由表的配置文件)&#125;/&gt;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 在哪些地方引入</span></span><br><span class="line"><span class="comment">* 1. 入口组件</span></span><br><span class="line"><span class="comment">* 2. 存在二级路由的页面引入</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">RouterView</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/*路由的配置文件*/</span></span><br><span class="line">    <span class="keyword">const</span> &#123;routes&#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="comment">/*Switch  只能包裹 Route  Redirect 一旦匹配成功就不会向后匹配*/</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">          routes.map((item,key)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">            /*重定向*/</span></span><br><span class="line"><span class="language-xml">            if (item.from !== undefined) &#123;</span></span><br><span class="line"><span class="language-xml">              return <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">exact</span> <span class="attr">key</span>=<span class="string">&#123;key&#125;</span> <span class="attr">from</span>=<span class="string">&#123;item.from&#125;</span> <span class="attr">to</span>=<span class="string">&#123;item.redirect&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">            const Template = item.component;</span></span><br><span class="line"><span class="language-xml">            /*路由*/</span></span><br><span class="line"><span class="language-xml">            return  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">key</span>=<span class="string">&#123;key&#125;</span> <span class="attr">path</span>=<span class="string">&#123;item.path&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">render</span>=<span class="string">&#123;(props)</span>=&gt;</span> <span class="tag">&lt;<span class="name">Template</span> &#123;<span class="attr">...this.props</span>&#125; &#123;<span class="attr">...props</span>&#125; <span class="attr">routes</span>=<span class="string">&#123;item.routes&#125;/</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">          &#125;)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Switch</span></span><br><span class="line"><span class="comment">*   Route</span></span><br><span class="line"><span class="comment">*   Route</span></span><br><span class="line"><span class="comment">*   Route</span></span><br><span class="line"><span class="comment">*   Route</span></span><br><span class="line"><span class="comment">*   Redirect</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-高阶组件-实现路由懒加载"><a href="#1-3-高阶组件-实现路由懒加载" class="headerlink" title="1.3 高阶组件 实现路由懒加载"></a>1.3 高阶组件 实现路由懒加载</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*此高阶组件处理路由懒加载*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">PureComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//()=&gt;import(&#x27;路径&#x27;)  返回值是promise</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">LoadAble</span>(<span class="params">component</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">PureComponent</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">      <span class="title class_">Template</span>: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;<span class="title class_">Template</span>&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title class_">Template</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Template</span> &#123;<span class="attr">...this.props</span>&#125;/&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="variable language_">module</span> = <span class="keyword">await</span> <span class="title function_">component</span>()</span><br><span class="line">      <span class="comment">//组件</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="title class_">Template</span>: <span class="variable language_">module</span>.<span class="property">default</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-结合页面"><a href="#1-4-结合页面" class="headerlink" title="1.4 结合页面"></a>1.4 结合页面</h3><ul>
<li>在需要用到二级路由的页面 引入 <code>RouterView</code></li>
</ul>
<h3 id="1-5-动态路由-一级路由中"><a href="#1-5-动态路由-一级路由中" class="headerlink" title="1.5 动态路由 一级路由中"></a>1.5 动态路由 一级路由中</h3><h2 id="2-redux"><a href="#2-redux" class="headerlink" title="2. redux"></a>2. redux</h2><h2 id="3-布局"><a href="#3-布局" class="headerlink" title="3. 布局"></a>3. 布局</h2><ul>
<li>整体布局 上中下</li>
</ul>
<h2 id="4-组件的封装"><a href="#4-组件的封装" class="headerlink" title="4. 组件的封装"></a>4. 组件的封装</h2><ul>
<li>头部<ul>
<li>左侧<ul>
<li>返回按钮 back=true</li>
<li>用户信息 info=true</li>
</ul>
</li>
<li>中间的部分<ul>
<li>标题     title={‘标题’}</li>
<li>选项卡  showChoose=true</li>
</ul>
</li>
<li>右侧<ul>
<li>没有</li>
</ul>
</li>
</ul>
</li>
<li>尾部</li>
</ul>
<h2 id="5-前后端联调"><a href="#5-前后端联调" class="headerlink" title="5. 前后端联调"></a>5. 前后端联调</h2><ul>
<li>跨域<ul>
<li>代理 </li>
<li>后端处理  cors</li>
<li>jsonp</li>
<li>websocket</li>
</ul>
</li>
<li>axios二次封装<ul>
<li>utils</li>
</ul>
</li>
</ul>
<h2 id="6-逻辑的处理"><a href="#6-逻辑的处理" class="headerlink" title="6. 逻辑的处理"></a>6. 逻辑的处理</h2><h3 id="6-1-做题"><a href="#6-1-做题" class="headerlink" title="6.1 做题"></a>6.1 做题</h3><ul>
<li><p>根据专业专高实训有一个大的分类  前端筛选</p>
</li>
<li><p>点击其中一个分类 对应出现相应的课程</p>
</li>
<li><p>点击去练习的时候</p>
<ul>
<li>react / vue 请求数据 ?course=react   ?course=vue  得到相关课程所有的题目</li>
<li>渲染详情页</li>
<li>详情页 就要用到动态路由</li>
</ul>
</li>
<li><p>步骤</p>
<ul>
<li>新建一个动态路由 代表做题的详情页  /:course</li>
<li>动态路由中获取参数</li>
<li>请求对应的题目</li>
<li>做题<ul>
<li>每点击一个选项 都能获取当前题的id 和 选项</li>
<li>点击下一题 : 将id 和 选项 push到一个数组中</li>
<li>id唯一 : 如果当前id对应的题目存在数组中 不用push 直接修改对应id的选项</li>
<li>点击提交的时候 将数组和数据进行比较 哪个对了 哪个错了 跳转页面 成绩传过去 传值 redux</li>
<li>bug : 点击的时候 需要点击2次提交才会提交成功 问题:仓库还没存储 就获取  导致数据丢失  解决方案 : 点击的时候 默认什么选项也不选  在点击选项的时候把数据提交到仓库 </li>
</ul>
</li>
<li>成绩</li>
<li>提交到后台<ul>
<li>post 接口 接收成绩 做题个数 uid 正确率 </li>
</ul>
</li>
</ul>
</li>
<li><p>跳转到详情页 动态路由</p>
</li>
<li><p>做题剩余的逻辑</p>
<ul>
<li><p>开始做题 要有个提示</p>
</li>
<li><p>没做完点击返回的时候 有个提示 确定 返回 取消 继续做题</p>
</li>
<li><p>提交的时候也要有提示 确定提交吗 确定的时候 看到成绩</p>
</li>
<li><p>上一题 下一题</p>
</li>
<li><p>点击确定提交 数据提交到后台 uid: (谁做的) 成绩:数字 做题数量:数字 错题:[qId] </p>
</li>
<li><p>后台存到一个数组中  [{uid :’adsdfaf’,num:0,错题:[qId]}]</p>
</li>
<li><p>首页展示的每个课程的题的个数 能实现就实现 实现不了就算了</p>
</li>
<li><p>后台管理 首页 : 谁做题的分数最高 做题的总个数</p>
</li>
<li><p>错题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">result(做题结果)--&gt;send(将错题id提交到后台)--&gt;数组的形式存储到这个人对应的个人信息中--&gt;前端获取个人信息的时候就能获取错题id--&gt;根据题目id渲染响应的错题</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="6-2-登录-用户管理"><a href="#6-2-登录-用户管理" class="headerlink" title="6.2 登录/用户管理"></a>6.2 登录/用户管理</h3><ul>
<li><p>同学学生账号登录 登陆之后就可以答题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">登录--&gt;首页--&gt;答题可以预览详情</span><br><span class="line">没有登录--&gt;不可以答题不可以预览详情</span><br><span class="line">没有登录--&gt;不能看到我的页面中显示的昵称</span><br><span class="line">登录--&gt;修改昵称修改密码</span><br><span class="line">login(请求登录接口)--&gt;得到登录成功存储本地--&gt;token(得到一个token)</span><br><span class="line">token--有token--&gt;进入详情</span><br><span class="line">token--没有token--&gt;不能进入详情</span><br></pre></td></tr></table></figure></li>
<li><p>详情拦截</p>
<ul>
<li>本地存储 token</li>
<li>没有token 不让进入详情页</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">进入详情页--有token--&gt;详情页</span><br><span class="line">进入详情页--没有token--&gt;跳转到登录页</span><br><span class="line">跳转到登录页--登录成功--&gt;详情页</span><br></pre></td></tr></table></figure></li>
<li><p>公司中的token</p>
<ul>
<li>前端 token : <ul>
<li>access_token : 获取用户权限  每次在请求头中添加一个token </li>
<li>refresh_token : 刷新access_token 后台 2h token过期 旧的token换新的token</li>
<li>为什么要有token : 保证数据安全性 登录成功之后 返回token 每次请求的时候在请求头中添加token</li>
</ul>
</li>
<li>后端 :jwt : json web token 验证 生成token(加密的过程)</li>
</ul>
</li>
</ul>
<h3 id="6-3-待完善逻辑"><a href="#6-3-待完善逻辑" class="headerlink" title="6.3 待完善逻辑"></a>6.3 待完善逻辑</h3><ul>
<li>错题</li>
<li></li>
</ul>
<h2 id="7-接口的处理"><a href="#7-接口的处理" class="headerlink" title="7. 接口的处理"></a>7. 接口的处理</h2><ul>
<li>后台管理页面显示 谁的做题量最高 谁的正确率最高</li>
<li>登录 学生的账号</li>
<li>redux 持久化  我的页面</li>
<li>没登录 不能做题 (高阶组件登录拦截)</li>
</ul>
<h2 id="8-动态路由"><a href="#8-动态路由" class="headerlink" title="8. 动态路由"></a>8. 动态路由</h2><h3 id="8-1-新建一个页面组件"><a href="#8-1-新建一个页面组件" class="headerlink" title="8.1 新建一个页面组件"></a>8.1 新建一个页面组件</h3><img src="image/image-20200708101118919.png" alt="image-20200708101118919" style="zoom:50%;" /> 



<h3 id="8-2-路由配置文件中添加动态路由的配置文件"><a href="#8-2-路由配置文件中添加动态路由的配置文件" class="headerlink" title="8.2 路由配置文件中添加动态路由的配置文件"></a>8.2 路由配置文件中添加动态路由的配置文件</h3><p><img src="./image/image-20200708101158243.png" alt="image-20200708101158243"> </p>
<h3 id="8-3-页面中处理跳转-拼接一个参数"><a href="#8-3-页面中处理跳转-拼接一个参数" class="headerlink" title="8.3 页面中处理跳转 拼接一个参数"></a>8.3 页面中处理跳转 拼接一个参数</h3><p><img src="./image/image-20200708102837438.png" alt="image-20200708102837438"></p>
<h3 id="8-4-在详情页中获取动态路由的参数"><a href="#8-4-在详情页中获取动态路由的参数" class="headerlink" title="8.4 在详情页中获取动态路由的参数"></a>8.4 在详情页中获取动态路由的参数</h3><img src="./image/image-20200708102913637.png" alt="image-20200708102913637" style="zoom:50%;" /> 

<h2 id="9-redux"><a href="#9-redux" class="headerlink" title="9. redux"></a>9. redux</h2><h3 id="9-1-下载包-redux-react-redux"><a href="#9-1-下载包-redux-react-redux" class="headerlink" title="9.1 下载包 redux react-redux"></a>9.1 下载包 redux react-redux</h3><ul>
<li><p>redux : 仓库</p>
</li>
<li><p>react-redux 将仓库的内容映射到页面中</p>
</li>
</ul>
<h3 id="9-2-搭建仓库"><a href="#9-2-搭建仓库" class="headerlink" title="9.2 搭建仓库"></a>9.2 搭建仓库</h3><ul>
<li>新建一个store文件夹 index.js</li>
<li>新建reducers </li>
<li>合并reducer </li>
<li>actions</li>
<li>页面使用  react-redux<ul>
<li>入口组件中使用 Provider</li>
<li>组件中使用connect</li>
</ul>
</li>
</ul>
<h3 id="9-3-该项目redux使用场景"><a href="#9-3-该项目redux使用场景" class="headerlink" title="9.3 该项目redux使用场景"></a>9.3 该项目redux使用场景</h3><ul>
<li>做题成绩</li>
<li>用户</li>
</ul>
]]></content>
      <categories>
        <category>react.js</category>
      </categories>
      <tags>
        <tag>react.js</tag>
      </tags>
  </entry>
  <entry>
    <title>项目的搭建</title>
    <url>/liuqi_blogs/2021/02/19/%E7%AC%AC%E4%BA%8C%E5%91%A8%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="M栈的项目"><a href="#M栈的项目" class="headerlink" title="M栈的项目"></a>M栈的项目</h1><h2 id="移动端-结合上周后台管理"><a href="#移动端-结合上周后台管理" class="headerlink" title="移动端 结合上周后台管理"></a>移动端 结合上周后台管理</h2><ul>
<li><p>移动端的适配  不同的浏览器展示相同的样式</p>
</li>
<li><p>浏览器的事件 touch 滑动事件 事件穿透问题</p>
</li>
<li><p>技术栈</p>
<span id="more"></span>
<ul>
<li>React搭建移动端</li>
<li>antd : pc端的ui库</li>
<li>Material-UI  结合 react的移动端  按钮 点击波浪效果  颜色搭配 绿色/蓝色/红色 浮动按钮</li>
</ul>
</li>
<li><p>业务流程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">login(学生的身份登录)--&gt;home(首页)</span><br><span class="line">home--&gt;精品课</span><br><span class="line">home--&gt;答题</span><br><span class="line">home--&gt;资讯</span><br><span class="line">home--&gt;我的</span><br><span class="line">答题--&gt;答题页面</span><br><span class="line">答题页面--&gt;成绩</span><br><span class="line">成绩--&gt;传递到后台</span><br><span class="line">精品课--&gt;精品课分类</span><br><span class="line">精品课分类--&gt;精品课详情</span><br><span class="line">资讯--&gt;资讯列表</span><br><span class="line">资讯列表--&gt;资讯详情</span><br><span class="line">我的--&gt;修改个人资料</span><br><span class="line">我的--&gt;错题记录</span><br><span class="line">我的--&gt;退出登录</span><br></pre></td></tr></table></figure></li>
<li><p>真机调试</p>
</li>
</ul>
<h2 id="1-适配"><a href="#1-适配" class="headerlink" title="1. 适配"></a>1. 适配</h2><h3 id="1-1-视口"><a href="#1-1-视口" class="headerlink" title="1.1 视口"></a>1.1 视口</h3><ul>
<li><p>布局视口 980px (不同的浏览器会有不同的效果)</p>
</li>
<li><p>视觉视口 375px 视觉视口</p>
</li>
<li><p>理想状态  布局视口===视觉视口</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0,user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><pre><code>user-scalable=no//click 点击300ms延时的问题就解决了
</code></pre>
</li>
</ul>
<h3 id="1-2-方案"><a href="#1-2-方案" class="headerlink" title="1.2 方案"></a>1.2 方案</h3><p>**1. **在 head 设置 width=device-width 的 viewport</p>
<p><strong>2.</strong> 在 css 中使用 px  (rem:慎用) 规范 : 4的倍数</p>
<p>**3. ** 在适当的场景(宽度)使用 flex 布局，或者配合 vw/vh 进行自适应 百分比</p>
<p>**4. ** 在跨设备类型的时候（pc &lt;-&gt; 手机 &lt;-&gt; 平板）使用媒体查询</p>
<p><strong>5.</strong>  在跨设备类型如果交互差异太大的情况，考虑分开项目开发 pc  移动</p>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
</search>
